{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.0", "generated_at": "2022-10-11T18:38:22.962584Z", "invocation_id": "24bac2e1-2117-4a07-bed8-4aba5a5dfaaa", "env": {}, "project_id": "d28d53cfd8d76ef56ce44f186d5930f1", "user_id": "cb5a4444-34bc-4c27-b345-3bfc2aed6596", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.thorchain_models.bronze__slash_amounts": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset,\n  asset_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_slash_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_slash_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__slash_amounts"], "unique_id": "model.thorchain_models.bronze__slash_amounts", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__slash_amounts.sql", "original_file_path": "models/bronze/bronze__slash_amounts.sql", "name": "bronze__slash_amounts", "alias": "slash_amounts", "checksum": {"name": "sha256", "checksum": "55cff9c17764e7ccca2a72085b2ab9b73dee8d17dbb113efbab71cfb5f056d21"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_slash_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__slash_amounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.5284789, "compiled_sql": "\n\nSELECT\n  pool,\n  asset,\n  asset_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_slash_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.slash_amounts"}, "model.thorchain_models.bronze__gas_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  asset_e8,\n  rune_e8,\n  tx_count,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_gas_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__gas_events"], "unique_id": "model.thorchain_models.bronze__gas_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__gas_events.sql", "original_file_path": "models/bronze/bronze__gas_events.sql", "name": "bronze__gas_events", "alias": "gas_events", "checksum": {"name": "sha256", "checksum": "717f2afd2a887457b34041e9b16729d5f5f726dcc64056659226bce122b78237"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_gas_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__gas_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.531104, "compiled_sql": "\n\nSELECT\n  asset,\n  asset_e8,\n  rune_e8,\n  tx_count,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_gas_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.gas_events"}, "model.thorchain_models.bronze__inactive_vault_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_inactive_vault_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_inactive_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__inactive_vault_events"], "unique_id": "model.thorchain_models.bronze__inactive_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__inactive_vault_events.sql", "original_file_path": "models/bronze/bronze__inactive_vault_events.sql", "name": "bronze__inactive_vault_events", "alias": "inactive_vault_events", "checksum": {"name": "sha256", "checksum": "f62d52b2b0d89481f62faf2b772119592cf692da2e785c5b2d5697e5cf109b0f"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_inactive_vault_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__inactive_vault_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.532219, "compiled_sql": "\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_inactive_vault_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.inactive_vault_events"}, "model.thorchain_models.bronze__slash_points": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_address,\n  slash_points,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_slash_points_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_slash_points_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__slash_points"], "unique_id": "model.thorchain_models.bronze__slash_points", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__slash_points.sql", "original_file_path": "models/bronze/bronze__slash_points.sql", "name": "bronze__slash_points", "alias": "slash_points", "checksum": {"name": "sha256", "checksum": "b1cd5aaadecc6efa9a6e0b8ce1019cc0af29ba3672449b470471678c3f4cab5d"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_slash_points_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__slash_points.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.533241, "compiled_sql": "\n\nSELECT\n  node_address,\n  slash_points,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_slash_points_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.slash_points"}, "model.thorchain_models.bronze__new_node_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_new_node_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_new_node_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__new_node_events"], "unique_id": "model.thorchain_models.bronze__new_node_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__new_node_events.sql", "original_file_path": "models/bronze/bronze__new_node_events.sql", "name": "bronze__new_node_events", "alias": "new_node_events", "checksum": {"name": "sha256", "checksum": "069161f10aaa402b6ae469cfa38db27d8bdb474e4ef0f8a56228024dc3538463"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_new_node_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__new_node_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.5343208, "compiled_sql": "\n\nSELECT\n  node_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_new_node_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.new_node_events"}, "model.thorchain_models.bronze__rewards_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  bond_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_rewards_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_rewards_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__rewards_events"], "unique_id": "model.thorchain_models.bronze__rewards_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__rewards_events.sql", "original_file_path": "models/bronze/bronze__rewards_events.sql", "name": "bronze__rewards_events", "alias": "rewards_events", "checksum": {"name": "sha256", "checksum": "9af62740b4bfb1663d8bea2bf853a3077cf29f5d46ac996d8247a3c8b0d47fec"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_rewards_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__rewards_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.535431, "compiled_sql": "\n\nSELECT\n  bond_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_rewards_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.rewards_events"}, "model.thorchain_models.bronze__bond_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  COALESCE(\n    chain,\n    ''\n  ) AS chain,\n  COALESCE(\n    from_addr,\n    ''\n  ) AS from_addr,\n  COALESCE(\n    to_addr,\n    ''\n  ) AS to_addr,\n  COALESCE(\n    asset,\n    ''\n  ) AS asset,\n  asset_e8,\n  COALESCE(\n    memo,\n    ''\n  ) AS memo,\n  COALESCE(\n    bond_type,\n    ''\n  ) AS bond_type,\n  e8,\n  block_timestamp,\n  event_id,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_bond_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__bond_events"], "unique_id": "model.thorchain_models.bronze__bond_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__bond_events.sql", "original_file_path": "models/bronze/bronze__bond_events.sql", "name": "bronze__bond_events", "alias": "bond_events", "checksum": {"name": "sha256", "checksum": "ae1aa639ebc1610d077b767a5e049281144e8582e2d4e865a4281223a24340fd"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_bond_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__bond_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.536651, "compiled_sql": "\n\nSELECT\n  tx,\n  COALESCE(\n    chain,\n    ''\n  ) AS chain,\n  COALESCE(\n    from_addr,\n    ''\n  ) AS from_addr,\n  COALESCE(\n    to_addr,\n    ''\n  ) AS to_addr,\n  COALESCE(\n    asset,\n    ''\n  ) AS asset,\n  asset_e8,\n  COALESCE(\n    memo,\n    ''\n  ) AS memo,\n  COALESCE(\n    bond_type,\n    ''\n  ) AS bond_type,\n  e8,\n  block_timestamp,\n  event_id,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_bond_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.bond_events"}, "model.thorchain_models.bronze__unstake_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  emit_asset_e8,\n  emit_rune_e8,\n  memo,\n  pool,\n  stake_units,\n  basis_points,\n  asymmetry,\n  imp_loss_protection_e8,\n  _EMIT_ASSET_IN_RUNE_E8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_unstake_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__unstake_events"], "unique_id": "model.thorchain_models.bronze__unstake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__unstake_events.sql", "original_file_path": "models/bronze/bronze__unstake_events.sql", "name": "bronze__unstake_events", "alias": "unstake_events", "checksum": {"name": "sha256", "checksum": "7fccaa68a09f3e7c0babba3f6342972e73b95190635315f857304ac16e764f7c"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_unstake_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__unstake_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.537801, "compiled_sql": "\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  emit_asset_e8,\n  emit_rune_e8,\n  memo,\n  pool,\n  stake_units,\n  basis_points,\n  asymmetry,\n  imp_loss_protection_e8,\n  _EMIT_ASSET_IN_RUNE_E8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_unstake_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.unstake_events"}, "model.thorchain_models.bronze__pending_liquidity_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset_tx,\n  asset_chain,\n  asset_addr,\n  asset_e8,\n  rune_tx,\n  rune_addr,\n  rune_e8,\n  pending_type,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_pending_liquidity_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__pending_liquidity_events"], "unique_id": "model.thorchain_models.bronze__pending_liquidity_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__pending_liquidity_events.sql", "original_file_path": "models/bronze/bronze__pending_liquidity_events.sql", "name": "bronze__pending_liquidity_events", "alias": "pending_liquidity_events", "checksum": {"name": "sha256", "checksum": "7cda0126873f8ed14101475d70585a560c449cf45629317a78270f3429aa153b"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_pending_liquidity_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__pending_liquidity_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.539119, "compiled_sql": "\n\nSELECT\n  pool,\n  asset_tx,\n  asset_chain,\n  asset_addr,\n  asset_e8,\n  rune_tx,\n  rune_addr,\n  rune_e8,\n  pending_type,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_pending_liquidity_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.pending_liquidity_events"}, "model.thorchain_models.bronze__swap_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  from_asset,\n  from_e8,\n  to_asset,\n  to_e8,\n  memo,\n  pool,\n  to_e8_min,\n  swap_slip_bp,\n  liq_fee_e8,\n  liq_fee_in_rune_e8,\n  _DIRECTION,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_swap_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_swap_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__swap_events"], "unique_id": "model.thorchain_models.bronze__swap_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__swap_events.sql", "original_file_path": "models/bronze/bronze__swap_events.sql", "name": "bronze__swap_events", "alias": "swap_events", "checksum": {"name": "sha256", "checksum": "e3ee263b1b25df1997f331e2ac24e4b1a3541f1dc556422ed44b53f152f5c850"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_swap_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__swap_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.540332, "compiled_sql": "\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  from_asset,\n  from_e8,\n  to_asset,\n  to_e8,\n  memo,\n  pool,\n  to_e8_min,\n  swap_slip_bp,\n  liq_fee_e8,\n  liq_fee_in_rune_e8,\n  _DIRECTION,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_swap_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.swap_events"}, "model.thorchain_models.bronze__errata_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  in_tx,\n  asset,\n  asset_e8,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_errata_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__errata_events"], "unique_id": "model.thorchain_models.bronze__errata_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__errata_events.sql", "original_file_path": "models/bronze/bronze__errata_events.sql", "name": "bronze__errata_events", "alias": "errata_events", "checksum": {"name": "sha256", "checksum": "c5cd0c6c131885ebbe6e77e1e9fd309288226b95ae0e5ad98bbb709212d54f3f"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_errata_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__errata_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.541402, "compiled_sql": "\n\nSELECT\n  in_tx,\n  asset,\n  asset_e8,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_errata_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.errata_events"}, "model.thorchain_models.bronze__stake_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset_tx,\n  asset_chain,\n  asset_addr,\n  asset_e8,\n  stake_units,\n  rune_tx,\n  rune_addr,\n  rune_e8,\n  _ASSET_IN_RUNE_E8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_stake_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__stake_events"], "unique_id": "model.thorchain_models.bronze__stake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__stake_events.sql", "original_file_path": "models/bronze/bronze__stake_events.sql", "name": "bronze__stake_events", "alias": "stake_events", "checksum": {"name": "sha256", "checksum": "b20400a17cbaabcb2098278f97b2ce7c119ddc098bcadac76e8434f473008027"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_stake_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__stake_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.542422, "compiled_sql": "\n\nSELECT\n  pool,\n  asset_tx,\n  asset_chain,\n  asset_addr,\n  asset_e8,\n  stake_units,\n  rune_tx,\n  rune_addr,\n  rune_e8,\n  _ASSET_IN_RUNE_E8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_stake_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.stake_events"}, "model.thorchain_models.bronze__block_pool_depths": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  asset_e8,\n  rune_e8,\n  synth_e8,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_block_pool_depths'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__block_pool_depths"], "unique_id": "model.thorchain_models.bronze__block_pool_depths", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__block_pool_depths.sql", "original_file_path": "models/bronze/bronze__block_pool_depths.sql", "name": "bronze__block_pool_depths", "alias": "block_pool_depths", "checksum": {"name": "sha256", "checksum": "cca60f5e1f828bfe187767245dc9e47d2fb560174f4f9ebd25716d09ffc86ebf"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_block_pool_depths"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__block_pool_depths.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.54373, "compiled_sql": "\n\nSELECT\n  pool,\n  asset_e8,\n  rune_e8,\n  synth_e8,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_block_pool_depths", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.block_pool_depths"}, "model.thorchain_models.bronze__set_version_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  version,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_set_version_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_set_version_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__set_version_events"], "unique_id": "model.thorchain_models.bronze__set_version_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__set_version_events.sql", "original_file_path": "models/bronze/bronze__set_version_events.sql", "name": "bronze__set_version_events", "alias": "set_version_events", "checksum": {"name": "sha256", "checksum": "2aebd77bfd3e81cbab098c49fc0f47e7660f3ca017c6eca30488bdd980371918"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_set_version_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__set_version_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.544898, "compiled_sql": "\n\nSELECT\n  node_addr,\n  version,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_version_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.set_version_events"}, "model.thorchain_models.bronze__add_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  rune_e8,\n  pool,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_add_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_add_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__add_events"], "unique_id": "model.thorchain_models.bronze__add_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__add_events.sql", "original_file_path": "models/bronze/bronze__add_events.sql", "name": "bronze__add_events", "alias": "add_events", "checksum": {"name": "sha256", "checksum": "5de9f114de7a5f20ad8c8d643b6aaf19faf5d253208ffaa4485c7cd17b2a37da"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_add_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__add_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.54605, "compiled_sql": "\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  rune_e8,\n  pool,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_add_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.add_events"}, "model.thorchain_models.bronze__pool_balance_change_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  rune_amt,\n  rune_add,\n  asset_amt,\n  asset_add,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_pool_balance_change_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__pool_balance_change_events"], "unique_id": "model.thorchain_models.bronze__pool_balance_change_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__pool_balance_change_events.sql", "original_file_path": "models/bronze/bronze__pool_balance_change_events.sql", "name": "bronze__pool_balance_change_events", "alias": "pool_balance_change_events", "checksum": {"name": "sha256", "checksum": "95f8074d4c96ba5cdb54d1369e7e3deffa881a197bbeb45c103e28107e71d24e"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_pool_balance_change_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__pool_balance_change_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.547344, "compiled_sql": "\n\nSELECT\n  asset,\n  rune_amt,\n  rune_add,\n  asset_amt,\n  asset_add,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_pool_balance_change_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.pool_balance_change_events"}, "model.thorchain_models.bronze__block_log": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  height,\n  TIMESTAMP,\n  HASH,\n  agg_state,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_block_log'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__block_log"], "unique_id": "model.thorchain_models.bronze__block_log", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__block_log.sql", "original_file_path": "models/bronze/bronze__block_log.sql", "name": "bronze__block_log", "alias": "block_log", "checksum": {"name": "sha256", "checksum": "6dc47c858134fd60c03deffb9f538d89e6c9cf7ec93bb748365c2ee93331815e"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_block_log"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__block_log.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.548356, "compiled_sql": "\n\nSELECT\n  height,\n  TIMESTAMP,\n  HASH,\n  agg_state,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_block_log", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.block_log"}, "model.thorchain_models.bronze__transfer_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  from_addr,\n  to_addr,\n  asset,\n  amount_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_transfer_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__transfer_events"], "unique_id": "model.thorchain_models.bronze__transfer_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__transfer_events.sql", "original_file_path": "models/bronze/bronze__transfer_events.sql", "name": "bronze__transfer_events", "alias": "transfer_events", "checksum": {"name": "sha256", "checksum": "bbc2295c6537075608ffaaf39a3304f376787547ca53ea6615ba9c68e4ff7b3b"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_transfer_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__transfer_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.5493581, "compiled_sql": "\n\nSELECT\n  from_addr,\n  to_addr,\n  asset,\n  amount_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_transfer_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.transfer_events"}, "model.thorchain_models.bronze__switch_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  COALESCE(\n    tx,\n    ''\n  ) AS tx,\n  COALESCE(\n    from_addr,\n    ''\n  ) AS from_addr,\n  COALESCE(\n    to_addr,\n    ''\n  ) AS to_addr,\n  COALESCE(\n    burn_asset,\n    ''\n  ) AS burn_asset,\n  burn_e8,\n  mint_e8,\n  block_timestamp,\n  event_id,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_switch_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_switch_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__switch_events"], "unique_id": "model.thorchain_models.bronze__switch_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__switch_events.sql", "original_file_path": "models/bronze/bronze__switch_events.sql", "name": "bronze__switch_events", "alias": "switch_events", "checksum": {"name": "sha256", "checksum": "21714d99806b8f41aab509ce407b194a1ca7ca93986f66a09d3e742478178a05"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_switch_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__switch_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.5504792, "compiled_sql": "\n\nSELECT\n  COALESCE(\n    tx,\n    ''\n  ) AS tx,\n  COALESCE(\n    from_addr,\n    ''\n  ) AS from_addr,\n  COALESCE(\n    to_addr,\n    ''\n  ) AS to_addr,\n  COALESCE(\n    burn_asset,\n    ''\n  ) AS burn_asset,\n  burn_e8,\n  mint_e8,\n  block_timestamp,\n  event_id,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_switch_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.switch_events"}, "model.thorchain_models.bronze__asgard_fund_yggdrasil_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  asset,\n  asset_e8,\n  vault_key,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_asgard_fund_yggdrasil_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__asgard_fund_yggdrasil_events"], "unique_id": "model.thorchain_models.bronze__asgard_fund_yggdrasil_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__asgard_fund_yggdrasil_events.sql", "original_file_path": "models/bronze/bronze__asgard_fund_yggdrasil_events.sql", "name": "bronze__asgard_fund_yggdrasil_events", "alias": "asgard_fund_yggdrasil_events", "checksum": {"name": "sha256", "checksum": "777d94da680317324f31bf0d120ac699f51a7478fc705d30f977c81e9fd99ac3"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_asgard_fund_yggdrasil_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__asgard_fund_yggdrasil_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.551778, "compiled_sql": "\n\nSELECT\n  tx,\n  asset,\n  asset_e8,\n  vault_key,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_asgard_fund_yggdrasil_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.asgard_fund_yggdrasil_events"}, "model.thorchain_models.bronze__set_mimir_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_set_mimir_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_set_mimir_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__set_mimir_events"], "unique_id": "model.thorchain_models.bronze__set_mimir_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__set_mimir_events.sql", "original_file_path": "models/bronze/bronze__set_mimir_events.sql", "name": "bronze__set_mimir_events", "alias": "set_mimir_events", "checksum": {"name": "sha256", "checksum": "92d22505b6e891d6e6811dbe39b1eb1d198631beb2fde7f6f4d7c7cfb32f3ce1"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_set_mimir_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__set_mimir_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.552821, "compiled_sql": "\n\nSELECT\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_mimir_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.set_mimir_events"}, "model.thorchain_models.bronze__fee_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  asset,\n  asset_e8,\n  pool_deduct,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_fee_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__fee_events"], "unique_id": "model.thorchain_models.bronze__fee_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__fee_events.sql", "original_file_path": "models/bronze/bronze__fee_events.sql", "name": "bronze__fee_events", "alias": "fee_events", "checksum": {"name": "sha256", "checksum": "ba21087d96ce3f247144ea08dd37c0dcf74587cf88706bb9d7a91a5c36d68752"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_fee_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__fee_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.5539489, "compiled_sql": "\n\nSELECT\n  tx,\n  asset,\n  asset_e8,\n  pool_deduct,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_fee_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.fee_events"}, "model.thorchain_models.bronze__reserve_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  addr,\n  e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_reserve_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_reserve_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__reserve_events"], "unique_id": "model.thorchain_models.bronze__reserve_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__reserve_events.sql", "original_file_path": "models/bronze/bronze__reserve_events.sql", "name": "bronze__reserve_events", "alias": "reserve_events", "checksum": {"name": "sha256", "checksum": "39c380245b3f7d62002ced43ef56f066003c4f63e82d0d97aafe0332bc08d3d8"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_reserve_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__reserve_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.55525, "compiled_sql": "\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  addr,\n  e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_reserve_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.reserve_events"}, "model.thorchain_models.bronze__refund_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_refund_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_refund_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__refund_events"], "unique_id": "model.thorchain_models.bronze__refund_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__refund_events.sql", "original_file_path": "models/bronze/bronze__refund_events.sql", "name": "bronze__refund_events", "alias": "refund_events", "checksum": {"name": "sha256", "checksum": "671b0f35bb988e269d4da08692febda566387307140a4aa8c084c4a47bd6b3a6"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_refund_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__refund_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.556213, "compiled_sql": "\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_refund_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.refund_events"}, "model.thorchain_models.bronze__active_vault_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_active_vault_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_active_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__active_vault_events"], "unique_id": "model.thorchain_models.bronze__active_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__active_vault_events.sql", "original_file_path": "models/bronze/bronze__active_vault_events.sql", "name": "bronze__active_vault_events", "alias": "active_vault_events", "checksum": {"name": "sha256", "checksum": "a74c6d844bf4b7e0223d7785b9acfe2f1fb4189c1d22eb1f0d4912ccd1456596"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_active_vault_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__active_vault_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.557185, "compiled_sql": "\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_active_vault_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.active_vault_events"}, "model.thorchain_models.bronze__validator_request_leave_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  from_addr,\n  node_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_validator_request_leave_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__validator_request_leave_events"], "unique_id": "model.thorchain_models.bronze__validator_request_leave_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__validator_request_leave_events.sql", "original_file_path": "models/bronze/bronze__validator_request_leave_events.sql", "name": "bronze__validator_request_leave_events", "alias": "validator_request_leave_events", "checksum": {"name": "sha256", "checksum": "c605dd8ad5eec906190e7c1206fba7fdd4e8127537bc659f9018eb37b9102bcb"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_validator_request_leave_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__validator_request_leave_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.558183, "compiled_sql": "\n\nSELECT\n  tx,\n  from_addr,\n  node_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_validator_request_leave_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.validator_request_leave_events"}, "model.thorchain_models.bronze__rewards_event_entries": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_rewards_event_entries'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_rewards_event_entries"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__rewards_event_entries"], "unique_id": "model.thorchain_models.bronze__rewards_event_entries", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__rewards_event_entries.sql", "original_file_path": "models/bronze/bronze__rewards_event_entries.sql", "name": "bronze__rewards_event_entries", "alias": "rewards_event_entries", "checksum": {"name": "sha256", "checksum": "840ae2a624f44faa27fc4d4ad0df8e5ff822c6815df6d3a39d91cc17c8fffeaf"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_rewards_event_entries"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__rewards_event_entries.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.559524, "compiled_sql": "\n\nSELECT\n  pool,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_rewards_event_entries", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.rewards_event_entries"}, "model.thorchain_models.bronze__update_node_account_status_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  \"CURRENT\" AS current_flag,\n  former,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_update_node_account_status_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_update_node_account_status_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__update_node_account_status_events"], "unique_id": "model.thorchain_models.bronze__update_node_account_status_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__update_node_account_status_events.sql", "original_file_path": "models/bronze/bronze__update_node_account_status_events.sql", "name": "bronze__update_node_account_status_events", "alias": "update_node_account_status_events", "checksum": {"name": "sha256", "checksum": "5c66042bbc76b83bda21cb6cd9a9a09cea0e3d833ffea79cf9213fcf466104da"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_update_node_account_status_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__update_node_account_status_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.560701, "compiled_sql": "\n\nSELECT\n  node_addr,\n  \"CURRENT\" AS current_flag,\n  former,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_update_node_account_status_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.update_node_account_status_events"}, "model.thorchain_models.bronze__set_ip_address_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  ip_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_set_ip_address_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_set_ip_address_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__set_ip_address_events"], "unique_id": "model.thorchain_models.bronze__set_ip_address_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__set_ip_address_events.sql", "original_file_path": "models/bronze/bronze__set_ip_address_events.sql", "name": "bronze__set_ip_address_events", "alias": "set_ip_address_events", "checksum": {"name": "sha256", "checksum": "98e4b4e18f3df02c78b9187f7276f7c1566bcd2ecd55bc76185fd52a8308b585"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_set_ip_address_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__set_ip_address_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.561846, "compiled_sql": "\n\nSELECT\n  node_addr,\n  ip_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_ip_address_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.set_ip_address_events"}, "model.thorchain_models.bronze__outbound_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_outbound_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__outbound_events"], "unique_id": "model.thorchain_models.bronze__outbound_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__outbound_events.sql", "original_file_path": "models/bronze/bronze__outbound_events.sql", "name": "bronze__outbound_events", "alias": "outbound_events", "checksum": {"name": "sha256", "checksum": "d90c24f2c25155a7ab59d5a895e950eefc20f06f3fb199c47d87822054eef60b"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_outbound_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__outbound_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.563117, "compiled_sql": "\n\nSELECT\n  tx,\n  chain,\n  from_addr,\n  to_addr,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_outbound_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.outbound_events"}, "model.thorchain_models.bronze__constants": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  key,\n  VALUE,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_constants'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_constants"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__constants"], "unique_id": "model.thorchain_models.bronze__constants", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__constants.sql", "original_file_path": "models/bronze/bronze__constants.sql", "name": "bronze__constants", "alias": "constants", "checksum": {"name": "sha256", "checksum": "09fc32a72f214e6289c233eb19968440e091da6bed0efb7932874eceacb7cfa5"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_constants"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__constants.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.56413, "compiled_sql": "\n\nSELECT\n  key,\n  VALUE,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_constants", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.constants"}, "model.thorchain_models.bronze__thorname_change_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  NAME,\n  chain,\n  address,\n  registration_fee_e8,\n  fund_amount_e8,\n  expire,\n  owner,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_thorname_change_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_thorname_change_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__thorname_change_events"], "unique_id": "model.thorchain_models.bronze__thorname_change_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__thorname_change_events.sql", "original_file_path": "models/bronze/bronze__thorname_change_events.sql", "name": "bronze__thorname_change_events", "alias": "thorname_change_events", "checksum": {"name": "sha256", "checksum": "5d66be401f78ba68b6f4e331d58ccf1f6b35807aa1c2812179e836ad29057fb9"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_thorname_change_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__thorname_change_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.5652952, "compiled_sql": "\n\nSELECT\n  NAME,\n  chain,\n  address,\n  registration_fee_e8,\n  fund_amount_e8,\n  expire,\n  owner,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_thorname_change_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.thorname_change_events"}, "model.thorchain_models.bronze__pool_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  status,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_pool_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_pool_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__pool_events"], "unique_id": "model.thorchain_models.bronze__pool_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__pool_events.sql", "original_file_path": "models/bronze/bronze__pool_events.sql", "name": "bronze__pool_events", "alias": "pool_events", "checksum": {"name": "sha256", "checksum": "20c57663d19b759b939b9d5b307cc942b14da0c53ce5a165a93ca98ffa39cd89"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_pool_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__pool_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.566435, "compiled_sql": "\n\nSELECT\n  asset,\n  status,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_pool_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.pool_events"}, "model.thorchain_models.bronze__set_node_keys_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  {{ source(\n    'thorchain_midgard',\n    'midgard_set_node_keys_events'\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.thorchain_models.thorchain_midgard.midgard_set_node_keys_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "bronze", "fqn": ["thorchain_models", "bronze", "bronze__set_node_keys_events"], "unique_id": "model.thorchain_models.bronze__set_node_keys_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "bronze/bronze__set_node_keys_events.sql", "original_file_path": "models/bronze/bronze__set_node_keys_events.sql", "name": "bronze__set_node_keys_events", "alias": "set_node_keys_events", "checksum": {"name": "sha256", "checksum": "ffed987a81029bd8b47bd2792aa71e17cb949f2b700ac88c95f1faacc164b0ea"}, "tags": [], "refs": [], "sources": [["thorchain_midgard", "midgard_set_node_keys_events"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/bronze/bronze__set_node_keys_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.56772, "compiled_sql": "\n\nSELECT\n  node_addr,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT\nFROM\n  flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_node_keys_events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.bronze.set_node_keys_events"}, "model.thorchain_models.silver__daily_tvl": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"day\",\n  incremental_strategy = 'merge'\n) }}\n\nWITH max_daily_block AS (\n\n  SELECT\n    MAX(block_id) AS block_id,\n    DATE_TRUNC(\n      'day',\n      block_timestamp\n    ) AS DAY\n  FROM\n    {{ ref('silver__prices') }}\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY\n),\ndaily_rune_price AS (\n  SELECT\n    p.block_id,\n    DAY,\n    AVG(rune_usd) AS rune_usd\n  FROM\n    {{ ref('silver__prices') }}\n    p\n    JOIN max_daily_block mdb\n    ON p.block_id = mdb.block_id\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  p.block_id\n)\nSELECT\n  br.day,\n  total_value_pooled AS total_value_pooled,\n  total_value_pooled * rune_usd AS total_value_pooled_usd,\n  total_value_bonded AS total_value_bonded,\n  total_value_bonded * rune_usd AS total_value_bonded_usd,\n  total_value_locked AS total_value_locked,\n  total_value_locked * rune_usd AS total_value_locked_usd\nFROM\n  {{ ref('silver__total_value_locked') }}\n  br\n  JOIN daily_rune_price drp\n  ON br.day = drp.day", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "day", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__daily_tvl"], "unique_id": "model.thorchain_models.silver__daily_tvl", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__daily_tvl.sql", "original_file_path": "models/silver/silver__daily_tvl.sql", "name": "silver__daily_tvl", "alias": "daily_tvl", "checksum": {"name": "sha256", "checksum": "35338b9d8bfc943782a42267a6aaa03512fc732b8145e0d148c9a9be97989aa6"}, "tags": [], "refs": [["silver__prices"], ["silver__prices"], ["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_POOLED_USD": {"name": "TOTAL_VALUE_POOLED_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_BONDED_USD": {"name": "TOTAL_VALUE_BONDED_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED_USD": {"name": "TOTAL_VALUE_LOCKED_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__daily_tvl.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "day", "incremental_strategy": "merge"}, "created_at": 1665176151.6724658, "compiled_sql": "\n\nWITH max_daily_block AS (\n\n  SELECT\n    MAX(block_id) AS block_id,\n    DATE_TRUNC(\n      'day',\n      block_timestamp\n    ) AS DAY\n  FROM\n    THORCHAIN_DEV.silver.prices\n\n\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_tvl\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY\n),\ndaily_rune_price AS (\n  SELECT\n    p.block_id,\n    DAY,\n    AVG(rune_usd) AS rune_usd\n  FROM\n    THORCHAIN_DEV.silver.prices\n    p\n    JOIN max_daily_block mdb\n    ON p.block_id = mdb.block_id\n\n\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_tvl\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  p.block_id\n)\nSELECT\n  br.day,\n  total_value_pooled AS total_value_pooled,\n  total_value_pooled * rune_usd AS total_value_pooled_usd,\n  total_value_bonded AS total_value_bonded,\n  total_value_bonded * rune_usd AS total_value_bonded_usd,\n  total_value_locked AS total_value_locked,\n  total_value_locked * rune_usd AS total_value_locked_usd\nFROM\n  THORCHAIN_DEV.silver.total_value_locked\n  br\n  JOIN daily_rune_price drp\n  ON br.day = drp.day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.daily_tvl"}, "model.thorchain_models.silver__outbound_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__outbound_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, memo, in_tx, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__outbound_events"], "unique_id": "model.thorchain_models.silver__outbound_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__outbound_events.sql", "original_file_path": "models/silver/silver__outbound_events.sql", "name": "silver__outbound_events", "alias": "outbound_events", "checksum": {"name": "sha256", "checksum": "4cd1659596f9f4170c617652aae1cb865da748f7b2a582c0cf2c85067c9ea465"}, "tags": [], "refs": [["bronze__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IN_TX": {"name": "IN_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__outbound_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.661519, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.outbound_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, memo, in_tx, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.outbound_events"}, "model.thorchain_models.silver__daily_pool_stats": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge'\n) }}\n\nWITH daily_rune_price AS (\n\n  SELECT\n    pool_name,\n    block_timestamp :: DATE AS DAY,\n    AVG(rune_usd) AS rune_usd,\n    AVG(asset_usd) AS asset_usd\n  FROM\n    {{ ref('silver__prices') }}\n    p\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  pool_name,\n  DAY\n),\npool_fees AS (\n  SELECT\n    pbf.day,\n    pbf.pool_name,\n    rewards AS system_rewards,\n    rewards * rune_usd AS system_rewards_usd,\n    asset_liquidity_fees,\n    asset_liquidity_fees * asset_usd AS asset_liquidity_fees_usd,\n    rune_liquidity_fees,\n    rune_liquidity_fees * rune_usd AS rune_liquidity_fees_usd\n  FROM\n    {{ ref('silver__pool_block_fees') }}\n    pbf\n    JOIN daily_rune_price drp\n    ON pbf.day = drp.day\n    AND pbf.pool_name = drp.pool_name\n\n{% if is_incremental() %}\nWHERE\n  pbf.day >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  pbs.day,\n  pbs.asset AS pool_name,\n  COALESCE(\n    system_rewards,\n    0\n  ) AS system_rewards,\n  COALESCE(\n    system_rewards_usd,\n    0\n  ) AS system_rewards_usd,\n  COALESCE(asset_depth / pow(10, 8), 0) AS asset_liquidity,\n  COALESCE(\n    asset_price,\n    0\n  ) AS asset_price,\n  COALESCE(\n    asset_price_usd,\n    0\n  ) AS asset_price_usd,\n  COALESCE(rune_depth / pow(10, 8), 0) AS rune_liquidity,\n  COALESCE(asset_price_usd / NULLIF(rune_usd, 0), 0) AS rune_price,\n  COALESCE(\n    rune_usd,\n    0\n  ) AS rune_price_usd,\n  COALESCE(\n    add_liquidity_count,\n    0\n  ) AS add_liquidity_count,\n  COALESCE(add_asset_liquidity_volume / pow(10, 8), 0) AS add_asset_liquidity,\n  COALESCE(add_asset_liquidity_volume / pow(10, 8) * asset_usd, 0) AS add_asset_liquidity_usd,\n  COALESCE(add_rune_liquidity_volume / pow(10, 8), 0) AS add_rune_liquidity,\n  COALESCE(add_rune_liquidity_volume / pow(10, 8) * rune_usd, 0) AS add_rune_liquidity_usd,\n  COALESCE(\n    withdraw_count,\n    0\n  ) AS withdraw_count,\n  COALESCE(withdraw_asset_volume / pow(10, 8), 0) AS withdraw_asset_liquidity,\n  COALESCE(withdraw_asset_volume / pow(10, 8) * asset_usd, 0) AS withdraw_asset_liquidity_usd,\n  COALESCE(withdraw_rune_volume / pow(10, 8), 0) AS withdraw_rune_liquidity,\n  COALESCE(withdraw_rune_volume / pow(10, 8) * rune_usd, 0) AS withdraw_rune_liquidity_usd,\n  COALESCE(impermanent_loss_protection_paid / pow(10, 8), 0) AS il_protection_paid,\n  COALESCE(impermanent_loss_protection_paid / pow(10, 8) * rune_usd, 0) AS il_protection_paid_usd,\n  COALESCE(\n    average_slip,\n    0\n  ) AS average_slip,\n  COALESCE(\n    to_asset_average_slip,\n    0\n  ) AS to_asset_average_slip,\n  COALESCE(\n    to_rune_average_slip,\n    0\n  ) AS to_rune_average_slip,\n  COALESCE(\n    swap_count,\n    0\n  ) AS swap_count,\n  COALESCE(\n    to_asset_count,\n    0\n  ) AS to_asset_swap_count,\n  COALESCE(\n    to_rune_count,\n    0\n  ) AS to_rune_swap_count,\n  COALESCE(swap_volume / pow(10, 8), 0) AS swap_volume_rune,\n  COALESCE(swap_volume / pow(10, 8) * rune_usd, 0) AS swap_volume_rune_usd,\n  COALESCE(to_asset_volume / pow(10, 8), 0) AS to_asset_swap_volume,\n  COALESCE(to_rune_volume / pow(10, 8), 0) AS to_rune_swap_volume,\n  COALESCE(totalfees / pow(10, 8), 0) AS total_swap_fees_rune,\n  COALESCE(totalfees / pow(10, 8) * rune_usd, 0) AS total_swap_fees_usd,\n  COALESCE(to_asset_fees / pow(10, 8), 0) AS total_asset_swap_fees,\n  COALESCE(to_rune_fees / pow(10, 8), 0) AS total_asset_rune_fees,\n  COALESCE(\n    unique_member_count,\n    0\n  ) AS unique_member_count,\n  COALESCE(\n    unique_swapper_count,\n    0\n  ) AS unique_swapper_count,\n  COALESCE(\n    units,\n    0\n  ) AS liquidity_units,\n  concat_ws(\n    '-',\n    pbs.day,\n    pbs.asset\n  ) AS _unique_key\nFROM\n  {{ ref('silver__pool_block_statistics') }}\n  pbs\n  LEFT JOIN daily_rune_price drp\n  ON pbs.day = drp.day\n  AND pbs.asset = drp.pool_name\n  LEFT JOIN pool_fees pf\n  ON pbs.day = pf.day\n  AND pbs.asset = pf.pool_name\n\n{% if is_incremental() %}\nWHERE\n  pbs.day >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__daily_pool_stats"], "unique_id": "model.thorchain_models.silver__daily_pool_stats", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__daily_pool_stats.sql", "original_file_path": "models/silver/silver__daily_pool_stats.sql", "name": "silver__daily_pool_stats", "alias": "daily_pool_stats", "checksum": {"name": "sha256", "checksum": "d09178d12f45a57f40bba5f47a706e5c066b0ce977105e559f6977a84233ef57"}, "tags": [], "refs": [["silver__prices"], ["silver__pool_block_fees"], ["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEM_REWARDS": {"name": "SYSTEM_REWARDS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEM_REWARDS_USD": {"name": "SYSTEM_REWARDS_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_LIQUIDITY": {"name": "ASSET_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_LIQUIDITY": {"name": "RUNE_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_PRICE": {"name": "RUNE_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_PRICE_USD": {"name": "RUNE_PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY": {"name": "ADD_ASSET_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_USD": {"name": "ADD_ASSET_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_RUNE_LIQUIDITY_USD": {"name": "ADD_RUNE_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY": {"name": "WITHDRAW_ASSET_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY_USD": {"name": "WITHDRAW_ASSET_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_RUNE_LIQUIDITY": {"name": "WITHDRAW_RUNE_LIQUIDITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_RUNE_LIQUIDITY_USD": {"name": "WITHDRAW_RUNE_LIQUIDITY_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IL_PROTECTION_PAID": {"name": "IL_PROTECTION_PAID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IL_PROTECTION_PAID_USD": {"name": "IL_PROTECTION_PAID_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_AVERAGE_SLIP": {"name": "TO_RUNE_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_SWAP_COUNT": {"name": "TO_ASSET_SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_SWAP_COUNT": {"name": "TO_RUNE_SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_VOLUME_RUNE": {"name": "SWAP_VOLUME_RUNE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_VOLUME_RUNE_USD": {"name": "SWAP_VOLUME_RUNE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_SWAP_VOLUME": {"name": "TO_ASSET_SWAP_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_SWAP_VOLUME": {"name": "TO_RUNE_SWAP_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SWAP_FEES_RUNE": {"name": "TOTAL_SWAP_FEES_RUNE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SWAP_FEES_USD": {"name": "TOTAL_SWAP_FEES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_ASSET_SWAP_FEES": {"name": "TOTAL_ASSET_SWAP_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_ASSET_RUNE_FEES": {"name": "TOTAL_ASSET_RUNE_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_UNITS": {"name": "LIQUIDITY_UNITS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__daily_pool_stats.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge"}, "created_at": 1665176151.704072, "compiled_sql": "\n\nWITH daily_rune_price AS (\n\n  SELECT\n    pool_name,\n    block_timestamp :: DATE AS DAY,\n    AVG(rune_usd) AS rune_usd,\n    AVG(asset_usd) AS asset_usd\n  FROM\n    THORCHAIN_DEV.silver.prices\n    p\n\n\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_pool_stats\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  pool_name,\n  DAY\n),\npool_fees AS (\n  SELECT\n    pbf.day,\n    pbf.pool_name,\n    rewards AS system_rewards,\n    rewards * rune_usd AS system_rewards_usd,\n    asset_liquidity_fees,\n    asset_liquidity_fees * asset_usd AS asset_liquidity_fees_usd,\n    rune_liquidity_fees,\n    rune_liquidity_fees * rune_usd AS rune_liquidity_fees_usd\n  FROM\n    THORCHAIN_DEV.silver.pool_block_fees\n    pbf\n    JOIN daily_rune_price drp\n    ON pbf.day = drp.day\n    AND pbf.pool_name = drp.pool_name\n\n\nWHERE\n  pbf.day >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_pool_stats\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  pbs.day,\n  pbs.asset AS pool_name,\n  COALESCE(\n    system_rewards,\n    0\n  ) AS system_rewards,\n  COALESCE(\n    system_rewards_usd,\n    0\n  ) AS system_rewards_usd,\n  COALESCE(asset_depth / pow(10, 8), 0) AS asset_liquidity,\n  COALESCE(\n    asset_price,\n    0\n  ) AS asset_price,\n  COALESCE(\n    asset_price_usd,\n    0\n  ) AS asset_price_usd,\n  COALESCE(rune_depth / pow(10, 8), 0) AS rune_liquidity,\n  COALESCE(asset_price_usd / NULLIF(rune_usd, 0), 0) AS rune_price,\n  COALESCE(\n    rune_usd,\n    0\n  ) AS rune_price_usd,\n  COALESCE(\n    add_liquidity_count,\n    0\n  ) AS add_liquidity_count,\n  COALESCE(add_asset_liquidity_volume / pow(10, 8), 0) AS add_asset_liquidity,\n  COALESCE(add_asset_liquidity_volume / pow(10, 8) * asset_usd, 0) AS add_asset_liquidity_usd,\n  COALESCE(add_rune_liquidity_volume / pow(10, 8), 0) AS add_rune_liquidity,\n  COALESCE(add_rune_liquidity_volume / pow(10, 8) * rune_usd, 0) AS add_rune_liquidity_usd,\n  COALESCE(\n    withdraw_count,\n    0\n  ) AS withdraw_count,\n  COALESCE(withdraw_asset_volume / pow(10, 8), 0) AS withdraw_asset_liquidity,\n  COALESCE(withdraw_asset_volume / pow(10, 8) * asset_usd, 0) AS withdraw_asset_liquidity_usd,\n  COALESCE(withdraw_rune_volume / pow(10, 8), 0) AS withdraw_rune_liquidity,\n  COALESCE(withdraw_rune_volume / pow(10, 8) * rune_usd, 0) AS withdraw_rune_liquidity_usd,\n  COALESCE(impermanent_loss_protection_paid / pow(10, 8), 0) AS il_protection_paid,\n  COALESCE(impermanent_loss_protection_paid / pow(10, 8) * rune_usd, 0) AS il_protection_paid_usd,\n  COALESCE(\n    average_slip,\n    0\n  ) AS average_slip,\n  COALESCE(\n    to_asset_average_slip,\n    0\n  ) AS to_asset_average_slip,\n  COALESCE(\n    to_rune_average_slip,\n    0\n  ) AS to_rune_average_slip,\n  COALESCE(\n    swap_count,\n    0\n  ) AS swap_count,\n  COALESCE(\n    to_asset_count,\n    0\n  ) AS to_asset_swap_count,\n  COALESCE(\n    to_rune_count,\n    0\n  ) AS to_rune_swap_count,\n  COALESCE(swap_volume / pow(10, 8), 0) AS swap_volume_rune,\n  COALESCE(swap_volume / pow(10, 8) * rune_usd, 0) AS swap_volume_rune_usd,\n  COALESCE(to_asset_volume / pow(10, 8), 0) AS to_asset_swap_volume,\n  COALESCE(to_rune_volume / pow(10, 8), 0) AS to_rune_swap_volume,\n  COALESCE(totalfees / pow(10, 8), 0) AS total_swap_fees_rune,\n  COALESCE(totalfees / pow(10, 8) * rune_usd, 0) AS total_swap_fees_usd,\n  COALESCE(to_asset_fees / pow(10, 8), 0) AS total_asset_swap_fees,\n  COALESCE(to_rune_fees / pow(10, 8), 0) AS total_asset_rune_fees,\n  COALESCE(\n    unique_member_count,\n    0\n  ) AS unique_member_count,\n  COALESCE(\n    unique_swapper_count,\n    0\n  ) AS unique_swapper_count,\n  COALESCE(\n    units,\n    0\n  ) AS liquidity_units,\n  concat_ws(\n    '-',\n    pbs.day,\n    pbs.asset\n  ) AS _unique_key\nFROM\n  THORCHAIN_DEV.silver.pool_block_statistics\n  pbs\n  LEFT JOIN daily_rune_price drp\n  ON pbs.day = drp.day\n  AND pbs.asset = drp.pool_name\n  LEFT JOIN pool_fees pf\n  ON pbs.day = pf.day\n  AND pbs.asset = pf.pool_name\n\n\nWHERE\n  pbs.day >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_pool_stats\n  ) - INTERVAL '48 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.daily_pool_stats"}, "model.thorchain_models.silver__daily_earnings": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'day',\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH max_daily_block AS (\n\n  SELECT\n    MAX(\n      block_id\n    ) AS block_id,\n    DATE_TRUNC(\n      'day',\n      block_timestamp\n    ) AS DAY\n  FROM\n    {{ ref('silver__prices') }} A\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY\n),\ndaily_rune_price AS (\n  SELECT\n    p.block_id,\n    DAY,\n    AVG(rune_usd) AS rune_usd\n  FROM\n    {{ ref('silver__prices') }}\n    p\n    JOIN max_daily_block mdb\n    ON p.block_id = mdb.block_id\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  p.block_id\n)\nSELECT\n  br.day,\n  COALESCE(\n    liquidity_fee,\n    0\n  ) AS liquidity_fees,\n  COALESCE(\n    liquidity_fee * rune_usd,\n    0\n  ) AS liquidity_fees_usd,\n  block_rewards AS block_rewards,\n  block_rewards * rune_usd AS block_rewards_usd,\n  COALESCE(\n    earnings,\n    0\n  ) AS total_earnings,\n  COALESCE(\n    earnings * rune_usd,\n    0\n  ) AS total_earnings_usd,\n  bonding_earnings AS earnings_to_nodes,\n  bonding_earnings * rune_usd AS earnings_to_nodes_usd,\n  COALESCE(\n    liquidity_earnings,\n    0\n  ) AS earnings_to_pools,\n  COALESCE(\n    liquidity_earnings * rune_usd,\n    0\n  ) AS earnings_to_pools_usd,\n  avg_node_count,\n  br._inserted_timestamp\nFROM\n  {{ ref('silver__block_rewards') }}\n  br\n  JOIN daily_rune_price drp\n  ON br.day = drp.day\n\n{% if is_incremental() %}\nWHERE\n  br.day >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "day", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__daily_earnings"], "unique_id": "model.thorchain_models.silver__daily_earnings", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__daily_earnings.sql", "original_file_path": "models/silver/silver__daily_earnings.sql", "name": "silver__daily_earnings", "alias": "daily_earnings", "checksum": {"name": "sha256", "checksum": "a2ecf96f0b0d9a2fb7174c2c8e8cdef51650d909580f6bdff1d43fd55e4ba163"}, "tags": [], "refs": [["silver__prices"], ["silver__prices"], ["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_FEES": {"name": "LIQUIDITY_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_FEES_USD": {"name": "LIQUIDITY_FEES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_REWARDS_USD": {"name": "BLOCK_REWARDS_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_EARNINGS": {"name": "TOTAL_EARNINGS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_EARNINGS_USD": {"name": "TOTAL_EARNINGS_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_NODES": {"name": "EARNINGS_TO_NODES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_NODES_USD": {"name": "EARNINGS_TO_NODES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_POOLS": {"name": "EARNINGS_TO_POOLS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_POOLS_USD": {"name": "EARNINGS_TO_POOLS_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__daily_earnings.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "day", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.684793, "compiled_sql": "\n\nWITH max_daily_block AS (\n\n  SELECT\n    MAX(\n      block_id\n    ) AS block_id,\n    DATE_TRUNC(\n      'day',\n      block_timestamp\n    ) AS DAY\n  FROM\n    THORCHAIN_DEV.silver.prices A\n\n\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_earnings\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY\n),\ndaily_rune_price AS (\n  SELECT\n    p.block_id,\n    DAY,\n    AVG(rune_usd) AS rune_usd\n  FROM\n    THORCHAIN_DEV.silver.prices\n    p\n    JOIN max_daily_block mdb\n    ON p.block_id = mdb.block_id\n\n\nWHERE\n  block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_earnings\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  p.block_id\n)\nSELECT\n  br.day,\n  COALESCE(\n    liquidity_fee,\n    0\n  ) AS liquidity_fees,\n  COALESCE(\n    liquidity_fee * rune_usd,\n    0\n  ) AS liquidity_fees_usd,\n  block_rewards AS block_rewards,\n  block_rewards * rune_usd AS block_rewards_usd,\n  COALESCE(\n    earnings,\n    0\n  ) AS total_earnings,\n  COALESCE(\n    earnings * rune_usd,\n    0\n  ) AS total_earnings_usd,\n  bonding_earnings AS earnings_to_nodes,\n  bonding_earnings * rune_usd AS earnings_to_nodes_usd,\n  COALESCE(\n    liquidity_earnings,\n    0\n  ) AS earnings_to_pools,\n  COALESCE(\n    liquidity_earnings * rune_usd,\n    0\n  ) AS earnings_to_pools_usd,\n  avg_node_count,\n  br._inserted_timestamp\nFROM\n  THORCHAIN_DEV.silver.block_rewards\n  br\n  JOIN daily_rune_price drp\n  ON br.day = drp.day\n\n\nWHERE\n  br.day >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.daily_earnings\n  ) - INTERVAL '48 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.daily_earnings"}, "model.thorchain_models.silver__inactive_vault_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr AS add_asgard_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__inactive_vault_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, add_asgard_addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__inactive_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__inactive_vault_events"], "unique_id": "model.thorchain_models.silver__inactive_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__inactive_vault_events.sql", "original_file_path": "models/silver/silver__inactive_vault_events.sql", "name": "silver__inactive_vault_events", "alias": "inactive_vault_events", "checksum": {"name": "sha256", "checksum": "dfb82eb4f4ef3048c4e662d6506b4ce76c946991eb781397501f034446497093"}, "tags": [], "refs": [["bronze__inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__inactive_vault_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.581645, "compiled_sql": "\n\nSELECT\n  add_asgard_addr AS add_asgard_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.inactive_vault_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, add_asgard_addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.inactive_vault_events"}, "model.thorchain_models.silver__asgard_fund_yggdrasil_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  asset,\n  asset_e8,\n  vault_key,\n  event_id,\n  block_timestamp,\n  event_id,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__asgard_fund_yggdrasil_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, asset, asset_e8, vault_key, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__asgard_fund_yggdrasil_events"], "unique_id": "model.thorchain_models.silver__asgard_fund_yggdrasil_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__asgard_fund_yggdrasil_events.sql", "original_file_path": "models/silver/silver__asgard_fund_yggdrasil_events.sql", "name": "silver__asgard_fund_yggdrasil_events", "alias": "asgard_fund_yggdrasil_events", "checksum": {"name": "sha256", "checksum": "43c34eac905a0bee17960563ee70888d17101cf0c1a5c85919f1b5179341cbc4"}, "tags": [], "refs": [["bronze__asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VAULT_KEY": {"name": "VAULT_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__asgard_fund_yggdrasil_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__asgard_fund_yggdrasil_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.739736, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  asset,\n  asset_e8,\n  vault_key,\n  event_id,\n  block_timestamp,\n  event_id,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.asgard_fund_yggdrasil_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, asset, asset_e8, vault_key, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events"}, "model.thorchain_models.silver__transfers": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    {{ ref('silver__prices') }}\n  GROUP BY\n    block_id\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  from_address,\n  to_address,\n  asset,\n  COALESCE(amount_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(amount_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  event_id,\n  concat_ws(\n    b.height :: STRING,\n    from_address :: STRING,\n    to_address :: STRING,\n    asset :: STRING,\n    event_id :: STRING\n  ) _unique_key,\n  se._inserted_timestamp\nFROM\n  {{ ref('silver__transfer_events') }}\n  se\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n{% if is_incremental() %}\nWHERE\n  se._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__transfer_events", "model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__transfers"], "unique_id": "model.thorchain_models.silver__transfers", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "a3cef248a9e20efa0b0aa0724aefdf207dff7c206dd2c89555b1b993b9f253df"}, "tags": [], "refs": [["silver__prices"], ["silver__transfer_events"], ["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.747839, "compiled_sql": "\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    THORCHAIN_DEV.silver.prices\n  GROUP BY\n    block_id\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  from_address,\n  to_address,\n  asset,\n  COALESCE(amount_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(amount_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  event_id,\n  concat_ws(\n    b.height :: STRING,\n    from_address :: STRING,\n    to_address :: STRING,\n    asset :: STRING,\n    event_id :: STRING\n  ) _unique_key,\n  se._inserted_timestamp\nFROM\n  THORCHAIN_DEV.silver.transfer_events\n  se\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n\nWHERE\n  se._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      THORCHAIN_DEV.silver.transfers\n  ) - INTERVAL '4 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.transfers"}, "model.thorchain_models.silver__block_pool_depths": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset_e8,\n  rune_e8,\n  synth_e8,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__block_pool_depths') }}\n  qualify(ROW_NUMBER() over(PARTITION BY pool, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__block_pool_depths"], "unique_id": "model.thorchain_models.silver__block_pool_depths", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__block_pool_depths.sql", "original_file_path": "models/silver/silver__block_pool_depths.sql", "name": "silver__block_pool_depths", "alias": "block_pool_depths", "checksum": {"name": "sha256", "checksum": "2aff80ceafc164618d9ae3478cfa841cb24342ed0a046257a3a56e57b6afea21"}, "tags": [], "refs": [["bronze__block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYNTH_E8": {"name": "SYNTH_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__block_pool_depths.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_pool_depths.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.76426, "compiled_sql": "\n\nSELECT\n  pool AS pool_name,\n  asset_e8,\n  rune_e8,\n  synth_e8,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.block_pool_depths\n  qualify(ROW_NUMBER() over(PARTITION BY pool, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.block_pool_depths"}, "model.thorchain_models.silver__set_mimir_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_mimir_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, key, block_timestamp\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__set_mimir_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__set_mimir_events"], "unique_id": "model.thorchain_models.silver__set_mimir_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__set_mimir_events.sql", "original_file_path": "models/silver/silver__set_mimir_events.sql", "name": "silver__set_mimir_events", "alias": "set_mimir_events", "checksum": {"name": "sha256", "checksum": "4e7bcd1f5472279f1d031dc97bb2568f74e9f0c015afac8406cfcb303ff48104"}, "tags": [], "refs": [["bronze__set_mimir_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__set_mimir_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.589258, "compiled_sql": "\n\nSELECT\n  key,\n  VALUE,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.set_mimir_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, key, block_timestamp\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.set_mimir_events"}, "model.thorchain_models.silver__pool_block_statistics": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['day']\n) }}\n\nWITH pool_depth AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    rune_e8 AS rune_depth,\n    asset_e8 AS asset_depth,\n    synth_e8 AS synth_depth,\n    rune_e8 / asset_e8 AS asset_price\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        b.height AS block_id,\n        pool_name,\n        rune_e8,\n        synth_e8,\n        asset_e8,\n        MAX(\n          b.height\n        ) over (PARTITION BY pool_name, DATE(b.block_timestamp)) AS max_block_id\n      FROM\n        {{ ref(\"silver__block_pool_depths\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n      WHERE\n        asset_e8 > 0\n\n{% if is_incremental() %}\nAND b.block_timestamp :: DATE >= (\n  SELECT\n    MAX(\n      DAY\n    )\n  FROM\n    {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\n)\nWHERE\n  block_id = max_block_id\n),\npool_status AS (\n  SELECT\n    DAY,\n    pool_name,\n    status\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        asset AS pool_name,\n        status,\n        ROW_NUMBER() over (PARTITION BY pool_name, DATE(b.block_timestamp)\n      ORDER BY\n        b.block_timestamp DESC, status) AS rn\n      FROM\n        {{ ref(\"silver__pool_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nWHERE\n  rn = 1\n),\nadd_liquidity_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(*) AS add_liquidity_count,\n    SUM(rune_e8) AS add_rune_liquidity_volume,\n    SUM(asset_e8) AS add_asset_liquidity_volume,\n    SUM(stake_units) AS added_stake\n  FROM\n    {{ ref(\"silver__stake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\nwithdraw_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(*) AS withdraw_count,\n    SUM(emit_rune_e8) AS withdraw_rune_volume,\n    SUM(emit_asset_e8) AS withdraw_asset_volume,\n    SUM(stake_units) AS withdrawn_stake,\n    SUM(imp_loss_protection_e8) AS impermanent_loss_protection_paid\n  FROM\n    {{ ref(\"silver__unstake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\nswap_total_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(volume) AS swap_volume\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN to_e8\n          ELSE from_e8\n        END AS volume\n      FROM\n        {{ ref(\"silver__swap_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nGROUP BY\n  DAY,\n  pool_name\n),\nswap_to_asset_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(liq_fee_in_rune_e8) AS to_asset_fees,\n    SUM(from_e8) AS to_asset_volume,\n    COUNT(*) AS to_asset_count,\n    AVG(swap_slip_bp) AS to_asset_average_slip\n  FROM(\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 'to_rune'\n          ELSE 'to_asset'\n        END AS to_tune_asset,\n        liq_fee_in_rune_e8,\n        to_e8,\n        from_e8,\n        swap_slip_bp,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref(\"silver__swap_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nGROUP BY\n  to_tune_asset,\n  pool_name,\n  DAY\nHAVING\n  to_tune_asset = 'to_asset'\n),\nswap_to_rune_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(liq_fee_in_rune_e8) AS to_rune_fees,\n    SUM(to_e8) AS to_rune_volume,\n    COUNT(*) AS to_rune_count,\n    AVG(swap_slip_bp) AS to_rune_average_slip\n  FROM(\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 'to_rune'\n          ELSE 'to_asset'\n        END AS to_tune_asset,\n        liq_fee_in_rune_e8,\n        to_e8,\n        from_e8,\n        swap_slip_bp,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref(\"silver__swap_events\") }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nGROUP BY\n  to_tune_asset,\n  pool_name,\n  DAY\nHAVING\n  to_tune_asset = 'to_rune'\n),\naverage_slip_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    AVG(swap_slip_bp) AS average_slip\n  FROM\n    {{ ref(\"silver__swap_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  pool_name,\n  DAY\n),\nunique_swapper_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(\n      DISTINCT from_address\n    ) AS unique_swapper_count\n  FROM\n    {{ ref(\"silver__swap_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  pool_name,\n  DAY\n),\nstake_amount AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(stake_units) AS units\n  FROM\n    {{ ref(\"silver__stake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  pool_name,\n  DAY\n),\nunstake_umc AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    from_address AS address,\n    pool_name,\n    SUM(stake_units) AS unstake_liquidity_units\n  FROM\n    {{ ref(\"silver__unstake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  from_address,\n  pool_name,\n  DAY\n),\nstake_umc AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    rune_address AS address,\n    pool_name,\n    SUM(stake_units) AS liquidity_units\n  FROM\n    {{ ref(\"silver__stake_events\") }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  WHERE\n    rune_address IS NOT NULL\n\n{% if is_incremental() %}\nAND b.block_timestamp :: DATE >= (\n  SELECT\n    MAX(\n      DAY\n    )\n  FROM\n    {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  rune_address,\n  pool_name,\n  DAY\nUNION ALL\nSELECT\n  DATE(\n    b.block_timestamp\n  ) AS DAY,\n  asset_address AS address,\n  pool_name,\n  SUM(stake_units) AS liquidity_units\nFROM\n  {{ ref(\"silver__stake_events\") }} A\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON A.block_timestamp = b.timestamp\nWHERE\n  asset_address IS NOT NULL\n  AND rune_address IS NULL\n\n{% if is_incremental() %}\nAND b.block_timestamp :: DATE >= (\n  SELECT\n    MAX(\n      DAY\n    )\n  FROM\n    {{ this }}\n) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  asset_address,\n  pool_name,\n  DAY\n),\nunique_member_count AS (\n  SELECT\n    DAY,\n    pool_name,\n    COUNT(\n      DISTINCT address\n    ) AS unique_member_count\n  FROM\n    (\n      SELECT\n        stake_umc.day,\n        stake_umc.pool_name,\n        stake_umc.address,\n        stake_umc.liquidity_units,\n        CASE\n          WHEN unstake_umc.unstake_liquidity_units IS NOT NULL THEN unstake_umc.unstake_liquidity_units\n          ELSE 0\n        END AS unstake_liquidity_units\n      FROM\n        stake_umc\n        LEFT JOIN unstake_umc\n        ON stake_umc.address = unstake_umc.address\n        AND stake_umc.pool_name = unstake_umc.pool_name\n    )\n  WHERE\n    liquidity_units - unstake_liquidity_units > 0\n  GROUP BY\n    pool_name,\n    DAY\n),\nasset_price_usd_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    asset_usd AS asset_price_usd\n  FROM\n    (\n      SELECT\n        DATE(block_timestamp) AS DAY,\n        block_id,\n        MAX(block_id) over (PARTITION BY pool_name, DATE(block_timestamp)) AS max_block_id,\n        pool_name,\n        asset_usd\n      FROM\n        {{ ref(\"silver__prices\") }}\n    )\n  WHERE\n    block_id = max_block_id\n),\njoined AS (\n  SELECT\n    pool_depth.day AS DAY,\n    COALESCE(\n      add_asset_liquidity_volume,\n      0\n    ) AS add_asset_liquidity_volume,\n    COALESCE(\n      add_liquidity_count,\n      0\n    ) AS add_liquidity_count,\n    COALESCE(\n      (\n        add_asset_liquidity_volume + add_rune_liquidity_volume\n      ),\n      0\n    ) AS add_liquidity_volume,\n    COALESCE(\n      add_rune_liquidity_volume,\n      0\n    ) AS add_rune_liquidity_volume,\n    pool_depth.pool_name AS asset,\n    asset_depth,\n    COALESCE(\n      asset_price,\n      0\n    ) AS asset_price,\n    COALESCE(\n      asset_price_usd,\n      0\n    ) AS asset_price_usd,\n    COALESCE(\n      average_slip,\n      0\n    ) AS average_slip,\n    COALESCE(\n      impermanent_loss_protection_paid,\n      0\n    ) AS impermanent_loss_protection_paid,\n    COALESCE(\n      rune_depth,\n      0\n    ) AS rune_depth,\n    COALESCE(\n      synth_depth,\n      0\n    ) AS synth_depth,\n    COALESCE(\n      status,\n      'no status'\n    ) AS status,\n    COALESCE((to_rune_count + to_asset_count), 0) AS swap_count,\n    COALESCE(\n      swap_volume,\n      0\n    ) AS swap_volume,\n    COALESCE(\n      to_asset_average_slip,\n      0\n    ) AS to_asset_average_slip,\n    COALESCE(\n      to_asset_count,\n      0\n    ) AS to_asset_count,\n    COALESCE(\n      to_asset_fees,\n      0\n    ) AS to_asset_fees,\n    COALESCE(\n      to_asset_volume,\n      0\n    ) AS to_asset_volume,\n    COALESCE(\n      to_rune_average_slip,\n      0\n    ) AS to_rune_average_slip,\n    COALESCE(\n      to_rune_count,\n      0\n    ) AS to_rune_count,\n    COALESCE(\n      to_rune_fees,\n      0\n    ) AS to_rune_fees,\n    COALESCE(\n      to_rune_volume,\n      0\n    ) AS to_rune_volume,\n    COALESCE((to_rune_fees + to_asset_fees), 0) AS totalFees,\n    COALESCE(\n      unique_member_count,\n      0\n    ) AS unique_member_count,\n    COALESCE(\n      unique_swapper_count,\n      0\n    ) AS unique_swapper_count,\n    COALESCE(\n      units,\n      0\n    ) AS units,\n    COALESCE(\n      withdraw_asset_volume,\n      0\n    ) AS withdraw_asset_volume,\n    COALESCE(\n      withdraw_count,\n      0\n    ) AS withdraw_count,\n    COALESCE(\n      withdraw_rune_volume,\n      0\n    ) AS withdraw_rune_volume,\n    COALESCE((withdraw_rune_volume + withdraw_asset_volume), 0) AS withdraw_volume,\n    SUM(COALESCE(added_stake, 0) - COALESCE(withdrawn_stake, 0)) over (\n      PARTITION BY pool_depth.pool_name\n      ORDER BY\n        pool_depth.day ASC\n    ) AS total_stake,\n    asset_depth * COALESCE(\n      rune_depth,\n      0\n    ) AS depth_product,\n    total_stake * synth_depth / ((asset_depth * 2) - synth_depth) AS synth_units,\n    CASE\n      WHEN total_stake = 0 THEN 0\n      ELSE SQRT(depth_product) / (\n        total_stake + synth_units\n      )\n    END AS liquidity_unit_value_index\n  FROM\n    pool_depth\n    LEFT JOIN pool_status\n    ON pool_depth.pool_name = pool_status.pool_name\n    AND pool_depth.day = pool_status.day\n    LEFT JOIN add_liquidity_tbl\n    ON pool_depth.pool_name = add_liquidity_tbl.pool_name\n    AND pool_depth.day = add_liquidity_tbl.day\n    LEFT JOIN withdraw_tbl\n    ON pool_depth.pool_name = withdraw_tbl.pool_name\n    AND pool_depth.day = withdraw_tbl.day\n    LEFT JOIN swap_total_tbl\n    ON pool_depth.pool_name = swap_total_tbl.pool_name\n    AND pool_depth.day = swap_total_tbl.day\n    LEFT JOIN swap_to_asset_tbl\n    ON pool_depth.pool_name = swap_to_asset_tbl.pool_name\n    AND pool_depth.day = swap_to_asset_tbl.day\n    LEFT JOIN swap_to_rune_tbl\n    ON pool_depth.pool_name = swap_to_rune_tbl.pool_name\n    AND pool_depth.day = swap_to_rune_tbl.day\n    LEFT JOIN unique_swapper_tbl\n    ON pool_depth.pool_name = unique_swapper_tbl.pool_name\n    AND pool_depth.day = unique_swapper_tbl.day\n    LEFT JOIN stake_amount\n    ON pool_depth.pool_name = stake_amount.pool_name\n    AND pool_depth.day = stake_amount.day\n    LEFT JOIN average_slip_tbl\n    ON pool_depth.pool_name = average_slip_tbl.pool_name\n    AND pool_depth.day = average_slip_tbl.day\n    LEFT JOIN unique_member_count\n    ON pool_depth.pool_name = unique_member_count.pool_name\n    AND pool_depth.day = unique_member_count.day\n    LEFT JOIN asset_price_usd_tbl\n    ON pool_depth.pool_name = asset_price_usd_tbl.pool_name\n    AND pool_depth.day = asset_price_usd_tbl.day\n)\nSELECT\n  DISTINCT DAY,\n  add_asset_liquidity_volume,\n  add_liquidity_count,\n  add_liquidity_volume,\n  add_rune_liquidity_volume,\n  asset,\n  asset_depth,\n  asset_price,\n  asset_price_usd,\n  average_slip,\n  impermanent_loss_protection_paid,\n  rune_depth,\n  status,\n  swap_count,\n  swap_volume,\n  to_asset_average_slip,\n  to_asset_count,\n  to_asset_fees,\n  to_asset_volume,\n  to_rune_average_slip,\n  to_rune_count,\n  to_rune_fees,\n  to_rune_volume,\n  totalFees,\n  unique_member_count,\n  unique_swapper_count,\n  units,\n  withdraw_asset_volume,\n  withdraw_count,\n  withdraw_rune_volume,\n  withdraw_volume,\n  total_stake,\n  depth_product,\n  liquidity_unit_value_index,\n  LAG(\n    liquidity_unit_value_index,\n    1\n  ) over (\n    PARTITION BY asset\n    ORDER BY\n      DAY ASC\n  ) AS prev_liquidity_unit_value_index,\n  concat_ws(\n    '-',\n    DAY,\n    asset\n  ) AS _unique_key\nFROM\n  joined", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__pool_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__unstake_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__unstake_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["day"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__pool_block_statistics"], "unique_id": "model.thorchain_models.silver__pool_block_statistics", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__pool_block_statistics.sql", "original_file_path": "models/silver/silver__pool_block_statistics.sql", "name": "silver__pool_block_statistics", "alias": "pool_block_statistics", "checksum": {"name": "sha256", "checksum": "65a613b089441daeb89676d74ead1a6cc360dd77ef8dd80e0f7e93ded4a0fc57"}, "tags": [], "refs": [["silver__block_pool_depths"], ["silver__block_log"], ["silver__pool_events"], ["silver__block_log"], ["silver__stake_events"], ["silver__block_log"], ["silver__unstake_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__stake_events"], ["silver__block_log"], ["silver__unstake_events"], ["silver__block_log"], ["silver__stake_events"], ["silver__block_log"], ["silver__stake_events"], ["silver__block_log"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_VOLUME": {"name": "ADD_ASSET_LIQUIDITY_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_LIQUIDITY_VOLUME": {"name": "ADD_LIQUIDITY_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_RUNE_LIQUIDITY_VOLUME": {"name": "ADD_RUNE_LIQUIDITY_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_DEPTH": {"name": "ASSET_DEPTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMPERMANENT_LOSS_PROTECTION_PAID": {"name": "IMPERMANENT_LOSS_PROTECTION_PAID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_DEPTH": {"name": "RUNE_DEPTH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_VOLUME": {"name": "SWAP_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_COUNT": {"name": "TO_ASSET_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_FEES": {"name": "TO_ASSET_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_VOLUME": {"name": "TO_ASSET_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_AVERAGE_SLIP": {"name": "TO_RUNE_AVERAGE_SLIP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_COUNT": {"name": "TO_RUNE_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_FEES": {"name": "TO_RUNE_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_VOLUME": {"name": "TO_RUNE_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTALFEES": {"name": "TOTALFEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNITS": {"name": "UNITS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_ASSET_VOLUME": {"name": "WITHDRAW_ASSET_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_RUNE_VOLUME": {"name": "WITHDRAW_RUNE_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_VOLUME": {"name": "WITHDRAW_VOLUME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__pool_block_statistics.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["day"]}, "created_at": 1665176151.775221, "compiled_sql": "\n\nWITH pool_depth AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    rune_e8 AS rune_depth,\n    asset_e8 AS asset_depth,\n    synth_e8 AS synth_depth,\n    rune_e8 / asset_e8 AS asset_price\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        b.height AS block_id,\n        pool_name,\n        rune_e8,\n        synth_e8,\n        asset_e8,\n        MAX(\n          b.height\n        ) over (PARTITION BY pool_name, DATE(b.block_timestamp)) AS max_block_id\n      FROM\n        THORCHAIN_DEV.silver.block_pool_depths A\n        JOIN THORCHAIN_DEV.silver.block_log\n        b\n        ON A.block_timestamp = b.timestamp\n      WHERE\n        asset_e8 > 0\n\n\nAND b.block_timestamp :: DATE >= (\n  SELECT\n    MAX(\n      DAY\n    )\n  FROM\n    THORCHAIN_DEV.silver.pool_block_statistics\n) - INTERVAL '48 HOURS'\n\n)\nWHERE\n  block_id = max_block_id\n),\npool_status AS (\n  SELECT\n    DAY,\n    pool_name,\n    status\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        asset AS pool_name,\n        status,\n        ROW_NUMBER() over (PARTITION BY pool_name, DATE(b.block_timestamp)\n      ORDER BY\n        b.block_timestamp DESC, status) AS rn\n      FROM\n        THORCHAIN_DEV.silver.pool_events A\n        JOIN THORCHAIN_DEV.silver.block_log\n        b\n        ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\n)\nWHERE\n  rn = 1\n),\nadd_liquidity_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(*) AS add_liquidity_count,\n    SUM(rune_e8) AS add_rune_liquidity_volume,\n    SUM(asset_e8) AS add_asset_liquidity_volume,\n    SUM(stake_units) AS added_stake\n  FROM\n    THORCHAIN_DEV.silver.stake_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  pool_name\n),\nwithdraw_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(*) AS withdraw_count,\n    SUM(emit_rune_e8) AS withdraw_rune_volume,\n    SUM(emit_asset_e8) AS withdraw_asset_volume,\n    SUM(stake_units) AS withdrawn_stake,\n    SUM(imp_loss_protection_e8) AS impermanent_loss_protection_paid\n  FROM\n    THORCHAIN_DEV.silver.unstake_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  pool_name\n),\nswap_total_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(volume) AS swap_volume\n  FROM\n    (\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN to_e8\n          ELSE from_e8\n        END AS volume\n      FROM\n        THORCHAIN_DEV.silver.swap_events A\n        JOIN THORCHAIN_DEV.silver.block_log\n        b\n        ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\n)\nGROUP BY\n  DAY,\n  pool_name\n),\nswap_to_asset_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(liq_fee_in_rune_e8) AS to_asset_fees,\n    SUM(from_e8) AS to_asset_volume,\n    COUNT(*) AS to_asset_count,\n    AVG(swap_slip_bp) AS to_asset_average_slip\n  FROM(\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 'to_rune'\n          ELSE 'to_asset'\n        END AS to_tune_asset,\n        liq_fee_in_rune_e8,\n        to_e8,\n        from_e8,\n        swap_slip_bp,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        THORCHAIN_DEV.silver.swap_events A\n        JOIN THORCHAIN_DEV.silver.block_log\n        b\n        ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\n)\nGROUP BY\n  to_tune_asset,\n  pool_name,\n  DAY\nHAVING\n  to_tune_asset = 'to_asset'\n),\nswap_to_rune_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    SUM(liq_fee_in_rune_e8) AS to_rune_fees,\n    SUM(to_e8) AS to_rune_volume,\n    COUNT(*) AS to_rune_count,\n    AVG(swap_slip_bp) AS to_rune_average_slip\n  FROM(\n      SELECT\n        DATE(\n          b.block_timestamp\n        ) AS DAY,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 'to_rune'\n          ELSE 'to_asset'\n        END AS to_tune_asset,\n        liq_fee_in_rune_e8,\n        to_e8,\n        from_e8,\n        swap_slip_bp,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        THORCHAIN_DEV.silver.swap_events A\n        JOIN THORCHAIN_DEV.silver.block_log\n        b\n        ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\n)\nGROUP BY\n  to_tune_asset,\n  pool_name,\n  DAY\nHAVING\n  to_tune_asset = 'to_rune'\n),\naverage_slip_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    AVG(swap_slip_bp) AS average_slip\n  FROM\n    THORCHAIN_DEV.silver.swap_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  pool_name,\n  DAY\n),\nunique_swapper_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    COUNT(\n      DISTINCT from_address\n    ) AS unique_swapper_count\n  FROM\n    THORCHAIN_DEV.silver.swap_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  pool_name,\n  DAY\n),\nstake_amount AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(stake_units) AS units\n  FROM\n    THORCHAIN_DEV.silver.stake_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  pool_name,\n  DAY\n),\nunstake_umc AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    from_address AS address,\n    pool_name,\n    SUM(stake_units) AS unstake_liquidity_units\n  FROM\n    THORCHAIN_DEV.silver.unstake_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  from_address,\n  pool_name,\n  DAY\n),\nstake_umc AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    rune_address AS address,\n    pool_name,\n    SUM(stake_units) AS liquidity_units\n  FROM\n    THORCHAIN_DEV.silver.stake_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n  WHERE\n    rune_address IS NOT NULL\n\n\nAND b.block_timestamp :: DATE >= (\n  SELECT\n    MAX(\n      DAY\n    )\n  FROM\n    THORCHAIN_DEV.silver.pool_block_statistics\n) - INTERVAL '48 HOURS'\n\nGROUP BY\n  rune_address,\n  pool_name,\n  DAY\nUNION ALL\nSELECT\n  DATE(\n    b.block_timestamp\n  ) AS DAY,\n  asset_address AS address,\n  pool_name,\n  SUM(stake_units) AS liquidity_units\nFROM\n  THORCHAIN_DEV.silver.stake_events A\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON A.block_timestamp = b.timestamp\nWHERE\n  asset_address IS NOT NULL\n  AND rune_address IS NULL\n\n\nAND b.block_timestamp :: DATE >= (\n  SELECT\n    MAX(\n      DAY\n    )\n  FROM\n    THORCHAIN_DEV.silver.pool_block_statistics\n) - INTERVAL '48 HOURS'\n\nGROUP BY\n  asset_address,\n  pool_name,\n  DAY\n),\nunique_member_count AS (\n  SELECT\n    DAY,\n    pool_name,\n    COUNT(\n      DISTINCT address\n    ) AS unique_member_count\n  FROM\n    (\n      SELECT\n        stake_umc.day,\n        stake_umc.pool_name,\n        stake_umc.address,\n        stake_umc.liquidity_units,\n        CASE\n          WHEN unstake_umc.unstake_liquidity_units IS NOT NULL THEN unstake_umc.unstake_liquidity_units\n          ELSE 0\n        END AS unstake_liquidity_units\n      FROM\n        stake_umc\n        LEFT JOIN unstake_umc\n        ON stake_umc.address = unstake_umc.address\n        AND stake_umc.pool_name = unstake_umc.pool_name\n    )\n  WHERE\n    liquidity_units - unstake_liquidity_units > 0\n  GROUP BY\n    pool_name,\n    DAY\n),\nasset_price_usd_tbl AS (\n  SELECT\n    DAY,\n    pool_name,\n    asset_usd AS asset_price_usd\n  FROM\n    (\n      SELECT\n        DATE(block_timestamp) AS DAY,\n        block_id,\n        MAX(block_id) over (PARTITION BY pool_name, DATE(block_timestamp)) AS max_block_id,\n        pool_name,\n        asset_usd\n      FROM\n        THORCHAIN_DEV.silver.prices\n    )\n  WHERE\n    block_id = max_block_id\n),\njoined AS (\n  SELECT\n    pool_depth.day AS DAY,\n    COALESCE(\n      add_asset_liquidity_volume,\n      0\n    ) AS add_asset_liquidity_volume,\n    COALESCE(\n      add_liquidity_count,\n      0\n    ) AS add_liquidity_count,\n    COALESCE(\n      (\n        add_asset_liquidity_volume + add_rune_liquidity_volume\n      ),\n      0\n    ) AS add_liquidity_volume,\n    COALESCE(\n      add_rune_liquidity_volume,\n      0\n    ) AS add_rune_liquidity_volume,\n    pool_depth.pool_name AS asset,\n    asset_depth,\n    COALESCE(\n      asset_price,\n      0\n    ) AS asset_price,\n    COALESCE(\n      asset_price_usd,\n      0\n    ) AS asset_price_usd,\n    COALESCE(\n      average_slip,\n      0\n    ) AS average_slip,\n    COALESCE(\n      impermanent_loss_protection_paid,\n      0\n    ) AS impermanent_loss_protection_paid,\n    COALESCE(\n      rune_depth,\n      0\n    ) AS rune_depth,\n    COALESCE(\n      synth_depth,\n      0\n    ) AS synth_depth,\n    COALESCE(\n      status,\n      'no status'\n    ) AS status,\n    COALESCE((to_rune_count + to_asset_count), 0) AS swap_count,\n    COALESCE(\n      swap_volume,\n      0\n    ) AS swap_volume,\n    COALESCE(\n      to_asset_average_slip,\n      0\n    ) AS to_asset_average_slip,\n    COALESCE(\n      to_asset_count,\n      0\n    ) AS to_asset_count,\n    COALESCE(\n      to_asset_fees,\n      0\n    ) AS to_asset_fees,\n    COALESCE(\n      to_asset_volume,\n      0\n    ) AS to_asset_volume,\n    COALESCE(\n      to_rune_average_slip,\n      0\n    ) AS to_rune_average_slip,\n    COALESCE(\n      to_rune_count,\n      0\n    ) AS to_rune_count,\n    COALESCE(\n      to_rune_fees,\n      0\n    ) AS to_rune_fees,\n    COALESCE(\n      to_rune_volume,\n      0\n    ) AS to_rune_volume,\n    COALESCE((to_rune_fees + to_asset_fees), 0) AS totalFees,\n    COALESCE(\n      unique_member_count,\n      0\n    ) AS unique_member_count,\n    COALESCE(\n      unique_swapper_count,\n      0\n    ) AS unique_swapper_count,\n    COALESCE(\n      units,\n      0\n    ) AS units,\n    COALESCE(\n      withdraw_asset_volume,\n      0\n    ) AS withdraw_asset_volume,\n    COALESCE(\n      withdraw_count,\n      0\n    ) AS withdraw_count,\n    COALESCE(\n      withdraw_rune_volume,\n      0\n    ) AS withdraw_rune_volume,\n    COALESCE((withdraw_rune_volume + withdraw_asset_volume), 0) AS withdraw_volume,\n    SUM(COALESCE(added_stake, 0) - COALESCE(withdrawn_stake, 0)) over (\n      PARTITION BY pool_depth.pool_name\n      ORDER BY\n        pool_depth.day ASC\n    ) AS total_stake,\n    asset_depth * COALESCE(\n      rune_depth,\n      0\n    ) AS depth_product,\n    total_stake * synth_depth / ((asset_depth * 2) - synth_depth) AS synth_units,\n    CASE\n      WHEN total_stake = 0 THEN 0\n      ELSE SQRT(depth_product) / (\n        total_stake + synth_units\n      )\n    END AS liquidity_unit_value_index\n  FROM\n    pool_depth\n    LEFT JOIN pool_status\n    ON pool_depth.pool_name = pool_status.pool_name\n    AND pool_depth.day = pool_status.day\n    LEFT JOIN add_liquidity_tbl\n    ON pool_depth.pool_name = add_liquidity_tbl.pool_name\n    AND pool_depth.day = add_liquidity_tbl.day\n    LEFT JOIN withdraw_tbl\n    ON pool_depth.pool_name = withdraw_tbl.pool_name\n    AND pool_depth.day = withdraw_tbl.day\n    LEFT JOIN swap_total_tbl\n    ON pool_depth.pool_name = swap_total_tbl.pool_name\n    AND pool_depth.day = swap_total_tbl.day\n    LEFT JOIN swap_to_asset_tbl\n    ON pool_depth.pool_name = swap_to_asset_tbl.pool_name\n    AND pool_depth.day = swap_to_asset_tbl.day\n    LEFT JOIN swap_to_rune_tbl\n    ON pool_depth.pool_name = swap_to_rune_tbl.pool_name\n    AND pool_depth.day = swap_to_rune_tbl.day\n    LEFT JOIN unique_swapper_tbl\n    ON pool_depth.pool_name = unique_swapper_tbl.pool_name\n    AND pool_depth.day = unique_swapper_tbl.day\n    LEFT JOIN stake_amount\n    ON pool_depth.pool_name = stake_amount.pool_name\n    AND pool_depth.day = stake_amount.day\n    LEFT JOIN average_slip_tbl\n    ON pool_depth.pool_name = average_slip_tbl.pool_name\n    AND pool_depth.day = average_slip_tbl.day\n    LEFT JOIN unique_member_count\n    ON pool_depth.pool_name = unique_member_count.pool_name\n    AND pool_depth.day = unique_member_count.day\n    LEFT JOIN asset_price_usd_tbl\n    ON pool_depth.pool_name = asset_price_usd_tbl.pool_name\n    AND pool_depth.day = asset_price_usd_tbl.day\n)\nSELECT\n  DISTINCT DAY,\n  add_asset_liquidity_volume,\n  add_liquidity_count,\n  add_liquidity_volume,\n  add_rune_liquidity_volume,\n  asset,\n  asset_depth,\n  asset_price,\n  asset_price_usd,\n  average_slip,\n  impermanent_loss_protection_paid,\n  rune_depth,\n  status,\n  swap_count,\n  swap_volume,\n  to_asset_average_slip,\n  to_asset_count,\n  to_asset_fees,\n  to_asset_volume,\n  to_rune_average_slip,\n  to_rune_count,\n  to_rune_fees,\n  to_rune_volume,\n  totalFees,\n  unique_member_count,\n  unique_swapper_count,\n  units,\n  withdraw_asset_volume,\n  withdraw_count,\n  withdraw_rune_volume,\n  withdraw_volume,\n  total_stake,\n  depth_product,\n  liquidity_unit_value_index,\n  LAG(\n    liquidity_unit_value_index,\n    1\n  ) over (\n    PARTITION BY asset\n    ORDER BY\n      DAY ASC\n  ) AS prev_liquidity_unit_value_index,\n  concat_ws(\n    '-',\n    DAY,\n    asset\n  ) AS _unique_key\nFROM\n  joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.pool_block_statistics"}, "model.thorchain_models.silver__liquidity_actions": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH stakes AS (\n\n  SELECT\n    block_timestamp,\n    rune_tx_id,\n    pool_name,\n    rune_address,\n    rune_e8,\n    asset_e8,\n    stake_units,\n    asset_tx_id,\n    asset_address,\n    asset_blockchain,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__stake_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}\n),\nunstakes AS (\n  SELECT\n    block_timestamp,\n    tx_id,\n    pool_name,\n    from_address,\n    to_address,\n    emit_rune_e8,\n    emit_asset_e8,\n    stake_units,\n    imp_loss_protection_e8,\n    asymmetry,\n    basis_points,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__unstake_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  rune_tx_id AS tx_id,\n  'add_liquidity' AS lp_action,\n  se.pool_name,\n  rune_address AS from_address,\n  NULL AS to_address,\n  COALESCE((rune_e8 / pow(10, 8)), 0) AS rune_amount,\n  COALESCE((rune_e8 / pow(10, 8) * rune_usd), 0) AS rune_amount_usd,\n  COALESCE((asset_e8 / pow(10, 8)), 0) AS asset_amount,\n  COALESCE((asset_e8 / pow(10, 8) * asset_usd), 0) AS asset_amount_usd,\n  stake_units,\n  asset_tx_id,\n  asset_address,\n  asset_blockchain,\n  NULL AS il_protection,\n  NULL AS il_protection_usd,\n  NULL AS unstake_asymmetry,\n  NULL AS unstake_basis_points,\n  concat_ws(\n    '-',\n    event_id,\n    se.block_timestamp,\n    COALESCE(\n      tx_id,\n      ''\n    ),\n    lp_action,\n    se.pool_name,\n    COALESCE(\n      from_address,\n      ''\n    ),\n    COALESCE(\n      to_address,\n      ''\n    ),\n    COALESCE(\n      asset_tx_id,\n      ''\n    )\n  ) AS _unique_key,\n  se._inserted_timestamp\nFROM\n  stakes se\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON b.height = p.block_id\n  AND se.pool_name = p.pool_name\nUNION\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  tx_id,\n  'remove_liquidity' AS lp_action,\n  ue.pool_name,\n  from_address,\n  to_address,\n  COALESCE(emit_rune_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(emit_rune_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  COALESCE(emit_asset_e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(emit_asset_e8 / pow(10, 8) * asset_usd, 0) AS asset_amount_usd,\n  stake_units,\n  NULL AS asset_tx_id,\n  NULL AS asset_address,\n  NULL AS asset_blockchain,\n  imp_loss_protection_e8 / pow(\n    10,\n    8\n  ) AS il_protection,\n  imp_loss_protection_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS il_protection_usd,\n  asymmetry AS unstake_asymmetry,\n  basis_points AS unstake_basis_points,\n  concat_ws(\n    '-',\n    event_id,\n    ue.block_timestamp,\n    COALESCE(\n      tx_id,\n      ''\n    ),\n    lp_action,\n    ue.pool_name,\n    COALESCE(\n      from_address,\n      ''\n    ),\n    COALESCE(\n      to_address,\n      ''\n    ),\n    COALESCE(\n      asset_tx_id,\n      ''\n    )\n  ) AS _unique_key,\n  ue._inserted_timestamp\nFROM\n  unstakes ue\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON ue.block_timestamp = b.timestamp\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON b.height = p.block_id\n  AND ue.pool_name = p.pool_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__unstake_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__liquidity_actions"], "unique_id": "model.thorchain_models.silver__liquidity_actions", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__liquidity_actions.sql", "original_file_path": "models/silver/silver__liquidity_actions.sql", "name": "silver__liquidity_actions", "alias": "liquidity_actions", "checksum": {"name": "sha256", "checksum": "c784c3b64ed7f2cdbba4d28820662fc9646faa53ca3a6a4acde3e300e7d8d408"}, "tags": [], "refs": [["silver__stake_events"], ["silver__unstake_events"], ["silver__block_log"], ["silver__prices"], ["silver__block_log"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_ACTION": {"name": "LP_ACTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__liquidity_actions.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.510983, "compiled_sql": "\n\nWITH stakes AS (\n\n  SELECT\n    block_timestamp,\n    rune_tx_id,\n    pool_name,\n    rune_address,\n    rune_e8,\n    asset_e8,\n    stake_units,\n    asset_tx_id,\n    asset_address,\n    asset_blockchain,\n    event_id,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.stake_events\n\n\nWHERE\n  _INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      THORCHAIN_DEV.silver.liquidity_actions\n  ) - INTERVAL '4 HOURS'\n\n),\nunstakes AS (\n  SELECT\n    block_timestamp,\n    tx_id,\n    pool_name,\n    from_address,\n    to_address,\n    emit_rune_e8,\n    emit_asset_e8,\n    stake_units,\n    imp_loss_protection_e8,\n    asymmetry,\n    basis_points,\n    event_id,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.unstake_events\n\n\nWHERE\n  _INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      THORCHAIN_DEV.silver.liquidity_actions\n  ) - INTERVAL '4 HOURS'\n\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  rune_tx_id AS tx_id,\n  'add_liquidity' AS lp_action,\n  se.pool_name,\n  rune_address AS from_address,\n  NULL AS to_address,\n  COALESCE((rune_e8 / pow(10, 8)), 0) AS rune_amount,\n  COALESCE((rune_e8 / pow(10, 8) * rune_usd), 0) AS rune_amount_usd,\n  COALESCE((asset_e8 / pow(10, 8)), 0) AS asset_amount,\n  COALESCE((asset_e8 / pow(10, 8) * asset_usd), 0) AS asset_amount_usd,\n  stake_units,\n  asset_tx_id,\n  asset_address,\n  asset_blockchain,\n  NULL AS il_protection,\n  NULL AS il_protection_usd,\n  NULL AS unstake_asymmetry,\n  NULL AS unstake_basis_points,\n  concat_ws(\n    '-',\n    event_id,\n    se.block_timestamp,\n    COALESCE(\n      tx_id,\n      ''\n    ),\n    lp_action,\n    se.pool_name,\n    COALESCE(\n      from_address,\n      ''\n    ),\n    COALESCE(\n      to_address,\n      ''\n    ),\n    COALESCE(\n      asset_tx_id,\n      ''\n    )\n  ) AS _unique_key,\n  se._inserted_timestamp\nFROM\n  stakes se\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN THORCHAIN_DEV.silver.prices\n  p\n  ON b.height = p.block_id\n  AND se.pool_name = p.pool_name\nUNION\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  tx_id,\n  'remove_liquidity' AS lp_action,\n  ue.pool_name,\n  from_address,\n  to_address,\n  COALESCE(emit_rune_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(emit_rune_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  COALESCE(emit_asset_e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(emit_asset_e8 / pow(10, 8) * asset_usd, 0) AS asset_amount_usd,\n  stake_units,\n  NULL AS asset_tx_id,\n  NULL AS asset_address,\n  NULL AS asset_blockchain,\n  imp_loss_protection_e8 / pow(\n    10,\n    8\n  ) AS il_protection,\n  imp_loss_protection_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS il_protection_usd,\n  asymmetry AS unstake_asymmetry,\n  basis_points AS unstake_basis_points,\n  concat_ws(\n    '-',\n    event_id,\n    ue.block_timestamp,\n    COALESCE(\n      tx_id,\n      ''\n    ),\n    lp_action,\n    ue.pool_name,\n    COALESCE(\n      from_address,\n      ''\n    ),\n    COALESCE(\n      to_address,\n      ''\n    ),\n    COALESCE(\n      asset_tx_id,\n      ''\n    )\n  ) AS _unique_key,\n  ue._inserted_timestamp\nFROM\n  unstakes ue\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON ue.block_timestamp = b.timestamp\n  LEFT JOIN THORCHAIN_DEV.silver.prices\n  p\n  ON b.height = p.block_id\n  AND ue.pool_name = p.pool_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.liquidity_actions"}, "model.thorchain_models.silver__refund_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__refund_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, asset_2nd, memo, code, reason, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__refund_events"], "unique_id": "model.thorchain_models.silver__refund_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__refund_events.sql", "original_file_path": "models/silver/silver__refund_events.sql", "name": "silver__refund_events", "alias": "refund_events", "checksum": {"name": "sha256", "checksum": "4780bac9858b65313a0bbbade272a117a8c60284448a54379805ab30e43077fc"}, "tags": [], "refs": [["bronze__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_2ND_E8": {"name": "ASSET_2ND_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODE": {"name": "CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__refund_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.4980721, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.refund_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, asset_2nd, memo, code, reason, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.refund_events"}, "model.thorchain_models.silver__validator_request_leave_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  from_addr AS from_address,\n  node_addr AS node_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__validator_request_leave_events') }}\n  e qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, block_timestamp, from_addr, node_addr\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__validator_request_leave_events"], "unique_id": "model.thorchain_models.silver__validator_request_leave_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__validator_request_leave_events.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.sql", "name": "silver__validator_request_leave_events", "alias": "validator_request_leave_events", "checksum": {"name": "sha256", "checksum": "1ab1aa3abe50d1da7c2507dca9e766eecf049460b8558690d7c60f2d28023916"}, "tags": [], "refs": [["bronze__validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {"EVENT_ID": {"name": "EVENT_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__validator_request_leave_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__validator_request_leave_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.487265, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  from_addr AS from_address,\n  node_addr AS node_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.validator_request_leave_events\n  e qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, block_timestamp, from_addr, node_addr\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.validator_request_leave_events"}, "model.thorchain_models.silver__transfer_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  amount_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__transfer_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, from_addr, to_addr, asset, amount_e8, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__transfer_events"], "unique_id": "model.thorchain_models.silver__transfer_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__transfer_events.sql", "original_file_path": "models/silver/silver__transfer_events.sql", "name": "silver__transfer_events", "alias": "transfer_events", "checksum": {"name": "sha256", "checksum": "f57c7391b896f6a4840a28326b0e1f0f0ac654563b08e6bbe02a1217a6f33fe6"}, "tags": [], "refs": [["bronze__transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_E8": {"name": "AMOUNT_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__transfer_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfer_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.48183, "compiled_sql": "\n\nSELECT\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  amount_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.transfer_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, from_addr, to_addr, asset, amount_e8, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.transfer_events"}, "model.thorchain_models.silver__total_value_locked": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"day\",\n  incremental_strategy = 'merge',\n  cluster_by = ['day']\n) }}\n\nWITH bond_type_day AS (\n\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    bond_type,\n    (SUM(e8) / pow(10, 8)) AS rune_amount,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    {{ ref('silver__bond_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  bond_type\n),\nbond_type_day_direction AS (\n  SELECT\n    DAY,\n    bond_type,\n    CASE\n      WHEN bond_type IN (\n        'bond_returned',\n        'bond_cost'\n      ) THEN -1\n      ELSE 1\n    END AS direction,\n    rune_amount,\n    rune_amount * direction AS abs_rune_amount,\n    _inserted_timestamp\n  FROM\n    bond_type_day\n),\ntotal_value_bonded_tbl AS (\n  SELECT\n    DAY,\n    SUM(abs_rune_amount) AS total_value_bonded,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    bond_type_day_direction\n  GROUP BY\n    DAY\n),\ntotal_pool_depth AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    b.height AS block_id,\n    pool_name,\n    rune_e8,\n    asset_e8,\n    MAX(height) over (PARTITION BY pool_name, DATE(b.block_timestamp)) AS max_block_id,\n    A._inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n),\ntotal_pool_depth_max AS (\n  SELECT\n    DAY,\n    rune_e8 AS rune_depth,\n    asset_e8 AS asset_depth,\n    _inserted_timestamp\n  FROM\n    total_pool_depth\n  WHERE\n    block_id = max_block_id\n),\ntotal_value_pooled_tbl AS (\n  SELECT\n    DAY,\n    SUM(rune_depth) * 2 / power(\n      10,\n      8\n    ) AS total_value_pooled,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    total_pool_depth_max\n  GROUP BY\n    DAY\n)\nSELECT\n  COALESCE(\n    total_value_bonded_tbl.day,\n    total_value_pooled_tbl.day\n  ) AS DAY,\n  COALESCE(\n    total_value_pooled,\n    0\n  ) AS total_value_pooled,\n  COALESCE(SUM(total_value_bonded) over (\nORDER BY\n  COALESCE(total_value_bonded_tbl.day, total_value_pooled_tbl.day) ASC), 0) AS total_value_bonded,\n  COALESCE(\n    total_value_pooled,\n    0\n  ) + SUM(COALESCE(total_value_bonded, 0)) over (\n    ORDER BY\n      COALESCE(\n        total_value_bonded_tbl.day,\n        total_value_pooled_tbl.day\n      ) ASC\n  ) AS total_value_locked,\n  total_value_bonded_tbl._inserted_timestamp\nFROM\n  total_value_bonded_tbl full\n  JOIN total_value_pooled_tbl\n  ON total_value_bonded_tbl.day = total_value_pooled_tbl.day", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__bond_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "day", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["day"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__total_value_locked"], "unique_id": "model.thorchain_models.silver__total_value_locked", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__total_value_locked.sql", "original_file_path": "models/silver/silver__total_value_locked.sql", "name": "silver__total_value_locked", "alias": "total_value_locked", "checksum": {"name": "sha256", "checksum": "c32125a76c0c45930901425659c8f1ae89c37a317915abd75cf5f98ee2c5ac15"}, "tags": [], "refs": [["silver__bond_events"], ["silver__block_log"], ["silver__block_pool_depths"], ["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__total_value_locked.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_value_locked.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "day", "incremental_strategy": "merge", "cluster_by": ["day"]}, "created_at": 1665176151.521423, "compiled_sql": "\n\nWITH bond_type_day AS (\n\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    bond_type,\n    (SUM(e8) / pow(10, 8)) AS rune_amount,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.bond_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.total_value_locked\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  bond_type\n),\nbond_type_day_direction AS (\n  SELECT\n    DAY,\n    bond_type,\n    CASE\n      WHEN bond_type IN (\n        'bond_returned',\n        'bond_cost'\n      ) THEN -1\n      ELSE 1\n    END AS direction,\n    rune_amount,\n    rune_amount * direction AS abs_rune_amount,\n    _inserted_timestamp\n  FROM\n    bond_type_day\n),\ntotal_value_bonded_tbl AS (\n  SELECT\n    DAY,\n    SUM(abs_rune_amount) AS total_value_bonded,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    bond_type_day_direction\n  GROUP BY\n    DAY\n),\ntotal_pool_depth AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    b.height AS block_id,\n    pool_name,\n    rune_e8,\n    asset_e8,\n    MAX(height) over (PARTITION BY pool_name, DATE(b.block_timestamp)) AS max_block_id,\n    A._inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.block_pool_depths A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.total_value_locked\n  ) - INTERVAL '48 HOURS'\n\n),\ntotal_pool_depth_max AS (\n  SELECT\n    DAY,\n    rune_e8 AS rune_depth,\n    asset_e8 AS asset_depth,\n    _inserted_timestamp\n  FROM\n    total_pool_depth\n  WHERE\n    block_id = max_block_id\n),\ntotal_value_pooled_tbl AS (\n  SELECT\n    DAY,\n    SUM(rune_depth) * 2 / power(\n      10,\n      8\n    ) AS total_value_pooled,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    total_pool_depth_max\n  GROUP BY\n    DAY\n)\nSELECT\n  COALESCE(\n    total_value_bonded_tbl.day,\n    total_value_pooled_tbl.day\n  ) AS DAY,\n  COALESCE(\n    total_value_pooled,\n    0\n  ) AS total_value_pooled,\n  COALESCE(SUM(total_value_bonded) over (\nORDER BY\n  COALESCE(total_value_bonded_tbl.day, total_value_pooled_tbl.day) ASC), 0) AS total_value_bonded,\n  COALESCE(\n    total_value_pooled,\n    0\n  ) + SUM(COALESCE(total_value_bonded, 0)) over (\n    ORDER BY\n      COALESCE(\n        total_value_bonded_tbl.day,\n        total_value_pooled_tbl.day\n      ) ASC\n  ) AS total_value_locked,\n  total_value_bonded_tbl._inserted_timestamp\nFROM\n  total_value_bonded_tbl full\n  JOIN total_value_pooled_tbl\n  ON total_value_bonded_tbl.day = total_value_pooled_tbl.day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.total_value_locked"}, "model.thorchain_models.silver__bond_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  bond_type,\n  e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__bond_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY tx, from_addr, asset_e8, bond_type, e8, block_timestamp, COALESCE(to_addr, ''), COALESCE(chain, ''), COALESCE(asset, ''), COALESCE(memo, '')\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__bond_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__bond_events"], "unique_id": "model.thorchain_models.silver__bond_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__bond_events.sql", "original_file_path": "models/silver/silver__bond_events.sql", "name": "silver__bond_events", "alias": "bond_events", "checksum": {"name": "sha256", "checksum": "47f87481076114a026fb2c97e82493e3bdb6e29a2f9248a9d595dd89e21baa9e"}, "tags": [], "refs": [["bronze__bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BOND_TYPE": {"name": "BOND_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "E8": {"name": "E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__bond_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__bond_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.537098, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  bond_type,\n  e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.bond_events\n  qualify(ROW_NUMBER() over(PARTITION BY tx, from_addr, asset_e8, bond_type, e8, block_timestamp, COALESCE(to_addr, ''), COALESCE(chain, ''), COALESCE(asset, ''), COALESCE(memo, '')\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.bond_events"}, "model.thorchain_models.silver__update_node_account_status_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr as node_address,\n  current_flag AS current_status,\n  former AS former_status,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__update_node_account_status_events') }}\n  e qualify(ROW_NUMBER() over(PARTITION BY node_addr, block_timestamp, former, current_flag\n  ORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__update_node_account_status_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__update_node_account_status_events"], "unique_id": "model.thorchain_models.silver__update_node_account_status_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__update_node_account_status_events.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.sql", "name": "silver__update_node_account_status_events", "alias": "update_node_account_status_events", "checksum": {"name": "sha256", "checksum": "9f63071925596d8ac97b3aeca3d47270dbde3b52f0d94d4bb24ac73d8b8ce5e0"}, "tags": [], "refs": [["bronze__update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {"NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENT_STATUS": {"name": "CURRENT_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORMER_STATUS": {"name": "FORMER_STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__update_node_account_status_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__update_node_account_status_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.530245, "compiled_sql": "\n\nSELECT\n  node_addr as node_address,\n  current_flag AS current_status,\n  former AS former_status,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.update_node_account_status_events\n  e qualify(ROW_NUMBER() over(PARTITION BY node_addr, block_timestamp, former, current_flag\n  ORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.update_node_account_status_events"}, "model.thorchain_models.silver__swaps": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH swaps AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    from_asset,\n    from_e8,\n    to_asset,\n    to_e8,\n    memo,\n    pool_name,\n    to_e8_min,\n    swap_slip_bp,\n    liq_fee_e8,\n    liq_fee_in_rune_e8,\n    _DIRECTION,\n    event_id,\n    b.block_timestamp,\n    b.height AS block_id,\n    A._INSERTED_TIMESTAMP,\n    COUNT(1) over (\n      PARTITION BY tx_id\n    ) AS n_tx,\n    RANK() over (\n      PARTITION BY tx_id\n      ORDER BY\n        liq_fee_e8 ASC\n    ) AS rank_liq_fee\n  FROM\n    {{ ref('silver__swap_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  A._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}\n)\nSELECT\n  se.block_timestamp,\n  se.block_id,\n  tx_id,\n  blockchain,\n  se.pool_name,\n  from_address,\n  CASE\n    WHEN n_tx > 1\n    AND rank_liq_fee = 1\n    AND SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING IS NOT NULL THEN SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [2] :: STRING\n  END AS native_to_address,\n  to_address AS to_pool_address,\n  CASE\n    WHEN COALESCE(SPLIT(memo, ':') [4], '') = '' THEN NULL\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING\n  END AS affiliate_address,\n  CASE\n    WHEN COALESCE(SPLIT(memo, ':') [5], '') = '' THEN NULL\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [5] :: INT\n  END AS affiliate_fee_basis_points,\n  from_asset,\n  to_asset,\n  COALESCE(from_e8 / pow(10, 8), 0) AS from_amount,\n  COALESCE(to_e8 / pow(10, 8), 0) AS to_amount,\n  COALESCE(to_e8_min / pow(10, 8), 0) AS min_to_amount,\n  CASE\n    WHEN from_asset = 'THOR.RUNE' THEN COALESCE(from_e8 * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(from_e8 * asset_usd / pow(10, 8), 0)\n  END AS from_amount_usd,\n  CASE\n    WHEN (\n      to_asset = 'THOR.RUNE'\n      OR to_asset = 'BNB.RUNE-B1A'\n    ) THEN COALESCE(to_e8 * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(to_e8 * asset_usd / pow(10, 8), 0)\n  END AS to_amount_usd,\n  rune_usd,\n  asset_usd,\n  CASE\n    WHEN to_asset = 'THOR.RUNE' THEN COALESCE(to_e8_min * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(to_e8_min * asset_usd / pow(10, 8), 0)\n  END AS to_amount_min_usd,\n  swap_slip_bp,\n  COALESCE(liq_fee_in_rune_e8 / pow(10, 8), 0) AS liq_fee_rune,\n  COALESCE(liq_fee_in_rune_e8 / pow(10, 8) * rune_usd, 0) AS liq_fee_rune_usd,\n  CASE\n    WHEN to_asset = 'THOR.RUNE' THEN COALESCE(liq_fee_e8 / pow(10, 8), 0)\n    ELSE COALESCE(liq_fee_e8 / pow(10, 8), 0)\n  END AS liq_fee_asset,\n  CASE\n    WHEN to_asset = 'THOR.RUNE' THEN COALESCE(liq_fee_e8 * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(liq_fee_e8 * asset_usd / pow(10, 8), 0)\n  END AS liq_fee_asset_usd,\n  concat_ws(\n    '-',\n    tx_id,\n    se.block_id,\n    to_asset,\n    from_asset,\n    COALESCE(\n      native_to_address,\n      ''\n    ),\n    from_address,\n    se.pool_name,\n    to_pool_address,\n    event_id\n  ) AS _unique_key,\n  _INSERTED_TIMESTAMP\nFROM\n  swaps se\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON se.block_id = p.block_id\n  AND se.pool_name = p.pool_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__swaps"], "unique_id": "model.thorchain_models.silver__swaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__swaps.sql", "original_file_path": "models/silver/silver__swaps.sql", "name": "silver__swaps", "alias": "swaps", "checksum": {"name": "sha256", "checksum": "ed3e6562c2d2f1932bbd103f815087af56538fe1acb74b5cec6b5575905746d7"}, "tags": [], "refs": [["silver__swap_events"], ["silver__block_log"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP::DATE": {"name": "BLOCK_TIMESTAMP::DATE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_POOL_ADDRESS": {"name": "TO_POOL_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ASSET": {"name": "FROM_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET": {"name": "TO_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMOUNT": {"name": "FROM_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMOUNT": {"name": "TO_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_TO_AMOUNT": {"name": "MIN_TO_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMOUNT_USD": {"name": "FROM_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMOUNT_USD": {"name": "TO_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMOUNT_MIN_USD": {"name": "TO_AMOUNT_MIN_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_SLIP_BP": {"name": "SWAP_SLIP_BP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_RUNE": {"name": "LIQ_FEE_RUNE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_RUNE_USD": {"name": "LIQ_FEE_RUNE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_ASSET": {"name": "LIQ_FEE_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_ASSET_USD": {"name": "LIQ_FEE_ASSET_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__swaps.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.586111, "compiled_sql": "\n\nWITH swaps AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    from_asset,\n    from_e8,\n    to_asset,\n    to_e8,\n    memo,\n    pool_name,\n    to_e8_min,\n    swap_slip_bp,\n    liq_fee_e8,\n    liq_fee_in_rune_e8,\n    _DIRECTION,\n    event_id,\n    b.block_timestamp,\n    b.height AS block_id,\n    A._INSERTED_TIMESTAMP,\n    COUNT(1) over (\n      PARTITION BY tx_id\n    ) AS n_tx,\n    RANK() over (\n      PARTITION BY tx_id\n      ORDER BY\n        liq_fee_e8 ASC\n    ) AS rank_liq_fee\n  FROM\n    THORCHAIN_DEV.silver.swap_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  A._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      THORCHAIN_DEV.silver.swaps\n  ) - INTERVAL '4 HOURS'\n\n)\nSELECT\n  se.block_timestamp,\n  se.block_id,\n  tx_id,\n  blockchain,\n  se.pool_name,\n  from_address,\n  CASE\n    WHEN n_tx > 1\n    AND rank_liq_fee = 1\n    AND SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING IS NOT NULL THEN SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [2] :: STRING\n  END AS native_to_address,\n  to_address AS to_pool_address,\n  CASE\n    WHEN COALESCE(SPLIT(memo, ':') [4], '') = '' THEN NULL\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [4] :: STRING\n  END AS affiliate_address,\n  CASE\n    WHEN COALESCE(SPLIT(memo, ':') [5], '') = '' THEN NULL\n    ELSE SPLIT(\n      memo,\n      ':'\n    ) [5] :: INT\n  END AS affiliate_fee_basis_points,\n  from_asset,\n  to_asset,\n  COALESCE(from_e8 / pow(10, 8), 0) AS from_amount,\n  COALESCE(to_e8 / pow(10, 8), 0) AS to_amount,\n  COALESCE(to_e8_min / pow(10, 8), 0) AS min_to_amount,\n  CASE\n    WHEN from_asset = 'THOR.RUNE' THEN COALESCE(from_e8 * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(from_e8 * asset_usd / pow(10, 8), 0)\n  END AS from_amount_usd,\n  CASE\n    WHEN (\n      to_asset = 'THOR.RUNE'\n      OR to_asset = 'BNB.RUNE-B1A'\n    ) THEN COALESCE(to_e8 * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(to_e8 * asset_usd / pow(10, 8), 0)\n  END AS to_amount_usd,\n  rune_usd,\n  asset_usd,\n  CASE\n    WHEN to_asset = 'THOR.RUNE' THEN COALESCE(to_e8_min * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(to_e8_min * asset_usd / pow(10, 8), 0)\n  END AS to_amount_min_usd,\n  swap_slip_bp,\n  COALESCE(liq_fee_in_rune_e8 / pow(10, 8), 0) AS liq_fee_rune,\n  COALESCE(liq_fee_in_rune_e8 / pow(10, 8) * rune_usd, 0) AS liq_fee_rune_usd,\n  CASE\n    WHEN to_asset = 'THOR.RUNE' THEN COALESCE(liq_fee_e8 / pow(10, 8), 0)\n    ELSE COALESCE(liq_fee_e8 / pow(10, 8), 0)\n  END AS liq_fee_asset,\n  CASE\n    WHEN to_asset = 'THOR.RUNE' THEN COALESCE(liq_fee_e8 * rune_usd / pow(10, 8), 0)\n    ELSE COALESCE(liq_fee_e8 * asset_usd / pow(10, 8), 0)\n  END AS liq_fee_asset_usd,\n  concat_ws(\n    '-',\n    tx_id,\n    se.block_id,\n    to_asset,\n    from_asset,\n    COALESCE(\n      native_to_address,\n      ''\n    ),\n    from_address,\n    se.pool_name,\n    to_pool_address,\n    event_id\n  ) AS _unique_key,\n  _INSERTED_TIMESTAMP\nFROM\n  swaps se\n  LEFT JOIN THORCHAIN_DEV.silver.prices\n  p\n  ON se.block_id = p.block_id\n  AND se.pool_name = p.pool_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.swaps"}, "model.thorchain_models.silver__swap_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  from_asset,\n  from_e8,\n  to_asset,\n  to_e8,\n  memo,\n  pool AS pool_name,\n  to_e8_min,\n  swap_slip_bp,\n  liq_fee_e8,\n  liq_fee_in_rune_e8,\n  _DIRECTION,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__swap_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, to_addr, from_addr, from_asset, from_e8, to_asset, to_e8, memo, pool, _direction\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__swap_events"], "unique_id": "model.thorchain_models.silver__swap_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__swap_events.sql", "original_file_path": "models/silver/silver__swap_events.sql", "name": "silver__swap_events", "alias": "swap_events", "checksum": {"name": "sha256", "checksum": "5806ae859670f15824116aec472ad13227a7e8e462e40d99093f532fa699b7c4"}, "tags": [], "refs": [["bronze__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ASSET": {"name": "FROM_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_E8": {"name": "FROM_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET": {"name": "TO_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_E8": {"name": "TO_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_E8_MIN": {"name": "TO_E8_MIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_SLIP_BP": {"name": "SWAP_SLIP_BP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_E8": {"name": "LIQ_FEE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_IN_RUNE_E8": {"name": "LIQ_FEE_IN_RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_DIRECTION": {"name": "_DIRECTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__swap_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.566185, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  from_asset,\n  from_e8,\n  to_asset,\n  to_e8,\n  memo,\n  pool AS pool_name,\n  to_e8_min,\n  swap_slip_bp,\n  liq_fee_e8,\n  liq_fee_in_rune_e8,\n  _DIRECTION,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.swap_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, to_addr, from_addr, from_asset, from_e8, to_asset, to_e8, memo, pool, _direction\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.swap_events"}, "model.thorchain_models.silver__rewards_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  bond_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__rewards_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__rewards_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__rewards_events"], "unique_id": "model.thorchain_models.silver__rewards_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__rewards_events.sql", "original_file_path": "models/silver/silver__rewards_events.sql", "name": "silver__rewards_events", "alias": "rewards_events", "checksum": {"name": "sha256", "checksum": "402813fffc70cde231ef36931c8114495cdb36844390fb05432d29a141608974"}, "tags": [], "refs": [["bronze__rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BOND_E8": {"name": "BOND_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__rewards_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.559828, "compiled_sql": "\n\nSELECT\n  bond_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.rewards_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.rewards_events"}, "model.thorchain_models.silver__pool_block_fees": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge'\n) }}\n\nWITH all_block_id AS (\n\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\ntotal_pool_rewards_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(rune_e8) AS rewards\n  FROM\n    {{ ref('silver__rewards_event_entries') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\ntotal_liquidity_fees_rune_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(liq_fee_in_rune_e8) AS total_liquidity_fees_rune\n  FROM\n    {{ ref('silver__swap_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY,\n  pool_name\n),\nliquidity_fees_asset_tbl AS (\n  SELECT\n    DATE(block_timestamp) AS DAY,\n    pool_name,\n    SUM(asset_fee) AS assetLiquidityFees\n  FROM\n    (\n      SELECT\n        b.block_timestamp,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref('silver__swap_events') }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nGROUP BY\n  DAY,\n  pool_name\n),\nliquidity_fees_rune_tbl AS (\n  SELECT\n    DATE(block_timestamp) AS DAY,\n    pool_name,\n    SUM(asset_fee) AS runeLiquidityFees\n  FROM\n    (\n      SELECT\n        b.block_timestamp,\n        pool_name,\n        CASE\n          WHEN to_asset <> 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        {{ ref('silver__swap_events') }} A\n        JOIN {{ ref('silver__block_log') }}\n        b\n        ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nGROUP BY\n  DAY,\n  pool_name\n)\nSELECT\n  A.day,\n  A.pool_name,\n  COALESCE((rewards / power(10, 8)), 0) AS rewards,\n  COALESCE((total_liquidity_fees_rune / power(10, 8)), 0) AS total_liquidity_fees_rune,\n  COALESCE((assetLiquidityFees / power(10, 8)), 0) AS asset_liquidity_fees,\n  COALESCE((runeLiquidityFees / power(10, 8)), 0) AS rune_liquidity_fees,\n  (\n    (COALESCE(total_liquidity_fees_rune, 0) + COALESCE(rewards, 0)) / power(\n      10,\n      8\n    )\n  ) AS earnings,\n  concat_ws(\n    '-',\n    A.day,\n    A.pool_name\n  ) AS _unique_key,\n  _inserted_timestamp\nFROM\n  all_block_id A\n  LEFT JOIN total_pool_rewards_tbl b\n  ON A.day = b.day\n  AND A.pool_name = b.pool_name\n  LEFT JOIN total_liquidity_fees_rune_tbl C\n  ON A.day = C.day\n  AND A.pool_name = C.pool_name\n  LEFT JOIN liquidity_fees_asset_tbl d\n  ON A.day = d.day\n  AND A.pool_name = d.pool_name\n  LEFT JOIN liquidity_fees_rune_tbl e\n  ON A.day = e.day\n  AND A.pool_name = e.pool_name", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__rewards_event_entries", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__pool_block_fees"], "unique_id": "model.thorchain_models.silver__pool_block_fees", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__pool_block_fees.sql", "original_file_path": "models/silver/silver__pool_block_fees.sql", "name": "silver__pool_block_fees", "alias": "pool_block_fees", "checksum": {"name": "sha256", "checksum": "9b42cc55345ed3c9623d1c85d2f7832c6a3ea9f42fa6c2cbb5140b9dec828195"}, "tags": [], "refs": [["silver__block_pool_depths"], ["silver__block_log"], ["silver__rewards_event_entries"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS": {"name": "REWARDS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_LIQUIDITY_FEES_RUNE": {"name": "TOTAL_LIQUIDITY_FEES_RUNE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_LIQUIDITY_FEES": {"name": "ASSET_LIQUIDITY_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_LIQUIDITY_FEES": {"name": "RUNE_LIQUIDITY_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__pool_block_fees.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge"}, "created_at": 1665176151.5486112, "compiled_sql": "\n\nWITH all_block_id AS (\n\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.block_pool_depths A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_fees\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  pool_name\n),\ntotal_pool_rewards_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(rune_e8) AS rewards\n  FROM\n    THORCHAIN_DEV.silver.rewards_event_entries A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_fees\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  pool_name\n),\ntotal_liquidity_fees_rune_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    pool_name,\n    SUM(liq_fee_in_rune_e8) AS total_liquidity_fees_rune\n  FROM\n    THORCHAIN_DEV.silver.swap_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_fees\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY,\n  pool_name\n),\nliquidity_fees_asset_tbl AS (\n  SELECT\n    DATE(block_timestamp) AS DAY,\n    pool_name,\n    SUM(asset_fee) AS assetLiquidityFees\n  FROM\n    (\n      SELECT\n        b.block_timestamp,\n        pool_name,\n        CASE\n          WHEN to_asset = 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        THORCHAIN_DEV.silver.swap_events A\n        JOIN THORCHAIN_DEV.silver.block_log\n        b\n        ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_fees\n  ) - INTERVAL '48 HOURS'\n\n)\nGROUP BY\n  DAY,\n  pool_name\n),\nliquidity_fees_rune_tbl AS (\n  SELECT\n    DATE(block_timestamp) AS DAY,\n    pool_name,\n    SUM(asset_fee) AS runeLiquidityFees\n  FROM\n    (\n      SELECT\n        b.block_timestamp,\n        pool_name,\n        CASE\n          WHEN to_asset <> 'THOR.RUNE' THEN 0\n          ELSE liq_fee_e8\n        END AS asset_fee\n      FROM\n        THORCHAIN_DEV.silver.swap_events A\n        JOIN THORCHAIN_DEV.silver.block_log\n        b\n        ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_fees\n  ) - INTERVAL '48 HOURS'\n\n)\nGROUP BY\n  DAY,\n  pool_name\n)\nSELECT\n  A.day,\n  A.pool_name,\n  COALESCE((rewards / power(10, 8)), 0) AS rewards,\n  COALESCE((total_liquidity_fees_rune / power(10, 8)), 0) AS total_liquidity_fees_rune,\n  COALESCE((assetLiquidityFees / power(10, 8)), 0) AS asset_liquidity_fees,\n  COALESCE((runeLiquidityFees / power(10, 8)), 0) AS rune_liquidity_fees,\n  (\n    (COALESCE(total_liquidity_fees_rune, 0) + COALESCE(rewards, 0)) / power(\n      10,\n      8\n    )\n  ) AS earnings,\n  concat_ws(\n    '-',\n    A.day,\n    A.pool_name\n  ) AS _unique_key,\n  _inserted_timestamp\nFROM\n  all_block_id A\n  LEFT JOIN total_pool_rewards_tbl b\n  ON A.day = b.day\n  AND A.pool_name = b.pool_name\n  LEFT JOIN total_liquidity_fees_rune_tbl C\n  ON A.day = C.day\n  AND A.pool_name = C.pool_name\n  LEFT JOIN liquidity_fees_asset_tbl d\n  ON A.day = d.day\n  AND A.pool_name = d.pool_name\n  LEFT JOIN liquidity_fees_rune_tbl e\n  ON A.day = e.day\n  AND A.pool_name = e.pool_name", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.pool_block_fees"}, "model.thorchain_models.silver__switch_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  burn_asset,\n  burn_e8,\n  mint_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__switch_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY tx, from_addr, to_addr, burn_asset, burn_e8, mint_e8, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__switch_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__switch_events"], "unique_id": "model.thorchain_models.silver__switch_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__switch_events.sql", "original_file_path": "models/silver/silver__switch_events.sql", "name": "silver__switch_events", "alias": "switch_events", "checksum": {"name": "sha256", "checksum": "c36cb34199d012b38f6b8f23f543e8a29e70c18d77b90510f2d5ffc1a39dd9d6"}, "tags": [], "refs": [["bronze__switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BURN_ASSET": {"name": "BURN_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BURN_E8": {"name": "BURN_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_E8": {"name": "MINT_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__switch_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__switch_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.5422752, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  burn_asset,\n  burn_e8,\n  mint_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.switch_events\n  qualify(ROW_NUMBER() over(PARTITION BY tx, from_addr, to_addr, burn_asset, burn_e8, mint_e8, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.switch_events"}, "model.thorchain_models.silver__fee_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  asset,\n  asset_e8,\n  pool_deduct,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__fee_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, asset_e8, pool_deduct, block_timestamp, tx\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__fee_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__fee_events"], "unique_id": "model.thorchain_models.silver__fee_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__fee_events.sql", "original_file_path": "models/silver/silver__fee_events.sql", "name": "silver__fee_events", "alias": "fee_events", "checksum": {"name": "sha256", "checksum": "95d4de80f8ae77557a1e7c18726d3b6ba70cb70308c4d5abb407db8374959278"}, "tags": [], "refs": [["bronze__fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_DEDUCT": {"name": "POOL_DEDUCT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__fee_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__fee_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.60885, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  asset,\n  asset_e8,\n  pool_deduct,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.fee_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, asset_e8, pool_deduct, block_timestamp, tx\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.fee_events"}, "model.thorchain_models.silver__add_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  rune_e8,\n  pool AS pool_name,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__add_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, memo, pool, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__add_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__add_events"], "unique_id": "model.thorchain_models.silver__add_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__add_events.sql", "original_file_path": "models/silver/silver__add_events.sql", "name": "silver__add_events", "alias": "add_events", "checksum": {"name": "sha256", "checksum": "75cb26ea85f17601432ab7eacc7d00f4177c94e38796ba46e2c8b3e2ab3bdde0"}, "tags": [], "refs": [["bronze__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__add_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.632729, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  rune_e8,\n  pool AS pool_name,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.add_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, memo, pool, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.add_events"}, "model.thorchain_models.silver__unstake_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx as tx_id,\n  chain as blockchain,\n  from_addr as from_address,\n  to_addr as to_address,\n  asset,\n  asset_e8,\n  emit_asset_e8,\n  emit_rune_e8,\n  memo,\n  pool as pool_name,\n  stake_units,\n  basis_points,\n  asymmetry,\n  imp_loss_protection_e8,\n  _emit_asset_in_rune_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\n\nFROM\n  {{ ref(\n    'bronze__unstake_events'\n  ) }}\n  e qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, memo, stake_units, basis_points, block_timestamp, pool_name, asset, from_addr, to_addr\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__unstake_events"], "unique_id": "model.thorchain_models.silver__unstake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__unstake_events.sql", "original_file_path": "models/silver/silver__unstake_events.sql", "name": "silver__unstake_events", "alias": "unstake_events", "checksum": {"name": "sha256", "checksum": "53e6b4daf16b5532a485abbc009880574ff99867f4b7a05b8582c8329564cdef"}, "tags": [], "refs": [["bronze__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {"TX_ID": {"name": "TX_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMIT_ASSET_E8": {"name": "EMIT_ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMIT_RUNE_E8": {"name": "EMIT_RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BASIS_POINTS": {"name": "BASIS_POINTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASYMMETRY": {"name": "ASYMMETRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMP_LOSS_PROTECTION_E8": {"name": "IMP_LOSS_PROTECTION_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_EMIT_ASSET_IN_RUNE_E8": {"name": "_EMIT_ASSET_IN_RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__unstake_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.615618, "compiled_sql": "\n\nSELECT\n  tx as tx_id,\n  chain as blockchain,\n  from_addr as from_address,\n  to_addr as to_address,\n  asset,\n  asset_e8,\n  emit_asset_e8,\n  emit_rune_e8,\n  memo,\n  pool as pool_name,\n  stake_units,\n  basis_points,\n  asymmetry,\n  imp_loss_protection_e8,\n  _emit_asset_in_rune_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\n\nFROM\n  THORCHAIN_DEV.bronze.unstake_events\n  e qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, memo, stake_units, basis_points, block_timestamp, pool_name, asset, from_addr, to_addr\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.unstake_events"}, "model.thorchain_models.silver__pool_balance_change_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  rune_amt AS rune_amount,\n  rune_add,\n  asset_amt AS asset_amount,\n  asset_add,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__pool_balance_change_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, reason, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__pool_balance_change_events"], "unique_id": "model.thorchain_models.silver__pool_balance_change_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__pool_balance_change_events.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.sql", "name": "silver__pool_balance_change_events", "alias": "pool_balance_change_events", "checksum": {"name": "sha256", "checksum": "85e1602838100aa828c75ca0a683cdf5e10bb20778fd69d9eb0a84032ff46d03"}, "tags": [], "refs": [["bronze__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_ADD": {"name": "RUNE_ADD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADD": {"name": "ASSET_ADD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__pool_balance_change_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.654279, "compiled_sql": "\n\nSELECT\n  asset,\n  rune_amt AS rune_amount,\n  rune_add,\n  asset_amt AS asset_amount,\n  asset_add,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.pool_balance_change_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, reason, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.pool_balance_change_events"}, "model.thorchain_models.silver__block_rewards": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'day',\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH all_block_id AS (\n\n  SELECT\n    block_timestamp,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }}\n\n{% if is_incremental() %}\nWHERE\n  TO_TIMESTAMP(\n    block_timestamp / 1000000000\n  ) :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  block_timestamp\n),\navg_nodes_tbl AS (\n  SELECT\n    block_timestamp,\n    SUM(\n      CASE\n        WHEN current_status = 'Active' THEN 1\n        WHEN former_status = 'Active' THEN -1\n        ELSE 0\n      END\n    ) AS delta\n  FROM\n    {{ ref('silver__update_node_account_status_events') }}\n\n{% if is_incremental() %}\nWHERE\n  TO_TIMESTAMP(\n    block_timestamp / 1000000000\n  ) :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  block_timestamp\n),\nall_block_with_nodes AS (\n  SELECT\n    all_block_id.block_timestamp,\n    delta,\n    SUM(delta) over (\n      ORDER BY\n        all_block_id.block_timestamp ASC\n    ) AS avg_nodes,\n    _inserted_timestamp AS _inserted_timestamp\n  FROM\n    all_block_id\n    LEFT JOIN avg_nodes_tbl\n    ON all_block_id.block_timestamp = avg_nodes_tbl.block_timestamp\n),\nall_block_with_nodes_date AS (\n  SELECT\n    b.block_timestamp :: DATE AS DAY,\n    AVG(avg_nodes) AS avg_nodes,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    all_block_with_nodes A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY\n),\nliquidity_fee_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    COALESCE(SUM(liq_fee_in_rune_e8), 0) AS liquidity_fee\n  FROM\n    {{ ref('silver__swap_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  1\n),\nbond_earnings_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    SUM(bond_e8) AS bond_earnings\n  FROM\n    {{ ref('silver__rewards_events') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY\n),\ntotal_pool_rewards_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    SUM(rune_e8) AS total_pool_rewards\n  FROM\n    {{ ref('silver__rewards_event_entries') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\nGROUP BY\n  DAY\n)\nSELECT\n  all_block_with_nodes_date.day,\n  COALESCE((liquidity_fee_tbl.liquidity_fee / power(10, 8)), 0) AS liquidity_fee,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        bond_earnings_tbl.bond_earnings,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS block_rewards,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        liquidity_fee_tbl.liquidity_fee,\n        0\n      ) + COALESCE(\n        bond_earnings_tbl.bond_earnings,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS earnings,\n  COALESCE((bond_earnings_tbl.bond_earnings / power(10, 8)), 0) AS bonding_earnings,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        liquidity_fee_tbl.liquidity_fee,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS liquidity_earnings,\n  all_block_with_nodes_date.avg_nodes + 2 AS avg_node_count,\n  all_block_with_nodes_date._inserted_timestamp\nFROM\n  all_block_with_nodes_date\n  LEFT JOIN liquidity_fee_tbl\n  ON all_block_with_nodes_date.day = liquidity_fee_tbl.day\n  LEFT JOIN total_pool_rewards_tbl\n  ON all_block_with_nodes_date.day = total_pool_rewards_tbl.day\n  LEFT JOIN bond_earnings_tbl\n  ON all_block_with_nodes_date.day = bond_earnings_tbl.day", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__update_node_account_status_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__rewards_events", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__rewards_event_entries", "model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "day", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__block_rewards"], "unique_id": "model.thorchain_models.silver__block_rewards", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__block_rewards.sql", "original_file_path": "models/silver/silver__block_rewards.sql", "name": "silver__block_rewards", "alias": "block_rewards", "checksum": {"name": "sha256", "checksum": "6c27462ac686a32987194fe83840878fa5eb37c5c3de5d8e2e3e77d6da7d6321"}, "tags": [], "refs": [["silver__block_pool_depths"], ["silver__update_node_account_status_events"], ["silver__block_log"], ["silver__swap_events"], ["silver__block_log"], ["silver__rewards_events"], ["silver__block_log"], ["silver__rewards_event_entries"], ["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"DAY": {"name": "DAY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_FEE": {"name": "LIQUIDITY_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BONDING_EARNINGS": {"name": "BONDING_EARNINGS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_EARNINGS": {"name": "LIQUIDITY_EARNINGS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__block_rewards.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "day", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.6432798, "compiled_sql": "\n\nWITH all_block_id AS (\n\n  SELECT\n    block_timestamp,\n    MAX(_inserted_timestamp) AS _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.block_pool_depths\n\n\nWHERE\n  TO_TIMESTAMP(\n    block_timestamp / 1000000000\n  ) :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.block_rewards\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  block_timestamp\n),\navg_nodes_tbl AS (\n  SELECT\n    block_timestamp,\n    SUM(\n      CASE\n        WHEN current_status = 'Active' THEN 1\n        WHEN former_status = 'Active' THEN -1\n        ELSE 0\n      END\n    ) AS delta\n  FROM\n    THORCHAIN_DEV.silver.update_node_account_status_events\n\n\nWHERE\n  TO_TIMESTAMP(\n    block_timestamp / 1000000000\n  ) :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.block_rewards\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  block_timestamp\n),\nall_block_with_nodes AS (\n  SELECT\n    all_block_id.block_timestamp,\n    delta,\n    SUM(delta) over (\n      ORDER BY\n        all_block_id.block_timestamp ASC\n    ) AS avg_nodes,\n    _inserted_timestamp AS _inserted_timestamp\n  FROM\n    all_block_id\n    LEFT JOIN avg_nodes_tbl\n    ON all_block_id.block_timestamp = avg_nodes_tbl.block_timestamp\n),\nall_block_with_nodes_date AS (\n  SELECT\n    b.block_timestamp :: DATE AS DAY,\n    AVG(avg_nodes) AS avg_nodes,\n    MAX(\n      A._inserted_timestamp\n    ) AS _inserted_timestamp\n  FROM\n    all_block_with_nodes A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n  GROUP BY\n    DAY\n),\nliquidity_fee_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    COALESCE(SUM(liq_fee_in_rune_e8), 0) AS liquidity_fee\n  FROM\n    THORCHAIN_DEV.silver.swap_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.block_rewards\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  1\n),\nbond_earnings_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    SUM(bond_e8) AS bond_earnings\n  FROM\n    THORCHAIN_DEV.silver.rewards_events A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.block_rewards\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY\n),\ntotal_pool_rewards_tbl AS (\n  SELECT\n    DATE(\n      b.block_timestamp\n    ) AS DAY,\n    SUM(rune_e8) AS total_pool_rewards\n  FROM\n    THORCHAIN_DEV.silver.rewards_event_entries A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.silver.block_rewards\n  ) - INTERVAL '48 HOURS'\n\nGROUP BY\n  DAY\n)\nSELECT\n  all_block_with_nodes_date.day,\n  COALESCE((liquidity_fee_tbl.liquidity_fee / power(10, 8)), 0) AS liquidity_fee,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        bond_earnings_tbl.bond_earnings,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS block_rewards,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        liquidity_fee_tbl.liquidity_fee,\n        0\n      ) + COALESCE(\n        bond_earnings_tbl.bond_earnings,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS earnings,\n  COALESCE((bond_earnings_tbl.bond_earnings / power(10, 8)), 0) AS bonding_earnings,\n  (\n    (\n      COALESCE(\n        total_pool_rewards_tbl.total_pool_rewards,\n        0\n      ) + COALESCE(\n        liquidity_fee_tbl.liquidity_fee,\n        0\n      )\n    )\n  ) / power(\n    10,\n    8\n  ) AS liquidity_earnings,\n  all_block_with_nodes_date.avg_nodes + 2 AS avg_node_count,\n  all_block_with_nodes_date._inserted_timestamp\nFROM\n  all_block_with_nodes_date\n  LEFT JOIN liquidity_fee_tbl\n  ON all_block_with_nodes_date.day = liquidity_fee_tbl.day\n  LEFT JOIN total_pool_rewards_tbl\n  ON all_block_with_nodes_date.day = total_pool_rewards_tbl.day\n  LEFT JOIN bond_earnings_tbl\n  ON all_block_with_nodes_date.day = bond_earnings_tbl.day", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.block_rewards"}, "model.thorchain_models.silver__errata_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  in_tx,\n  asset,\n  asset_e8,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__errata_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, in_tx, asset, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__errata_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__errata_events"], "unique_id": "model.thorchain_models.silver__errata_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__errata_events.sql", "original_file_path": "models/silver/silver__errata_events.sql", "name": "silver__errata_events", "alias": "errata_events", "checksum": {"name": "sha256", "checksum": "31587c12ace7266a0cc186b204ddce83edc9f2c6059b2e57d8466342dc97e47c"}, "tags": [], "refs": [["bronze__errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IN_TX": {"name": "IN_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__errata_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__errata_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.863807, "compiled_sql": "\n\nSELECT\n  in_tx,\n  asset,\n  asset_e8,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.errata_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, in_tx, asset, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.errata_events"}, "model.thorchain_models.silver__upgrades": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    {{ ref('silver__prices') }}\n  GROUP BY\n    block_id\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  tx_id,\n  from_address,\n  to_address,\n  burn_asset,\n  burn_e8 / pow(\n    10,\n    8\n  ) AS rune_amount,\n  burn_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS rune_amount_usd,\n  mint_e8 / pow(\n    10,\n    8\n  ) AS mint_amount,\n  mint_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS mint_amount_usd,\n  concat_ws(\n    '-',\n    tx_id,\n    se.block_timestamp,\n    from_address,\n    to_address,\n    burn_asset\n  ) AS _unique_key,\n  se._inserted_timestamp\nFROM\n  {{ ref('silver__switch_events') }}\n  se\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n{% if is_incremental() %}\nWHERE\n  se._inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__switch_events", "model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__upgrades"], "unique_id": "model.thorchain_models.silver__upgrades", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__upgrades.sql", "original_file_path": "models/silver/silver__upgrades.sql", "name": "silver__upgrades", "alias": "upgrades", "checksum": {"name": "sha256", "checksum": "4a1505b8039621ea97c730d72a82726891fc357504a607edaab65cdc12bbb67d"}, "tags": [], "refs": [["silver__prices"], ["silver__switch_events"], ["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BURN_ASSET": {"name": "BURN_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_AMOUNT": {"name": "MINT_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_AMOUNT_USD": {"name": "MINT_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__upgrades.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.871978, "compiled_sql": "\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    THORCHAIN_DEV.silver.prices\n  GROUP BY\n    block_id\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  tx_id,\n  from_address,\n  to_address,\n  burn_asset,\n  burn_e8 / pow(\n    10,\n    8\n  ) AS rune_amount,\n  burn_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS rune_amount_usd,\n  mint_e8 / pow(\n    10,\n    8\n  ) AS mint_amount,\n  mint_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS mint_amount_usd,\n  concat_ws(\n    '-',\n    tx_id,\n    se.block_timestamp,\n    from_address,\n    to_address,\n    burn_asset\n  ) AS _unique_key,\n  se._inserted_timestamp\nFROM\n  THORCHAIN_DEV.silver.switch_events\n  se\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON se.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n\nWHERE\n  se._inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.silver.upgrades\n  ) - INTERVAL '4 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.upgrades"}, "model.thorchain_models.silver__reserve_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  addr AS address,\n  e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__reserve_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, memo, addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__reserve_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__reserve_events"], "unique_id": "model.thorchain_models.silver__reserve_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__reserve_events.sql", "original_file_path": "models/silver/silver__reserve_events.sql", "name": "silver__reserve_events", "alias": "reserve_events", "checksum": {"name": "sha256", "checksum": "73c508496dd544d1fccee5caa68ac698437da752524d725bc33f90fe4841a490"}, "tags": [], "refs": [["bronze__reserve_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__reserve_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.639138, "compiled_sql": "\n\nSELECT\n  tx AS tx_id,\n  chain AS blockchain,\n  from_addr AS from_address,\n  to_addr AS to_address,\n  asset,\n  asset_e8,\n  memo,\n  addr AS address,\n  e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.reserve_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, tx, chain, from_addr, to_addr, asset, memo, addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.reserve_events"}, "model.thorchain_models.silver__set_node_keys_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_node_keys_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, node_addr, secp256k1, ed25519, block_timestamp, validator_consensus\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__set_node_keys_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__set_node_keys_events"], "unique_id": "model.thorchain_models.silver__set_node_keys_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__set_node_keys_events.sql", "original_file_path": "models/silver/silver__set_node_keys_events.sql", "name": "silver__set_node_keys_events", "alias": "set_node_keys_events", "checksum": {"name": "sha256", "checksum": "078b6c851f67350abbde9d9807d62d83da6de3202323cc8e4cca96bef8655cb5"}, "tags": [], "refs": [["bronze__set_node_keys_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__set_node_keys_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.640429, "compiled_sql": "\n\nSELECT\n  node_addr AS node_address,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.set_node_keys_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, node_addr, secp256k1, ed25519, block_timestamp, validator_consensus\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.set_node_keys_events"}, "model.thorchain_models.silver__block_log": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nWITH base AS (\n\n  SELECT\n    height,\n    TO_TIMESTAMP(\n      TIMESTAMP / 1000000000\n    ) AS block_timestamp,\n    TIMESTAMP,\n    HASH,\n    agg_state,\n    DATEADD(\n      ms,\n      __HEVO__LOADED_AT,\n      '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('bronze__block_log') }}\n    qualify(ROW_NUMBER() over(PARTITION BY height\n  ORDER BY\n    __HEVO__LOADED_AT DESC)) = 1\n)\nSELECT\n  height,\n  block_timestamp,\n  block_timestamp :: DATE AS block_date,\n  HOUR(block_timestamp) AS block_hour,\n  week(block_timestamp) AS block_week,\n  MONTH(block_timestamp) AS block_month,\n  quarter(block_timestamp) AS block_quarter,\n  YEAR(block_timestamp) AS block_year,\n  dayofmonth(block_timestamp) AS block_DAYOFMONTH,\n  dayofweek(block_timestamp) AS block_DAYOFWEEK,\n  dayofyear(block_timestamp) AS block_DAYOFYEAR,\n  TIMESTAMP,\n  HASH,\n  agg_state,\n  _INSERTED_TIMESTAMP\nFROM\n  base", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__block_log"], "unique_id": "model.thorchain_models.silver__block_log", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__block_log.sql", "original_file_path": "models/silver/silver__block_log.sql", "name": "silver__block_log", "alias": "block_log", "checksum": {"name": "sha256", "checksum": "e5cabedc3bc53e46f21a651fbbfee28e0fbba42013a01410ce8ee1b2ed375e9c"}, "tags": [], "refs": [["bronze__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"TIMESTAMP": {"name": "TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HEIGHT": {"name": "HEIGHT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__block_log.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_log.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.8879292, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    height,\n    TO_TIMESTAMP(\n      TIMESTAMP / 1000000000\n    ) AS block_timestamp,\n    TIMESTAMP,\n    HASH,\n    agg_state,\n    DATEADD(\n      ms,\n      __HEVO__LOADED_AT,\n      '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.bronze.block_log\n    qualify(ROW_NUMBER() over(PARTITION BY height\n  ORDER BY\n    __HEVO__LOADED_AT DESC)) = 1\n)\nSELECT\n  height,\n  block_timestamp,\n  block_timestamp :: DATE AS block_date,\n  HOUR(block_timestamp) AS block_hour,\n  week(block_timestamp) AS block_week,\n  MONTH(block_timestamp) AS block_month,\n  quarter(block_timestamp) AS block_quarter,\n  YEAR(block_timestamp) AS block_year,\n  dayofmonth(block_timestamp) AS block_DAYOFMONTH,\n  dayofweek(block_timestamp) AS block_DAYOFWEEK,\n  dayofyear(block_timestamp) AS block_DAYOFYEAR,\n  TIMESTAMP,\n  HASH,\n  agg_state,\n  _INSERTED_TIMESTAMP\nFROM\n  base", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.block_log"}, "model.thorchain_models.silver__stake_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset_tx AS asset_tx_id,\n  asset_chain AS asset_blockchain,\n  asset_addr AS asset_address,\n  asset_e8,\n  stake_units,\n  rune_tx AS rune_tx_id,\n  rune_addr AS rune_address,\n  rune_e8,\n  _ASSET_IN_RUNE_E8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__stake_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool, rune_tx, asset_chain, stake_units, rune_addr, asset_tx, asset_addr, block_timestamp\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__stake_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__stake_events"], "unique_id": "model.thorchain_models.silver__stake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__stake_events.sql", "original_file_path": "models/silver/silver__stake_events.sql", "name": "silver__stake_events", "alias": "stake_events", "checksum": {"name": "sha256", "checksum": "2ceeda77b5dbf77f750c38fc2b02295ae1138a7d08c9989812ce5ea3dc0884cf"}, "tags": [], "refs": [["bronze__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {"POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ASSET_IN_RUNE_E8": {"name": "_ASSET_IN_RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__stake_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.893989, "compiled_sql": "\n\nSELECT\n  pool AS pool_name,\n  asset_tx AS asset_tx_id,\n  asset_chain AS asset_blockchain,\n  asset_addr AS asset_address,\n  asset_e8,\n  stake_units,\n  rune_tx AS rune_tx_id,\n  rune_addr AS rune_address,\n  rune_e8,\n  _ASSET_IN_RUNE_E8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.stake_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool, rune_tx, asset_chain, stake_units, rune_addr, asset_tx, asset_addr, block_timestamp\nORDER BY\n  __HEVO__INGESTED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.stake_events"}, "model.thorchain_models.silver__rewards_event_entries": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__rewards_event_entries') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__rewards_event_entries"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__rewards_event_entries"], "unique_id": "model.thorchain_models.silver__rewards_event_entries", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__rewards_event_entries.sql", "original_file_path": "models/silver/silver__rewards_event_entries.sql", "name": "silver__rewards_event_entries", "alias": "rewards_event_entries", "checksum": {"name": "sha256", "checksum": "8f675887aed41a4d2ef7074d8efc75d883274a1817ee5d1a71676f83d023bceb"}, "tags": [], "refs": [["bronze__rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__rewards_event_entries.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_event_entries.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.9025128, "compiled_sql": "\n\nSELECT\n  pool AS pool_name,\n  rune_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.rewards_event_entries\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.rewards_event_entries"}, "model.thorchain_models.silver__set_ip_address_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  ip_addr,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_ip_address_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, ip_addr, block_timestamp, node_addr\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__set_ip_address_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__set_ip_address_events"], "unique_id": "model.thorchain_models.silver__set_ip_address_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__set_ip_address_events.sql", "original_file_path": "models/silver/silver__set_ip_address_events.sql", "name": "silver__set_ip_address_events", "alias": "set_ip_address_events", "checksum": {"name": "sha256", "checksum": "65acf1170a67cf8aa8add8de3894e5fd93f3e62bd8b44c399beb1940173bdcfe"}, "tags": [], "refs": [["bronze__set_ip_address_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__set_ip_address_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.644741, "compiled_sql": "\n\nSELECT\n  node_addr AS node_address,\n  ip_addr,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.set_ip_address_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, ip_addr, block_timestamp, node_addr\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.set_ip_address_events"}, "model.thorchain_models.silver__prices": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n-- block level prices by pool\n-- step 1 what is the USD pool with the highest balance (aka deepest pool)\nWITH blocks AS (\n\n  SELECT\n    height AS block_id,\n    b.block_timestamp,\n    pool_name,\n    rune_e8,\n    asset_e8\n  FROM\n    {{ ref('silver__block_pool_depths') }} A\n    JOIN {{ ref('silver__block_log') }}\n    b\n    ON A.block_timestamp = b.timestamp\n\n{% if is_incremental() %}\nWHERE\n  b.block_timestamp :: DATE >= CURRENT_DATE -2\n{% endif %}\n),\nmax_pool_blocks AS (\n  SELECT\n    MAX(block_id) AS max_block,\n    pool_name\n  FROM\n    blocks\n  WHERE\n    pool_name IN (\n      'BNB.USDT-6D8',\n      'BNB.BUSD-BD1',\n      'ETH.USDT-0XDAC17F958D2EE523A2206206994597C13D831EC7'\n    )\n  GROUP BY\n    pool_name\n),\nreference_pool AS (\n  SELECT\n    bpd.block_id,\n    block_timestamp,\n    bpd.pool_name,\n    rune_e8\n  FROM\n    blocks bpd\n    JOIN max_pool_blocks mpb\n    ON bpd.pool_name = mpb.pool_name\n    AND bpd.block_id = mpb.max_block\n  ORDER BY\n    rune_e8 DESC\n  LIMIT\n    1\n), -- step 2 use that pool to determine the price of rune\nrune_usd_max_tbl AS (\n  SELECT\n    block_timestamp,\n    block_id,\n    asset_e8 / rune_e8 AS rune_usd_max\n  FROM\n    blocks\n  WHERE\n    pool_name = (\n      SELECT\n        pool_name\n      FROM\n        reference_pool\n    )\n),\nrune_usd_sup_tbl AS (\n  SELECT\n    block_timestamp,\n    block_id,\n    AVG(rune_usd) AS rune_usd_sup\n  FROM\n    (\n      SELECT\n        block_timestamp,\n        block_id,\n        asset_e8 / rune_e8 AS rune_usd\n      FROM\n        blocks\n      WHERE\n        rune_e8 > 0\n        AND asset_e8 > 0\n    )\n  GROUP BY\n    block_timestamp,\n    block_id\n),\nrune_usd AS (\n  SELECT\n    block_timestamp,\n    block_id,\n    CASE\n      WHEN rune_usd_max IS NULL THEN LAG(rune_usd_max) ignore nulls over (\n        ORDER BY\n          block_id\n      )\n      ELSE rune_usd_max\n    END AS rune_usd\n  FROM\n    (\n      SELECT\n        COALESCE(\n          A.block_timestamp,\n          b.block_timestamp\n        ) AS block_timestamp,\n        COALESCE(\n          A.block_id,\n          b.block_id\n        ) AS block_id,\n        rune_usd_max\n      FROM\n        rune_usd_max_tbl A full\n        JOIN rune_usd_sup_tbl b\n        ON A.block_timestamp = b.block_timestamp\n        AND A.block_id = b.block_id\n    )\n) -- step 3 calculate the prices of assets by pool, in terms of tokens per tokens\n-- and in USD for both tokens\nSELECT\n  DISTINCT b.block_id,\n  b.block_timestamp,\n  COALESCE(\n    rune_e8 / asset_e8,\n    0\n  ) AS price_rune_asset,\n  COALESCE(\n    asset_e8 / rune_e8,\n    0\n  ) AS price_asset_rune,\n  COALESCE(rune_usd * (rune_e8 / asset_e8), 0) AS asset_usd,\n  COALESCE(\n    rune_usd,\n    0\n  ) AS rune_usd,\n  pool_name,\n  concat_ws(\n    '-',\n    b.block_id :: STRING,\n    pool_name :: STRING\n  ) AS _unique_key\nFROM\n  blocks b\n  JOIN rune_usd ru\n  ON b.block_id = ru.block_id\nWHERE\n  rune_e8 > 0\n  AND asset_e8 > 0", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__prices"], "unique_id": "model.thorchain_models.silver__prices", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__prices.sql", "original_file_path": "models/silver/silver__prices.sql", "name": "silver__prices", "alias": "prices", "checksum": {"name": "sha256", "checksum": "b5e3f12d45e417728c115c80e6f4ca96d3f4d11f0f64690c12d0a053ed12f49a"}, "tags": [], "refs": [["silver__block_pool_depths"], ["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_RUNE_ASSET": {"name": "PRICE_RUNE_ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_ASSET_RUNE": {"name": "PRICE_ASSET_RUNE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_USD": {"name": "ASSET_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_USD": {"name": "RUNE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__prices.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665176151.8059158, "compiled_sql": "\n-- block level prices by pool\n-- step 1 what is the USD pool with the highest balance (aka deepest pool)\nWITH blocks AS (\n\n  SELECT\n    height AS block_id,\n    b.block_timestamp,\n    pool_name,\n    rune_e8,\n    asset_e8\n  FROM\n    THORCHAIN_DEV.silver.block_pool_depths A\n    JOIN THORCHAIN_DEV.silver.block_log\n    b\n    ON A.block_timestamp = b.timestamp\n\n\nWHERE\n  b.block_timestamp :: DATE >= CURRENT_DATE -2\n\n),\nmax_pool_blocks AS (\n  SELECT\n    MAX(block_id) AS max_block,\n    pool_name\n  FROM\n    blocks\n  WHERE\n    pool_name IN (\n      'BNB.USDT-6D8',\n      'BNB.BUSD-BD1',\n      'ETH.USDT-0XDAC17F958D2EE523A2206206994597C13D831EC7'\n    )\n  GROUP BY\n    pool_name\n),\nreference_pool AS (\n  SELECT\n    bpd.block_id,\n    block_timestamp,\n    bpd.pool_name,\n    rune_e8\n  FROM\n    blocks bpd\n    JOIN max_pool_blocks mpb\n    ON bpd.pool_name = mpb.pool_name\n    AND bpd.block_id = mpb.max_block\n  ORDER BY\n    rune_e8 DESC\n  LIMIT\n    1\n), -- step 2 use that pool to determine the price of rune\nrune_usd_max_tbl AS (\n  SELECT\n    block_timestamp,\n    block_id,\n    asset_e8 / rune_e8 AS rune_usd_max\n  FROM\n    blocks\n  WHERE\n    pool_name = (\n      SELECT\n        pool_name\n      FROM\n        reference_pool\n    )\n),\nrune_usd_sup_tbl AS (\n  SELECT\n    block_timestamp,\n    block_id,\n    AVG(rune_usd) AS rune_usd_sup\n  FROM\n    (\n      SELECT\n        block_timestamp,\n        block_id,\n        asset_e8 / rune_e8 AS rune_usd\n      FROM\n        blocks\n      WHERE\n        rune_e8 > 0\n        AND asset_e8 > 0\n    )\n  GROUP BY\n    block_timestamp,\n    block_id\n),\nrune_usd AS (\n  SELECT\n    block_timestamp,\n    block_id,\n    CASE\n      WHEN rune_usd_max IS NULL THEN LAG(rune_usd_max) ignore nulls over (\n        ORDER BY\n          block_id\n      )\n      ELSE rune_usd_max\n    END AS rune_usd\n  FROM\n    (\n      SELECT\n        COALESCE(\n          A.block_timestamp,\n          b.block_timestamp\n        ) AS block_timestamp,\n        COALESCE(\n          A.block_id,\n          b.block_id\n        ) AS block_id,\n        rune_usd_max\n      FROM\n        rune_usd_max_tbl A full\n        JOIN rune_usd_sup_tbl b\n        ON A.block_timestamp = b.block_timestamp\n        AND A.block_id = b.block_id\n    )\n) -- step 3 calculate the prices of assets by pool, in terms of tokens per tokens\n-- and in USD for both tokens\nSELECT\n  DISTINCT b.block_id,\n  b.block_timestamp,\n  COALESCE(\n    rune_e8 / asset_e8,\n    0\n  ) AS price_rune_asset,\n  COALESCE(\n    asset_e8 / rune_e8,\n    0\n  ) AS price_asset_rune,\n  COALESCE(rune_usd * (rune_e8 / asset_e8), 0) AS asset_usd,\n  COALESCE(\n    rune_usd,\n    0\n  ) AS rune_usd,\n  pool_name,\n  concat_ws(\n    '-',\n    b.block_id :: STRING,\n    pool_name :: STRING\n  ) AS _unique_key\nFROM\n  blocks b\n  JOIN rune_usd ru\n  ON b.block_id = ru.block_id\nWHERE\n  rune_e8 > 0\n  AND asset_e8 > 0", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.prices"}, "model.thorchain_models.silver__total_block_rewards": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"_unique_key\",\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    {{ ref('silver__prices') }}\n  GROUP BY\n    block_id\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  ree.pool_name AS reward_entity,\n  COALESCE(rune_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(rune_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  concat_ws(\n    '-',\n    b.height,\n    reward_entity\n  ) AS _unique_key,\n  ree._inserted_timestamp\nFROM\n  {{ ref('silver__rewards_event_entries') }}\n  ree\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON ree.block_timestamp = b.timestamp\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON b.height = p.block_id\n  AND ree.pool_name = p.pool_name\n\n{% if is_incremental() %}\nWHERE\n  ree._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}\nUNION\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  'bond_holders' AS reward_entity,\n  bond_e8 / pow(\n    10,\n    8\n  ) AS rune_amount,\n  bond_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS rune_amount_usd,\n  concat_ws(\n    '-',\n    b.height,\n    reward_entity\n  ) AS _unique_key,\n  re._inserted_timestamp\nFROM\n  {{ ref('silver__rewards_events') }}\n  re\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON re.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n{% if is_incremental() %}\nWHERE\n  re._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__rewards_event_entries", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__rewards_events", "model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__total_block_rewards"], "unique_id": "model.thorchain_models.silver__total_block_rewards", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__total_block_rewards.sql", "original_file_path": "models/silver/silver__total_block_rewards.sql", "name": "silver__total_block_rewards", "alias": "total_block_rewards", "checksum": {"name": "sha256", "checksum": "06f9d03eeae63db7be2df2c6268331e93ac2623dbb9e10fea4ad782ba909590f"}, "tags": [], "refs": [["silver__prices"], ["silver__rewards_event_entries"], ["silver__block_log"], ["silver__prices"], ["silver__rewards_events"], ["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARD_ENTITY": {"name": "REWARD_ENTITY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__total_block_rewards.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.826685, "compiled_sql": "\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    THORCHAIN_DEV.silver.prices\n  GROUP BY\n    block_id\n)\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  ree.pool_name AS reward_entity,\n  COALESCE(rune_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(rune_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  concat_ws(\n    '-',\n    b.height,\n    reward_entity\n  ) AS _unique_key,\n  ree._inserted_timestamp\nFROM\n  THORCHAIN_DEV.silver.rewards_event_entries\n  ree\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON ree.block_timestamp = b.timestamp\n  LEFT JOIN THORCHAIN_DEV.silver.prices\n  p\n  ON b.height = p.block_id\n  AND ree.pool_name = p.pool_name\n\n\nWHERE\n  ree._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      THORCHAIN_DEV.silver.total_block_rewards\n  ) - INTERVAL '4 HOURS'\n\nUNION\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  'bond_holders' AS reward_entity,\n  bond_e8 / pow(\n    10,\n    8\n  ) AS rune_amount,\n  bond_e8 / pow(\n    10,\n    8\n  ) * rune_usd AS rune_amount_usd,\n  concat_ws(\n    '-',\n    b.height,\n    reward_entity\n  ) AS _unique_key,\n  re._inserted_timestamp\nFROM\n  THORCHAIN_DEV.silver.rewards_events\n  re\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON re.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.height = p.block_id\n\n\nWHERE\n  re._INSERTED_TIMESTAMP :: DATE >= (\n    SELECT\n      MAX(\n        _INSERTED_TIMESTAMP\n      )\n    FROM\n      THORCHAIN_DEV.silver.total_block_rewards\n  ) - INTERVAL '4 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.total_block_rewards"}, "model.thorchain_models.silver__pending_liquidity_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset_tx AS asset_tx_id,\n  asset_chain AS asset_blockchain,\n  asset_addr AS asset_address,\n  asset_e8,\n  rune_tx AS rune_tx_id,\n  rune_addr AS rune_address,\n  rune_e8,\n  pending_type,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__pending_liquidity_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool, asset_tx, asset_chain, asset_addr, rune_tx, rune_addr, pending_type, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__pending_liquidity_events"], "unique_id": "model.thorchain_models.silver__pending_liquidity_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__pending_liquidity_events.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.sql", "name": "silver__pending_liquidity_events", "alias": "pending_liquidity_events", "checksum": {"name": "sha256", "checksum": "4505b97816b098e8c0555e730b5b8517583bdbd6caa68b0dda063e3dcd75e66d"}, "tags": [], "refs": [["bronze__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {"POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_ADDRESS": {"name": "RUNE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PENDING_TYPE": {"name": "PENDING_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__pending_liquidity_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.81757, "compiled_sql": "\n\nSELECT\n  pool AS pool_name,\n  asset_tx AS asset_tx_id,\n  asset_chain AS asset_blockchain,\n  asset_addr AS asset_address,\n  asset_e8,\n  rune_tx AS rune_tx_id,\n  rune_addr AS rune_address,\n  rune_e8,\n  pending_type,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.pending_liquidity_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, pool, asset_tx, asset_chain, asset_addr, rune_tx, rune_addr, pending_type, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.pending_liquidity_events"}, "model.thorchain_models.silver__slash_points": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_address,\n  slash_points,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__slash_points') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__slash_points"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__slash_points"], "unique_id": "model.thorchain_models.silver__slash_points", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__slash_points.sql", "original_file_path": "models/silver/silver__slash_points.sql", "name": "silver__slash_points", "alias": "slash_points", "checksum": {"name": "sha256", "checksum": "f820b8bf33bcd9bc309b5d270cc54fa13c9266f9249eaac0b81ed0fd9c00cf33"}, "tags": [], "refs": [["bronze__slash_points"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__slash_points.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.654216, "compiled_sql": "\n\nSELECT\n  node_address,\n  slash_points,\n  reason,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.slash_points", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.slash_points"}, "model.thorchain_models.silver__gas_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  asset_e8,\n  rune_e8,\n  tx_count,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__gas_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__gas_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__gas_events"], "unique_id": "model.thorchain_models.silver__gas_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__gas_events.sql", "original_file_path": "models/silver/silver__gas_events.sql", "name": "silver__gas_events", "alias": "gas_events", "checksum": {"name": "sha256", "checksum": "58242ff88a18e0e9e5079f28aef97c0e43b8ac56717420dd1c3d17cbc59f6671"}, "tags": [], "refs": [["bronze__gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__gas_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__gas_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.8373818, "compiled_sql": "\n\nSELECT\n  asset,\n  asset_e8,\n  rune_e8,\n  tx_count,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.gas_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.gas_events"}, "model.thorchain_models.silver__pool_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  asset,\n  status,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__pool_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, status, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__pool_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__pool_events"], "unique_id": "model.thorchain_models.silver__pool_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__pool_events.sql", "original_file_path": "models/silver/silver__pool_events.sql", "name": "silver__pool_events", "alias": "pool_events", "checksum": {"name": "sha256", "checksum": "a6b554e861b3435d2881cd34b9121f1d9a05752f5d0eac1ee98a105228003865"}, "tags": [], "refs": [["bronze__pool_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.656281, "compiled_sql": "\n\nSELECT\n  asset,\n  status,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.pool_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, asset, status, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.pool_events"}, "model.thorchain_models.silver__set_version_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  version,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__set_version_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, node_addr, block_timestamp, version\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__set_version_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__set_version_events"], "unique_id": "model.thorchain_models.silver__set_version_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__set_version_events.sql", "original_file_path": "models/silver/silver__set_version_events.sql", "name": "silver__set_version_events", "alias": "set_version_events", "checksum": {"name": "sha256", "checksum": "fae5bde92fba5d0da7db684fd77d49b168d21ad14f91332b237dcb11ae22c742"}, "tags": [], "refs": [["bronze__set_version_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__set_version_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.657262, "compiled_sql": "\n\nSELECT\n  node_addr AS node_address,\n  version,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.set_version_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, node_addr, block_timestamp, version\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.set_version_events"}, "model.thorchain_models.silver__active_vault_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__active_vault_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, add_asgard_addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__active_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__active_vault_events"], "unique_id": "model.thorchain_models.silver__active_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__active_vault_events.sql", "original_file_path": "models/silver/silver__active_vault_events.sql", "name": "silver__active_vault_events", "alias": "active_vault_events", "checksum": {"name": "sha256", "checksum": "ba484da5a473407fa61235bc89eaa9f0906a97a07744eff26851f7762eecd1a3"}, "tags": [], "refs": [["bronze__active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASGARD_ADDR": {"name": "ADD_ASGARD_ADDR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__active_vault_events.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__active_vault_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176151.8587189, "compiled_sql": "\n\nSELECT\n  add_asgard_addr,\n  event_id,\n  block_timestamp,\n  __HEVO_XMIN,\n  __HEVO__DATABASE_NAME,\n  __HEVO__SCHEMA_NAME,\n  __HEVO__INGESTED_AT,\n  __HEVO__LOADED_AT,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.active_vault_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, add_asgard_addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.active_vault_events"}, "model.thorchain_models.silver__slash_amounts": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  pool AS pool_name,\n  asset,\n  asset_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__slash_amounts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__slash_amounts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__slash_amounts"], "unique_id": "model.thorchain_models.silver__slash_amounts", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__slash_amounts.sql", "original_file_path": "models/silver/silver__slash_amounts.sql", "name": "silver__slash_amounts", "alias": "slash_amounts", "checksum": {"name": "sha256", "checksum": "cd4a26016f2663e317bc879d680fe2d3979a1ab7cb355b940b5bdf4b31aece70"}, "tags": [], "refs": [["bronze__slash_amounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__slash_amounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.659327, "compiled_sql": "\n\nSELECT\n  pool AS pool_name,\n  asset,\n  asset_e8,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.slash_amounts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.slash_amounts"}, "model.thorchain_models.silver__pool_block_balances": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = '_unique_key',\n  incremental_strategy = 'merge',\n  cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  bpd.pool_name,\n  COALESCE(rune_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(rune_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  COALESCE(asset_e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(asset_e8 / pow(10, 8) * asset_usd, 0) AS asset_amount_usd,\n  COALESCE(synth_e8 / pow(10, 8), 0) AS synth_amount,\n  COALESCE(synth_e8 / pow(10, 8) * asset_usd, 0) AS synth_amount_usd,\n  concat_ws(\n    '-',\n    bpd.block_timestamp,\n    bpd.pool_name\n  ) AS _unique_key,\n  bpd._inserted_timestamp\nFROM\n  {{ ref('silver__block_pool_depths') }}\n  bpd\n  JOIN {{ ref('silver__block_log') }}\n  b\n  ON bpd.block_timestamp = b.timestamp\n  LEFT JOIN {{ ref('silver__prices') }}\n  p\n  ON b.height = p.block_id\n  AND bpd.pool_name = p.pool_name\n\n{% if is_incremental() %}\nWHERE\n  bpd._inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["_inserted_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__pool_block_balances"], "unique_id": "model.thorchain_models.silver__pool_block_balances", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__pool_block_balances.sql", "original_file_path": "models/silver/silver__pool_block_balances.sql", "name": "silver__pool_block_balances", "alias": "pool_block_balances", "checksum": {"name": "sha256", "checksum": "1d7c9016054642ce6da6a8d9d909cf189b374fedabd23636f8e0a270f7cc20d2"}, "tags": [], "refs": [["silver__block_pool_depths"], ["silver__block_log"], ["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT_USD": {"name": "ASSET_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYNTH_AMOUNT": {"name": "SYNTH_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYNTH_AMOUNT_USD": {"name": "SYNTH_AMOUNT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/silver/silver__pool_block_balances.yml", "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "merge", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1665176151.8455749, "compiled_sql": "\n\nSELECT\n  b.block_timestamp,\n  b.height AS block_id,\n  bpd.pool_name,\n  COALESCE(rune_e8 / pow(10, 8), 0) AS rune_amount,\n  COALESCE(rune_e8 / pow(10, 8) * rune_usd, 0) AS rune_amount_usd,\n  COALESCE(asset_e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(asset_e8 / pow(10, 8) * asset_usd, 0) AS asset_amount_usd,\n  COALESCE(synth_e8 / pow(10, 8), 0) AS synth_amount,\n  COALESCE(synth_e8 / pow(10, 8) * asset_usd, 0) AS synth_amount_usd,\n  concat_ws(\n    '-',\n    bpd.block_timestamp,\n    bpd.pool_name\n  ) AS _unique_key,\n  bpd._inserted_timestamp\nFROM\n  THORCHAIN_DEV.silver.block_pool_depths\n  bpd\n  JOIN THORCHAIN_DEV.silver.block_log\n  b\n  ON bpd.block_timestamp = b.timestamp\n  LEFT JOIN THORCHAIN_DEV.silver.prices\n  p\n  ON b.height = p.block_id\n  AND bpd.pool_name = p.pool_name\n\n\nWHERE\n  bpd._inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.silver.pool_block_balances\n  ) - INTERVAL '4 HOURS'\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.pool_block_balances"}, "model.thorchain_models.silver__constants": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  C.key,\n  C.value\nFROM\n  {{ ref('bronze__constants') }} C", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__constants"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__constants"], "unique_id": "model.thorchain_models.silver__constants", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__constants.sql", "original_file_path": "models/silver/silver__constants.sql", "name": "silver__constants", "alias": "constants", "checksum": {"name": "sha256", "checksum": "b941119e69dac980229c5252f84548208b0474559d40e19d965af5a2199ca648"}, "tags": [], "refs": [["bronze__constants"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__constants.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.66397, "compiled_sql": "\n\nSELECT\n  C.key,\n  C.value\nFROM\n  THORCHAIN_DEV.bronze.constants C", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.constants"}, "model.thorchain_models.silver__new_node_events": {"raw_sql": "{{ config(\n  materialized = 'view'\n) }}\n\nSELECT\n  node_addr AS node_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  {{ ref('bronze__new_node_events') }}\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, node_addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.bronze__new_node_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "silver", "fqn": ["thorchain_models", "silver", "silver__new_node_events"], "unique_id": "model.thorchain_models.silver__new_node_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "silver/silver__new_node_events.sql", "original_file_path": "models/silver/silver__new_node_events.sql", "name": "silver__new_node_events", "alias": "new_node_events", "checksum": {"name": "sha256", "checksum": "2160fb4a734832db67cd06d1c8116ffda6efd2d2faa160823557daa6d5b3d17a"}, "tags": [], "refs": [["bronze__new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__new_node_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665176150.6649249, "compiled_sql": "\n\nSELECT\n  node_addr AS node_address,\n  event_id,\n  block_timestamp,\n  DATEADD(\n    ms,\n    __HEVO__LOADED_AT,\n    '1970-01-01'\n  ) AS _INSERTED_TIMESTAMP\nFROM\n  THORCHAIN_DEV.bronze.new_node_events\n  qualify(ROW_NUMBER() over(PARTITION BY event_id, node_addr, block_timestamp\nORDER BY\n  __HEVO__LOADED_AT DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.silver.new_node_events"}, "operation.dbt_constraints.dbt_constraints-on-run-end-0": {"raw_sql": "{{ dbt_constraints.create_constraints() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.dbt_constraints.create_constraints"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints-on-run-end-0", "fqn": ["dbt_constraints", "hooks", "dbt_constraints-on-run-end-0"], "unique_id": "operation.dbt_constraints.dbt_constraints-on-run-end-0", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "hooks/dbt_constraints-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "dbt_constraints-on-run-end-0", "alias": "", "checksum": {"name": "sha256", "checksum": "322fdaf41d183a13b7417bf8f47935d83bfdf07242073cf29b8c8789010746fb"}, "tags": ["on-run-end"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}}, "created_at": 1665176150.768162, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.thorchain_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfer_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfer_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "name": "not_null_silver__transfer_events_BLOCK_TIMESTAMP", "alias": "transfer_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfer_events.yml/not_null_silver__transfer_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.4822102, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfer_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfer_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfer_events"}, "test.thorchain_models.not_null_silver__transfer_events_ASSET.4d061223da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfer_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__transfer_events_ASSET.4d061223da", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfer_events_ASSET.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "name": "not_null_silver__transfer_events_ASSET", "alias": "transfer_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfer_events.yml/not_null_silver__transfer_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.483375, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfer_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfer_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__transfer_events"}, "test.thorchain_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_E8", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfer_events_AMOUNT_E8"], "unique_id": "test.thorchain_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfer_events_AMOUNT_E8.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "name": "not_null_silver__transfer_events_AMOUNT_E8", "alias": "transfer_events_AMOUNT_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfer_events.yml/not_null_silver__transfer_events_AMOUNT_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.4841459, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfer_events\nwhere AMOUNT_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfer_events_AMOUNT_E8", "column_name": "AMOUNT_E8", "file_key_name": "models.silver__transfer_events"}, "test.thorchain_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfer_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfer_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "name": "not_null_silver__transfer_events_FROM_ADDRESS", "alias": "transfer_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfer_events.yml/not_null_silver__transfer_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.484904, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfer_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfer_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfer_events"}, "test.thorchain_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfer_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfer_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__transfer_events.yml", "name": "not_null_silver__transfer_events_TO_ADDRESS", "alias": "transfer_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfer_events.yml/not_null_silver__transfer_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.485782, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfer_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfer_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfer_events"}, "test.thorchain_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_ID", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__validator_request_leave_events_EVENT_ID"], "unique_id": "test.thorchain_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__validator_request_leave_events_EVENT_ID.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "name": "not_null_silver__validator_request_leave_events_EVENT_ID", "alias": "validator_request_leave_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__validator_request_leave_events.yml/not_null_silver__validator_request_leave_events_EVENT_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.487641, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.validator_request_leave_events\nwhere EVENT_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.validator_request_leave_events_EVENT_ID", "column_name": "EVENT_ID", "file_key_name": "models.silver__validator_request_leave_events"}, "test.thorchain_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__validator_request_leave_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__validator_request_leave_events_TX_ID.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "name": "not_null_silver__validator_request_leave_events_TX_ID", "alias": "validator_request_leave_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__validator_request_leave_events.yml/not_null_silver__validator_request_leave_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.488553, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.validator_request_leave_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.validator_request_leave_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__validator_request_leave_events"}, "test.thorchain_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__validator_request_leave_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__validator_request_leave_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "name": "not_null_silver__validator_request_leave_events_FROM_ADDRESS", "alias": "validator_request_leave_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__validator_request_leave_events.yml/not_null_silver__validator_request_leave_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.4893188, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.validator_request_leave_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.validator_request_leave_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__validator_request_leave_events"}, "test.thorchain_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__validator_request_leave_events_NODE_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__validator_request_leave_events_NODE_ADDRESS.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "name": "not_null_silver__validator_request_leave_events_NODE_ADDRESS", "alias": "validator_request_leave_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__validator_request_leave_events.yml/not_null_silver__validator_request_leave_events_NODE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.49007, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.validator_request_leave_events\nwhere NODE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.validator_request_leave_events_NODE_ADDRESS", "column_name": "NODE_ADDRESS", "file_key_name": "models.silver__validator_request_leave_events"}, "test.thorchain_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "name": "not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP", "alias": "validator_request_leave_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__validator_request_leave_events.yml/not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.490823, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.validator_request_leave_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.validator_request_leave_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__validator_request_leave_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "TX_ID", "BLOCK_TIMESTAMP", "FROM_ADDRESS", "NODE_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__validator_request_leave_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__validator_request_leave_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f.sql", "original_file_path": "models/silver/silver__validator_request_leave_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS", "alias": "validator_request_leave_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__validator_request_leave_events.yml/dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_52edc9d46a9389dc8e96e64b68bd014f"}, "created_at": 1665176151.491756, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        EVENT_ID, TX_ID, BLOCK_TIMESTAMP, FROM_ADDRESS, NODE_ADDRESS\n    from THORCHAIN_DEV.silver.validator_request_leave_events\n    group by EVENT_ID, TX_ID, BLOCK_TIMESTAMP, FROM_ADDRESS, NODE_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.validator_request_leave_events_EVENT_ID", "column_name": null, "file_key_name": "models.silver__validator_request_leave_events"}, "test.thorchain_models.not_null_silver__refund_events_TX_ID.d818e4a9c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_TX_ID.d818e4a9c0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_TX_ID.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_TX_ID", "alias": "refund_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.4984589, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_BLOCKCHAIN", "alias": "refund_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.4993799, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_FROM_ADDRESS", "alias": "refund_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.500152, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_TO_ADDRESS", "alias": "refund_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.500936, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_ASSET.8d91917f0d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_ASSET.8d91917f0d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_ASSET.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_ASSET", "alias": "refund_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5018291, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_ASSET_E8.2e099ee072": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_ASSET_E8.2e099ee072", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_ASSET_E8", "alias": "refund_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5025961, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_2ND_E8", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_ASSET_2ND_E8"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_ASSET_2ND_E8.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_ASSET_2ND_E8", "alias": "refund_events_ASSET_2ND_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_ASSET_2ND_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5033479, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere ASSET_2ND_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_ASSET_2ND_E8", "column_name": "ASSET_2ND_E8", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_CODE.fee514c705": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CODE", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_CODE"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_CODE.fee514c705", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_CODE.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_CODE", "alias": "refund_events_CODE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_CODE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.504093, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere CODE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_CODE", "column_name": "CODE", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_REASON.080b9527d1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REASON", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_REASON"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_REASON.080b9527d1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_REASON.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_REASON", "alias": "refund_events_REASON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_REASON.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.504971, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere REASON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_REASON", "column_name": "REASON", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__refund_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__refund_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "not_null_silver__refund_events_BLOCK_TIMESTAMP", "alias": "refund_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/not_null_silver__refund_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.505716, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.refund_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.refund_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "ASSET", "ASSET_2ND", "MEMO", "CODE", "REASON", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__refund_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__refund_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b.sql", "original_file_path": "models/silver/silver__refund_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID", "alias": "refund_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__refund_events.yml/dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_6b24c44f7cd0585f45933ce94e36b73b"}, "created_at": 1665176151.506481, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, ASSET, ASSET_2ND, MEMO, CODE, REASON, BLOCK_TIMESTAMP, EVENT_ID\n    from THORCHAIN_DEV.silver.refund_events\n    group by TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, ASSET, ASSET_2ND, MEMO, CODE, REASON, BLOCK_TIMESTAMP, EVENT_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.refund_events_TX_ID", "column_name": null, "file_key_name": "models.silver__refund_events"}, "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_BLOCK_TIMESTAMP", "alias": "liquidity_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.511374, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.liquidity_actions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1", "alias": "liquidity_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_7a5c0b70df6d9bae5b9860796ac1b35e"}, "created_at": 1665176151.512191, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.liquidity_actions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.liquidity_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_BLOCK_ID.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_BLOCK_ID", "alias": "liquidity_actions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.514907, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.liquidity_actions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_ACTION", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_LP_ACTION"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_LP_ACTION.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_LP_ACTION", "alias": "liquidity_actions_LP_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_LP_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.515678, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.liquidity_actions\nwhere LP_ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_LP_ACTION", "column_name": "LP_ACTION", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_POOL_NAME.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_POOL_NAME", "alias": "liquidity_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.516447, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.liquidity_actions\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT.f7115d2d81": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT.f7115d2d81", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_RUNE_AMOUNT.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_RUNE_AMOUNT", "alias": "liquidity_actions_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5172029, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.liquidity_actions\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT_USD.520ffc3716": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT_USD.520ffc3716", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_RUNE_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_RUNE_AMOUNT_USD", "alias": "liquidity_actions_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1665176151.518448, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.silver.liquidity_actions where BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13') dbt_subquery\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_ASSET_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_ASSET_AMOUNT.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_ASSET_AMOUNT", "alias": "liquidity_actions_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_ASSET_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5192199, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.liquidity_actions\nwhere ASSET_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_ASSET_AMOUNT", "column_name": "ASSET_AMOUNT", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('silver__liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__liquidity_actions_STAKE_UNITS"], "unique_id": "test.thorchain_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__liquidity_actions_STAKE_UNITS.sql", "original_file_path": "models/silver/silver__liquidity_actions.yml", "name": "not_null_silver__liquidity_actions_STAKE_UNITS", "alias": "liquidity_actions_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__liquidity_actions.yml/not_null_silver__liquidity_actions_STAKE_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5199769, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.liquidity_actions\nwhere STAKE_UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.liquidity_actions_STAKE_UNITS", "column_name": "STAKE_UNITS", "file_key_name": "models.silver__liquidity_actions"}, "test.thorchain_models.not_null_silver__total_value_locked_DAY.5d7ba86e85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_value_locked_DAY"], "unique_id": "test.thorchain_models.not_null_silver__total_value_locked_DAY.5d7ba86e85", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_value_locked_DAY.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "name": "not_null_silver__total_value_locked_DAY", "alias": "total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_value_locked.yml/not_null_silver__total_value_locked_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.521801, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_value_locked\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_value_locked_DAY", "column_name": "DAY", "file_key_name": "models.silver__total_value_locked"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__1.0a174f17b5": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cde28cfc7cf37dd1febcf3d656541f9b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cde28cfc7cf37dd1febcf3d656541f9b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__1.0a174f17b5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_cde28cfc7cf37dd1febcf3d656541f9b.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__1", "alias": "total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_value_locked.yml/dbt_expectations_expect_row_va_cde28cfc7cf37dd1febcf3d656541f9b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_cde28cfc7cf37dd1febcf3d656541f9b"}, "created_at": 1665176151.522605, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.total_value_locked\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.total_value_locked_DAY", "column_name": "DAY", "file_key_name": "models.silver__total_value_locked"}, "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_POOLED", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_value_locked_TOTAL_VALUE_POOLED"], "unique_id": "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "name": "not_null_silver__total_value_locked_TOTAL_VALUE_POOLED", "alias": "total_value_locked_TOTAL_VALUE_POOLED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_value_locked.yml/not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.525223, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_value_locked\nwhere TOTAL_VALUE_POOLED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_value_locked_TOTAL_VALUE_POOLED", "column_name": "TOTAL_VALUE_POOLED", "file_key_name": "models.silver__total_value_locked"}, "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_BONDED", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_value_locked_TOTAL_VALUE_BONDED"], "unique_id": "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "name": "not_null_silver__total_value_locked_TOTAL_VALUE_BONDED", "alias": "total_value_locked_TOTAL_VALUE_BONDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_value_locked.yml/not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.526123, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_value_locked\nwhere TOTAL_VALUE_BONDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_value_locked_TOTAL_VALUE_BONDED", "column_name": "TOTAL_VALUE_BONDED", "file_key_name": "models.silver__total_value_locked"}, "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_LOCKED", "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED"], "unique_id": "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "name": "not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED", "alias": "total_value_locked_TOTAL_VALUE_LOCKED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_value_locked.yml/not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.526881, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_value_locked\nwhere TOTAL_VALUE_LOCKED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_value_locked_TOTAL_VALUE_LOCKED", "column_name": "TOTAL_VALUE_LOCKED", "file_key_name": "models.silver__total_value_locked"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__total_value_locked')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4.sql", "original_file_path": "models/silver/silver__total_value_locked.yml", "name": "dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY", "alias": "total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_value_locked.yml/dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_d0e69123d2660f700edc7ed218670be4"}, "created_at": 1665176151.527644, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DAY\n    from THORCHAIN_DEV.silver.total_value_locked\n    group by DAY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.total_value_locked_DAY", "column_name": null, "file_key_name": "models.silver__total_value_locked"}, "test.thorchain_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__update_node_account_status_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__update_node_account_status_events_NODE_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__update_node_account_status_events_NODE_ADDRESS.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "name": "not_null_silver__update_node_account_status_events_NODE_ADDRESS", "alias": "update_node_account_status_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__update_node_account_status_events.yml/not_null_silver__update_node_account_status_events_NODE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.530627, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.update_node_account_status_events\nwhere NODE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.update_node_account_status_events_NODE_ADDRESS", "column_name": "NODE_ADDRESS", "file_key_name": "models.silver__update_node_account_status_events"}, "test.thorchain_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENT_STATUS", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__update_node_account_status_events"]}, "config": {"enabled": true, "alias": "not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__update_node_account_status_events_CURRENT_STATUS"], "unique_id": "test.thorchain_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "name": "not_null_silver__update_node_account_status_events_CURRENT_STATUS", "alias": "update_node_account_status_events_CURRENT_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__update_node_account_status_events.yml/not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__update_node_a_74e2c6d2f51a2c38a24d83c86198c34d"}, "created_at": 1665176151.531575, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.update_node_account_status_events\nwhere CURRENT_STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.update_node_account_status_events_CURRENT_STATUS", "column_name": "CURRENT_STATUS", "file_key_name": "models.silver__update_node_account_status_events"}, "test.thorchain_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FORMER_STATUS", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__update_node_account_status_events"]}, "config": {"enabled": true, "alias": "not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__update_node_account_status_events_FORMER_STATUS"], "unique_id": "test.thorchain_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "name": "not_null_silver__update_node_account_status_events_FORMER_STATUS", "alias": "update_node_account_status_events_FORMER_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__update_node_account_status_events.yml/not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__update_node_a_bdcbdf6bfd34cc7212466dd2038c8530"}, "created_at": 1665176151.5323572, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.update_node_account_status_events\nwhere FORMER_STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.update_node_account_status_events_FORMER_STATUS", "column_name": "FORMER_STATUS", "file_key_name": "models.silver__update_node_account_status_events"}, "test.thorchain_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__update_node_account_status_events"]}, "config": {"enabled": true, "alias": "not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "name": "not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP", "alias": "update_node_account_status_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__update_node_account_status_events.yml/not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__update_node_a_49711e2a488329120c3c93ab7d9cc5e4"}, "created_at": 1665176151.5331268, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.update_node_account_status_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.update_node_account_status_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__update_node_account_status_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP.d4b84a39d2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9e1e177023ad179ed14682644b16bb88\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["NODE_ADDRESS", "CURRENT_STATUS", "FORMER_STATUS", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__update_node_account_status_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__update_node_account_status_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9e1e177023ad179ed14682644b16bb88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP.d4b84a39d2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_9e1e177023ad179ed14682644b16bb88.sql", "original_file_path": "models/silver/silver__update_node_account_status_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP", "alias": "update_node_account_status_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__update_node_account_status_events.yml/dbt_utils_unique_combination_o_9e1e177023ad179ed14682644b16bb88.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_9e1e177023ad179ed14682644b16bb88"}, "created_at": 1665176151.533907, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        NODE_ADDRESS, CURRENT_STATUS, FORMER_STATUS, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.update_node_account_status_events\n    group by NODE_ADDRESS, CURRENT_STATUS, FORMER_STATUS, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.update_node_account_status_events_NODE_ADDRESS", "column_name": null, "file_key_name": "models.silver__update_node_account_status_events"}, "test.thorchain_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__bond_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__bond_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__bond_events.yml", "name": "not_null_silver__bond_events_BLOCK_TIMESTAMP", "alias": "bond_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__bond_events.yml/not_null_silver__bond_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.537486, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.bond_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.bond_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__bond_events"}, "test.thorchain_models.not_null_silver__bond_events_TX_ID.d18467b918": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__bond_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__bond_events_TX_ID.d18467b918", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__bond_events_TX_ID.sql", "original_file_path": "models/silver/silver__bond_events.yml", "name": "not_null_silver__bond_events_TX_ID", "alias": "bond_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__bond_events.yml/not_null_silver__bond_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.53829, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.bond_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.bond_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__bond_events"}, "test.thorchain_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__bond_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__bond_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__bond_events.yml", "name": "not_null_silver__bond_events_ASSET_E8", "alias": "bond_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__bond_events.yml/not_null_silver__bond_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.539069, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.bond_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.bond_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__bond_events"}, "test.thorchain_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BOND_TYPE", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__bond_events_BOND_TYPE"], "unique_id": "test.thorchain_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__bond_events_BOND_TYPE.sql", "original_file_path": "models/silver/silver__bond_events.yml", "name": "not_null_silver__bond_events_BOND_TYPE", "alias": "bond_events_BOND_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__bond_events.yml/not_null_silver__bond_events_BOND_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.539954, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.bond_events\nwhere BOND_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.bond_events_BOND_TYPE", "column_name": "BOND_TYPE", "file_key_name": "models.silver__bond_events"}, "test.thorchain_models.not_null_silver__bond_events_E8.c19384976b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "E8", "model": "{{ get_where_subquery(ref('silver__bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__bond_events_E8"], "unique_id": "test.thorchain_models.not_null_silver__bond_events_E8.c19384976b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__bond_events_E8.sql", "original_file_path": "models/silver/silver__bond_events.yml", "name": "not_null_silver__bond_events_E8", "alias": "bond_events_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__bond_events.yml/not_null_silver__bond_events_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.540713, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.bond_events\nwhere E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.bond_events_E8", "column_name": "E8", "file_key_name": "models.silver__bond_events"}, "test.thorchain_models.not_null_silver__switch_events_BLOCK_TIMESTAMP.b941c05110": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__switch_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__switch_events_BLOCK_TIMESTAMP.b941c05110", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__switch_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__switch_events.yml", "name": "not_null_silver__switch_events_BLOCK_TIMESTAMP", "alias": "switch_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__switch_events.yml/not_null_silver__switch_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.542779, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.switch_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.switch_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__switch_events"}, "test.thorchain_models.not_null_silver__switch_events_TO_ADDRESS.736ede374c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__switch_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__switch_events_TO_ADDRESS.736ede374c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__switch_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__switch_events.yml", "name": "not_null_silver__switch_events_TO_ADDRESS", "alias": "switch_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__switch_events.yml/not_null_silver__switch_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5435789, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.switch_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.switch_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__switch_events"}, "test.thorchain_models.not_null_silver__switch_events_BURN_ASSET.6194d1cd04": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BURN_ASSET", "model": "{{ get_where_subquery(ref('silver__switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__switch_events_BURN_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__switch_events_BURN_ASSET.6194d1cd04", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__switch_events_BURN_ASSET.sql", "original_file_path": "models/silver/silver__switch_events.yml", "name": "not_null_silver__switch_events_BURN_ASSET", "alias": "switch_events_BURN_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__switch_events.yml/not_null_silver__switch_events_BURN_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.544343, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.switch_events\nwhere BURN_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.switch_events_BURN_ASSET", "column_name": "BURN_ASSET", "file_key_name": "models.silver__switch_events"}, "test.thorchain_models.not_null_silver__switch_events_FROM_ADDRESS.5dfa330f9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__switch_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__switch_events_FROM_ADDRESS.5dfa330f9f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__switch_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__switch_events.yml", "name": "not_null_silver__switch_events_FROM_ADDRESS", "alias": "switch_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__switch_events.yml/not_null_silver__switch_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.545105, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.switch_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.switch_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__switch_events"}, "test.thorchain_models.not_null_silver__switch_events_BURN_E8.11e4de9978": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BURN_E8", "model": "{{ get_where_subquery(ref('silver__switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__switch_events_BURN_E8"], "unique_id": "test.thorchain_models.not_null_silver__switch_events_BURN_E8.11e4de9978", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__switch_events_BURN_E8.sql", "original_file_path": "models/silver/silver__switch_events.yml", "name": "not_null_silver__switch_events_BURN_E8", "alias": "switch_events_BURN_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__switch_events.yml/not_null_silver__switch_events_BURN_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.545989, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.switch_events\nwhere BURN_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.switch_events_BURN_E8", "column_name": "BURN_E8", "file_key_name": "models.silver__switch_events"}, "test.thorchain_models.not_null_silver__switch_events_MINT_E8.2d0496b427": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_E8", "model": "{{ get_where_subquery(ref('silver__switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__switch_events_MINT_E8"], "unique_id": "test.thorchain_models.not_null_silver__switch_events_MINT_E8.2d0496b427", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__switch_events_MINT_E8.sql", "original_file_path": "models/silver/silver__switch_events.yml", "name": "not_null_silver__switch_events_MINT_E8", "alias": "switch_events_MINT_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__switch_events.yml/not_null_silver__switch_events_MINT_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.546738, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.switch_events\nwhere MINT_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.switch_events_MINT_E8", "column_name": "MINT_E8", "file_key_name": "models.silver__switch_events"}, "test.thorchain_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_fees_DAY"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_fees_DAY.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "not_null_silver__pool_block_fees_DAY", "alias": "pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/not_null_silver__pool_block_fees_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5489879, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_fees\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_fees_DAY", "column_name": "DAY", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__1.9f4ccb4419": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7d09b2ac70349e3cd2d26460a7fac6ff\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7d09b2ac70349e3cd2d26460a7fac6ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__1.9f4ccb4419", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_7d09b2ac70349e3cd2d26460a7fac6ff.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__1", "alias": "pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/dbt_expectations_expect_row_va_7d09b2ac70349e3cd2d26460a7fac6ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_7d09b2ac70349e3cd2d26460a7fac6ff"}, "created_at": 1665176151.549802, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.pool_block_fees\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.pool_block_fees_DAY", "column_name": "DAY", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_fees_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_fees_POOL_NAME.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "not_null_silver__pool_block_fees_POOL_NAME", "alias": "pool_block_fees_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/not_null_silver__pool_block_fees_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.55258, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_fees\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_fees_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARDS", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_fees_REWARDS"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_fees_REWARDS.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "not_null_silver__pool_block_fees_REWARDS", "alias": "pool_block_fees_REWARDS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/not_null_silver__pool_block_fees_REWARDS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.553478, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_fees\nwhere REWARDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_fees_REWARDS", "column_name": "REWARDS", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE.eb022a7e93": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_LIQUIDITY_FEES_RUNE", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE.eb022a7e93", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE", "alias": "pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.554244, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_fees\nwhere TOTAL_LIQUIDITY_FEES_RUNE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE", "column_name": "TOTAL_LIQUIDITY_FEES_RUNE", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES", "alias": "pool_block_fees_ASSET_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5549922, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_fees\nwhere ASSET_LIQUIDITY_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_fees_ASSET_LIQUIDITY_FEES", "column_name": "ASSET_LIQUIDITY_FEES", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES.66a098c1a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES.66a098c1a6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES", "alias": "pool_block_fees_RUNE_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.555742, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_fees\nwhere RUNE_LIQUIDITY_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_fees_RUNE_LIQUIDITY_FEES", "column_name": "RUNE_LIQUIDITY_FEES", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS", "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_fees_EARNINGS"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_fees_EARNINGS.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "not_null_silver__pool_block_fees_EARNINGS", "alias": "pool_block_fees_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/not_null_silver__pool_block_fees_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5566232, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_fees\nwhere EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_fees_EARNINGS", "column_name": "EARNINGS", "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__pool_block_fees')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c.sql", "original_file_path": "models/silver/silver__pool_block_fees.yml", "name": "dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME", "alias": "pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_fees.yml/dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_2b663c3397481424837dbc7dd9be622c"}, "created_at": 1665176151.557375, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DAY, POOL_NAME\n    from THORCHAIN_DEV.silver.pool_block_fees\n    group by DAY, POOL_NAME\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.pool_block_fees_DAY", "column_name": null, "file_key_name": "models.silver__pool_block_fees"}, "test.thorchain_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__rewards_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__rewards_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__rewards_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__rewards_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__rewards_events.yml", "name": "not_null_silver__rewards_events_BLOCK_TIMESTAMP", "alias": "rewards_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_events.yml/not_null_silver__rewards_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.560211, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.rewards_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.rewards_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__rewards_events"}, "test.thorchain_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BOND_E8", "model": "{{ get_where_subquery(ref('silver__rewards_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__rewards_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__rewards_events_BOND_E8"], "unique_id": "test.thorchain_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__rewards_events_BOND_E8.sql", "original_file_path": "models/silver/silver__rewards_events.yml", "name": "not_null_silver__rewards_events_BOND_E8", "alias": "rewards_events_BOND_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_events.yml/not_null_silver__rewards_events_BOND_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.561006, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.rewards_events\nwhere BOND_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.rewards_events_BOND_E8", "column_name": "BOND_E8", "file_key_name": "models.silver__rewards_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__rewards_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__rewards_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774.sql", "original_file_path": "models/silver/silver__rewards_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP", "alias": "rewards_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_events.yml/dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_03e9d7d02497531e0ea89534e09f4774"}, "created_at": 1665176151.561905, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.rewards_events\n    group by BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.rewards_events_BLOCK_TIMESTAMP", "column_name": null, "file_key_name": "models.silver__rewards_events"}, "test.thorchain_models.not_null_silver__swap_events_TX_ID.ba927b5821": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_TX_ID.ba927b5821", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_TX_ID.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_TX_ID", "alias": "swap_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.566567, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_BLOCKCHAIN", "alias": "swap_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.567467, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_FROM_ADDRESS", "alias": "swap_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.568235, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_TO_ADDRESS", "alias": "swap_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.568995, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ASSET", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_FROM_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_FROM_ASSET.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_FROM_ASSET", "alias": "swap_events_FROM_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_FROM_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5697432, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere FROM_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_FROM_ASSET", "column_name": "FROM_ASSET", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_FROM_E8.74389cdde1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_FROM_E8"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_FROM_E8.74389cdde1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_FROM_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_FROM_E8", "alias": "swap_events_FROM_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_FROM_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.570612, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere FROM_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_FROM_E8", "column_name": "FROM_E8", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_TO_ASSET.2a903da825": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_TO_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_TO_ASSET.2a903da825", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_TO_ASSET.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_TO_ASSET", "alias": "swap_events_TO_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_TO_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.571371, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere TO_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_TO_ASSET", "column_name": "TO_ASSET", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_TO_E8.5ad719c657": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_TO_E8"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_TO_E8.5ad719c657", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_TO_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_TO_E8", "alias": "swap_events_TO_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_TO_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.572118, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere TO_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_TO_E8", "column_name": "TO_E8", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_MEMO.29e2c5dd27": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_MEMO"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_MEMO.29e2c5dd27", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_MEMO.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_MEMO", "alias": "swap_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_MEMO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.572992, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere MEMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_MEMO", "column_name": "MEMO", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_POOL_NAME.e529db3476": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_POOL_NAME.e529db3476", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_POOL_NAME", "alias": "swap_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.573741, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_E8_MIN", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_TO_E8_MIN"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_TO_E8_MIN.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_TO_E8_MIN", "alias": "swap_events_TO_E8_MIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_TO_E8_MIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5744839, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere TO_E8_MIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_TO_E8_MIN", "column_name": "TO_E8_MIN", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_SLIP_BP", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_SWAP_SLIP_BP"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_SWAP_SLIP_BP.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_SWAP_SLIP_BP", "alias": "swap_events_SWAP_SLIP_BP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_SWAP_SLIP_BP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.575228, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere SWAP_SLIP_BP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_SWAP_SLIP_BP", "column_name": "SWAP_SLIP_BP", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_LIQ_FEE_E8"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_LIQ_FEE_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_LIQ_FEE_E8", "alias": "swap_events_LIQ_FEE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_LIQ_FEE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.576097, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere LIQ_FEE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_LIQ_FEE_E8", "column_name": "LIQ_FEE_E8", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8.07299825ee": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_IN_RUNE_E8", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8.07299825ee", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8", "alias": "swap_events_LIQ_FEE_IN_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5768461, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere LIQ_FEE_IN_RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_LIQ_FEE_IN_RUNE_E8", "column_name": "LIQ_FEE_IN_RUNE_E8", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events__DIRECTION.910c1bf98a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_DIRECTION", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events__DIRECTION"], "unique_id": "test.thorchain_models.not_null_silver__swap_events__DIRECTION.910c1bf98a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events__DIRECTION.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events__DIRECTION", "alias": "swap_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events__DIRECTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.577584, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere _DIRECTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events", "column_name": "_DIRECTION", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swap_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swap_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "not_null_silver__swap_events_BLOCK_TIMESTAMP", "alias": "swap_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/not_null_silver__swap_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.578318, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swap_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swap_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_RUNE_E8___DIRECTION__BLOCK_TIMESTAMP.aa043dec13": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9aa5aec5aa3521ad480be69428336da5\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "FROM_ASSET", "FROM_E8", "TO_ASSET", "TO_E8", "MEMO", "POOL_NAME", "TO_E8_MIN", "SWAP_SLIP_BP", "LIQ_FEE_E8", "LIQ_FEE_IN_RUNE_E8", "_DIRECTION", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__swap_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swap_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9aa5aec5aa3521ad480be69428336da5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_RUNE_E8___DIRECTION__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_RUNE_E8___DIRECTION__BLOCK_TIMESTAMP.aa043dec13", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_9aa5aec5aa3521ad480be69428336da5.sql", "original_file_path": "models/silver/silver__swap_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_RUNE_E8___DIRECTION__BLOCK_TIMESTAMP", "alias": "swap_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swap_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swap_events.yml/dbt_utils_unique_combination_o_9aa5aec5aa3521ad480be69428336da5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_9aa5aec5aa3521ad480be69428336da5"}, "created_at": 1665176151.579201, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, FROM_ASSET, FROM_E8, TO_ASSET, TO_E8, MEMO, POOL_NAME, TO_E8_MIN, SWAP_SLIP_BP, LIQ_FEE_E8, LIQ_FEE_IN_RUNE_E8, _DIRECTION, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.swap_events\n    group by TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, FROM_ASSET, FROM_E8, TO_ASSET, TO_E8, MEMO, POOL_NAME, TO_E8_MIN, SWAP_SLIP_BP, LIQ_FEE_E8, LIQ_FEE_IN_RUNE_E8, _DIRECTION, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.swap_events_TX_ID", "column_name": null, "file_key_name": "models.silver__swap_events"}, "test.thorchain_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_BLOCK_ID.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_BLOCK_ID", "alias": "swaps_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.586578, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP::DATE", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_BLOCK_TIMESTAMP_DATE"], "unique_id": "test.thorchain_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_BLOCK_TIMESTAMP_DATE", "alias": "swaps_BLOCK_TIMESTAMP_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.587384, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere BLOCK_TIMESTAMP::DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_BLOCK_TIMESTAMP_DATE", "column_name": "BLOCK_TIMESTAMP::DATE", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__1.3593f474c4": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4282444056174766f385e1edf2a4d4d8\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP::DATE", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4282444056174766f385e1edf2a4d4d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__1.3593f474c4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_4282444056174766f385e1edf2a4d4d8.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__1", "alias": "swaps_BLOCK_TIMESTAMP_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/dbt_expectations_expect_row_va_4282444056174766f385e1edf2a4d4d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_4282444056174766f385e1edf2a4d4d8"}, "created_at": 1665176151.588161, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP::DATE as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.swaps\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP::DATE as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.swaps_BLOCK_TIMESTAMP_DATE", "column_name": "BLOCK_TIMESTAMP::DATE", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_TX_ID.429c1bdd9e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__swaps_TX_ID.429c1bdd9e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_TX_ID.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_TX_ID", "alias": "swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5907998, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_BLOCKCHAIN", "alias": "swaps_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.591711, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_POOL_NAME.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_POOL_NAME", "alias": "swaps_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.592479, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_FROM_ADDRESS", "alias": "swaps_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.593236, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_TO_POOL_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_TO_POOL_ADDRESS.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_TO_POOL_ADDRESS", "alias": "swaps_TO_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_TO_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5939891, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere TO_POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_TO_POOL_ADDRESS", "column_name": "TO_POOL_ADDRESS", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ASSET", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_FROM_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_FROM_ASSET.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_FROM_ASSET", "alias": "swaps_FROM_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_FROM_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.594869, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere FROM_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_FROM_ASSET", "column_name": "FROM_ASSET", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_TO_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_TO_ASSET.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_TO_ASSET", "alias": "swaps_TO_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_TO_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.595627, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere TO_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_TO_ASSET", "column_name": "TO_ASSET", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMOUNT", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_FROM_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_FROM_AMOUNT.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_FROM_AMOUNT", "alias": "swaps_FROM_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_FROM_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.596374, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere FROM_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_FROM_AMOUNT", "column_name": "FROM_AMOUNT", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_TO_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_TO_AMOUNT.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_TO_AMOUNT", "alias": "swaps_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_TO_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.5972521, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere TO_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_TO_AMOUNT", "column_name": "TO_AMOUNT", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_TO_AMOUNT", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_MIN_TO_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_MIN_TO_AMOUNT.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_MIN_TO_AMOUNT", "alias": "swaps_MIN_TO_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_MIN_TO_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.598005, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere MIN_TO_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_MIN_TO_AMOUNT", "column_name": "MIN_TO_AMOUNT", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_FROM_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_FROM_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_FROM_AMOUNT_USD", "alias": "swaps_FROM_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_FROM_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.598758, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere FROM_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_FROM_AMOUNT_USD", "column_name": "FROM_AMOUNT_USD", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_TO_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_TO_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_TO_AMOUNT_USD", "alias": "swaps_TO_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_TO_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.599508, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere TO_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_TO_AMOUNT_USD", "column_name": "TO_AMOUNT_USD", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_AMOUNT_MIN_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_TO_AMOUNT_MIN_USD"], "unique_id": "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_TO_AMOUNT_MIN_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_TO_AMOUNT_MIN_USD", "alias": "swaps_TO_AMOUNT_MIN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_TO_AMOUNT_MIN_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6003861, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere TO_AMOUNT_MIN_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_TO_AMOUNT_MIN_USD", "column_name": "TO_AMOUNT_MIN_USD", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_SLIP_BP", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_SWAP_SLIP_BP"], "unique_id": "test.thorchain_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_SWAP_SLIP_BP.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_SWAP_SLIP_BP", "alias": "swaps_SWAP_SLIP_BP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_SWAP_SLIP_BP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.60114, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere SWAP_SLIP_BP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_SWAP_SLIP_BP", "column_name": "SWAP_SLIP_BP", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE.a31fbfd0f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_RUNE", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_LIQ_FEE_RUNE"], "unique_id": "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE.a31fbfd0f7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_LIQ_FEE_RUNE.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_LIQ_FEE_RUNE", "alias": "swaps_LIQ_FEE_RUNE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_LIQ_FEE_RUNE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6018848, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere LIQ_FEE_RUNE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_LIQ_FEE_RUNE", "column_name": "LIQ_FEE_RUNE", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE_USD.630f16402c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_RUNE_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_LIQ_FEE_RUNE_USD"], "unique_id": "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE_USD.630f16402c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_LIQ_FEE_RUNE_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_LIQ_FEE_RUNE_USD", "alias": "swaps_LIQ_FEE_RUNE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_LIQ_FEE_RUNE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6026182, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere LIQ_FEE_RUNE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_LIQ_FEE_RUNE_USD", "column_name": "LIQ_FEE_RUNE_USD", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_ASSET", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_LIQ_FEE_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_LIQ_FEE_ASSET.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_LIQ_FEE_ASSET", "alias": "swaps_LIQ_FEE_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_LIQ_FEE_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.603483, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere LIQ_FEE_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_LIQ_FEE_ASSET", "column_name": "LIQ_FEE_ASSET", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQ_FEE_ASSET_USD", "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__swaps_LIQ_FEE_ASSET_USD"], "unique_id": "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__swaps_LIQ_FEE_ASSET_USD.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "not_null_silver__swaps_LIQ_FEE_ASSET_USD", "alias": "swaps_LIQ_FEE_ASSET_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/not_null_silver__swaps_LIQ_FEE_ASSET_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.604227, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.swaps\nwhere LIQ_FEE_ASSET_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.swaps_LIQ_FEE_ASSET_USD", "column_name": "LIQ_FEE_ASSET_USD", "file_key_name": "models.silver__swaps"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swaps_TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.acd20d2a09": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_278f7509fd0341badf5f0661aafdf73d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "POOL_NAME", "FROM_ADDRESS", "TO_POOL_ADDRESS", "FROM_ASSET", "TO_ASSET", "NATIVE_TO_ADDRESS", "FROM_AMOUNT", "TO_AMOUNT"], "model": "{{ get_where_subquery(ref('silver__swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__swaps"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_278f7509fd0341badf5f0661aafdf73d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__swaps_TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swaps_TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.acd20d2a09", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_278f7509fd0341badf5f0661aafdf73d.sql", "original_file_path": "models/silver/silver__swaps.yml", "name": "dbt_utils_unique_combination_of_columns_silver__swaps_TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT", "alias": "swaps_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__swaps.yml/dbt_utils_unique_combination_o_278f7509fd0341badf5f0661aafdf73d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_278f7509fd0341badf5f0661aafdf73d"}, "created_at": 1665176151.604991, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, POOL_NAME, FROM_ADDRESS, TO_POOL_ADDRESS, FROM_ASSET, TO_ASSET, NATIVE_TO_ADDRESS, FROM_AMOUNT, TO_AMOUNT\n    from THORCHAIN_DEV.silver.swaps\n    group by TX_ID, POOL_NAME, FROM_ADDRESS, TO_POOL_ADDRESS, FROM_ASSET, TO_ASSET, NATIVE_TO_ADDRESS, FROM_AMOUNT, TO_AMOUNT\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.swaps_TX_ID", "column_name": null, "file_key_name": "models.silver__swaps"}, "test.thorchain_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__fee_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__fee_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__fee_events.yml", "name": "not_null_silver__fee_events_BLOCK_TIMESTAMP", "alias": "fee_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__fee_events.yml/not_null_silver__fee_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.609235, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.fee_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.fee_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__fee_events"}, "test.thorchain_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__fee_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__fee_events_TX_ID.sql", "original_file_path": "models/silver/silver__fee_events.yml", "name": "not_null_silver__fee_events_TX_ID", "alias": "fee_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__fee_events.yml/not_null_silver__fee_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.610036, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.fee_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.fee_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__fee_events"}, "test.thorchain_models.not_null_silver__fee_events_ASSET.3832e5408e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__fee_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__fee_events_ASSET.3832e5408e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__fee_events_ASSET.sql", "original_file_path": "models/silver/silver__fee_events.yml", "name": "not_null_silver__fee_events_ASSET", "alias": "fee_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__fee_events.yml/not_null_silver__fee_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.610803, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.fee_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.fee_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__fee_events"}, "test.thorchain_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_DEDUCT", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__fee_events_POOL_DEDUCT"], "unique_id": "test.thorchain_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__fee_events_POOL_DEDUCT.sql", "original_file_path": "models/silver/silver__fee_events.yml", "name": "not_null_silver__fee_events_POOL_DEDUCT", "alias": "fee_events_POOL_DEDUCT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__fee_events.yml/not_null_silver__fee_events_POOL_DEDUCT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.611705, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.fee_events\nwhere POOL_DEDUCT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.fee_events_POOL_DEDUCT", "column_name": "POOL_DEDUCT", "file_key_name": "models.silver__fee_events"}, "test.thorchain_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__fee_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__fee_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__fee_events.yml", "name": "not_null_silver__fee_events_ASSET_E8", "alias": "fee_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__fee_events.yml/not_null_silver__fee_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6124642, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.fee_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.fee_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__fee_events"}, "test.thorchain_models.not_null_silver__unstake_events_TX_ID.9f93ff63dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_TX_ID.9f93ff63dc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_TX_ID.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_TX_ID", "alias": "unstake_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.616, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_BLOCKCHAIN.e25187dab1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_BLOCKCHAIN.e25187dab1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_BLOCKCHAIN", "alias": "unstake_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6167932, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_FROM_ADDRESS.67dcb74bba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_FROM_ADDRESS.67dcb74bba", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_FROM_ADDRESS", "alias": "unstake_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.617805, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_TO_ADDRESS.5ebf6180c6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_TO_ADDRESS.5ebf6180c6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_TO_ADDRESS", "alias": "unstake_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.61857, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_ASSET.e9f4a9746f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_ASSET.e9f4a9746f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_ASSET.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_ASSET", "alias": "unstake_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.619319, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_ASSET_E8.54abd36fd1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_ASSET_E8.54abd36fd1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_ASSET_E8", "alias": "unstake_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.62019, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_EMIT_ASSET_E8.1b1e210854": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_ASSET_E8", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_EMIT_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_EMIT_ASSET_E8.1b1e210854", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_EMIT_ASSET_E8.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_EMIT_ASSET_E8", "alias": "unstake_events_EMIT_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_EMIT_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6209338, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere EMIT_ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_EMIT_ASSET_E8", "column_name": "EMIT_ASSET_E8", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_EMIT_RUNE_E8.f53214feaa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_RUNE_E8", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_EMIT_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_EMIT_RUNE_E8.f53214feaa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_EMIT_RUNE_E8.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_EMIT_RUNE_E8", "alias": "unstake_events_EMIT_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_EMIT_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.621678, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere EMIT_RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_EMIT_RUNE_E8", "column_name": "EMIT_RUNE_E8", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_MEMO.dce0d87908": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_MEMO"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_MEMO.dce0d87908", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_MEMO.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_MEMO", "alias": "unstake_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_MEMO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.622418, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere MEMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_MEMO", "column_name": "MEMO", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_POOL_NAME.79317b5248": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_POOL_NAME.79317b5248", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_POOL_NAME", "alias": "unstake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.623298, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_STAKE_UNITS.d2d003bdfe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_STAKE_UNITS"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_STAKE_UNITS.d2d003bdfe", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_STAKE_UNITS.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_STAKE_UNITS", "alias": "unstake_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_STAKE_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.624043, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere STAKE_UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_STAKE_UNITS", "column_name": "STAKE_UNITS", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_BASIS_POINTS.df77f8aa06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BASIS_POINTS", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_BASIS_POINTS"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_BASIS_POINTS.df77f8aa06", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_BASIS_POINTS.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_BASIS_POINTS", "alias": "unstake_events_BASIS_POINTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_BASIS_POINTS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.624782, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere BASIS_POINTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_BASIS_POINTS", "column_name": "BASIS_POINTS", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_ASYMMETRY.3c353041f3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASYMMETRY", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_ASYMMETRY"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_ASYMMETRY.3c353041f3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_ASYMMETRY.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_ASYMMETRY", "alias": "unstake_events_ASYMMETRY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_ASYMMETRY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.625518, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere ASYMMETRY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_ASYMMETRY", "column_name": "ASYMMETRY", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8.92e6f434df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMP_LOSS_PROTECTION_E8", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8.92e6f434df", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8", "alias": "unstake_events_IMP_LOSS_PROTECTION_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6263812, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere IMP_LOSS_PROTECTION_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_IMP_LOSS_PROTECTION_E8", "column_name": "IMP_LOSS_PROTECTION_E8", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8.3525499a5a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_EMIT_ASSET_IN_RUNE_E8", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8.3525499a5a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8", "alias": "unstake_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.627119, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere _EMIT_ASSET_IN_RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events", "column_name": "_EMIT_ASSET_IN_RUNE_E8", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__unstake_events_BLOCK_TIMESTAMP.f37d91fcf1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__unstake_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__unstake_events_BLOCK_TIMESTAMP.f37d91fcf1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__unstake_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "not_null_silver__unstake_events_BLOCK_TIMESTAMP", "alias": "unstake_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/not_null_silver__unstake_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6278641, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.unstake_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.unstake_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__unstake_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP.bd91a0a83d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_580d13c61901b402235c8d95ed5b9f1c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "ASSET", "MEMO", "POOL_NAME", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__unstake_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__unstake_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_580d13c61901b402235c8d95ed5b9f1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__unstake_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__unstake_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP.bd91a0a83d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_580d13c61901b402235c8d95ed5b9f1c.sql", "original_file_path": "models/silver/silver__unstake_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__unstake_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP", "alias": "unstake_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__unstake_events.yml/dbt_utils_unique_combination_o_580d13c61901b402235c8d95ed5b9f1c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_580d13c61901b402235c8d95ed5b9f1c"}, "created_at": 1665176151.6287549, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, ASSET, MEMO, POOL_NAME, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.unstake_events\n    group by TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, ASSET, MEMO, POOL_NAME, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.unstake_events_TX_ID", "column_name": null, "file_key_name": "models.silver__unstake_events"}, "test.thorchain_models.not_null_silver__add_events_TX_ID.3e7dfb5274": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__add_events_TX_ID.3e7dfb5274", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_TX_ID.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_TX_ID", "alias": "add_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.63311, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_FROM_ADDRESS", "alias": "add_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.634032, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_TO_ADDRESS", "alias": "add_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6348002, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_ASSET_E8", "alias": "add_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6355488, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__add_events_MEMO.111566b9b2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_MEMO"], "unique_id": "test.thorchain_models.not_null_silver__add_events_MEMO.111566b9b2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_MEMO.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_MEMO", "alias": "add_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_MEMO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.636299, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere MEMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_MEMO", "column_name": "MEMO", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__add_events_RUNE_E8.4f27ad7cc3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__add_events_RUNE_E8.4f27ad7cc3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_RUNE_E8.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_RUNE_E8", "alias": "add_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.637179, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__add_events_POOL_NAME.66d963165a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__add_events_POOL_NAME.66d963165a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_POOL_NAME", "alias": "add_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6379268, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__add_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__add_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "not_null_silver__add_events_BLOCK_TIMESTAMP", "alias": "add_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/not_null_silver__add_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.638675, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.add_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.add_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__add_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "TX_ID", "BLOCKCHAIN", "POOL_NAME", "FROM_ADDRESS", "TO_ADDRESS", "MEMO"], "model": "{{ get_where_subquery(ref('silver__add_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__add_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905.sql", "original_file_path": "models/silver/silver__add_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO", "alias": "add_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__add_events.yml/dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_df8db349b5b0e5698ca0696cb18d6905"}, "created_at": 1665176151.6395562, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        EVENT_ID, TX_ID, BLOCKCHAIN, POOL_NAME, FROM_ADDRESS, TO_ADDRESS, MEMO\n    from THORCHAIN_DEV.silver.add_events\n    group by EVENT_ID, TX_ID, BLOCKCHAIN, POOL_NAME, FROM_ADDRESS, TO_ADDRESS, MEMO\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.add_events_EVENT_ID", "column_name": null, "file_key_name": "models.silver__add_events"}, "test.thorchain_models.not_null_silver__block_rewards_DAY.202d1b684a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_rewards_DAY"], "unique_id": "test.thorchain_models.not_null_silver__block_rewards_DAY.202d1b684a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_rewards_DAY.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "not_null_silver__block_rewards_DAY", "alias": "block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/not_null_silver__block_rewards_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.64366, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_rewards\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_rewards_DAY", "column_name": "DAY", "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__1.05867e3497": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d125989805c486a476ac27d35104947b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d125989805c486a476ac27d35104947b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__1.05867e3497", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_d125989805c486a476ac27d35104947b.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__1", "alias": "block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/dbt_expectations_expect_row_va_d125989805c486a476ac27d35104947b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_d125989805c486a476ac27d35104947b"}, "created_at": 1665176151.644463, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.block_rewards\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.block_rewards_DAY", "column_name": "DAY", "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEE", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_rewards_LIQUIDITY_FEE"], "unique_id": "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_rewards_LIQUIDITY_FEE.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "not_null_silver__block_rewards_LIQUIDITY_FEE", "alias": "block_rewards_LIQUIDITY_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/not_null_silver__block_rewards_LIQUIDITY_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.647153, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_rewards\nwhere LIQUIDITY_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_rewards_LIQUIDITY_FEE", "column_name": "LIQUIDITY_FEE", "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_rewards_BLOCK_REWARDS"], "unique_id": "test.thorchain_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_rewards_BLOCK_REWARDS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "not_null_silver__block_rewards_BLOCK_REWARDS", "alias": "block_rewards_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/not_null_silver__block_rewards_BLOCK_REWARDS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6479151, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_rewards\nwhere BLOCK_REWARDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_rewards_BLOCK_REWARDS", "column_name": "BLOCK_REWARDS", "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_rewards_EARNINGS"], "unique_id": "test.thorchain_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_rewards_EARNINGS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "not_null_silver__block_rewards_EARNINGS", "alias": "block_rewards_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/not_null_silver__block_rewards_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.648673, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_rewards\nwhere EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_rewards_EARNINGS", "column_name": "EARNINGS", "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BONDING_EARNINGS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_rewards_BONDING_EARNINGS"], "unique_id": "test.thorchain_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_rewards_BONDING_EARNINGS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "not_null_silver__block_rewards_BONDING_EARNINGS", "alias": "block_rewards_BONDING_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/not_null_silver__block_rewards_BONDING_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.649796, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_rewards\nwhere BONDING_EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_rewards_BONDING_EARNINGS", "column_name": "BONDING_EARNINGS", "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_EARNINGS", "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_rewards_LIQUIDITY_EARNINGS"], "unique_id": "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_rewards_LIQUIDITY_EARNINGS.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "not_null_silver__block_rewards_LIQUIDITY_EARNINGS", "alias": "block_rewards_LIQUIDITY_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/not_null_silver__block_rewards_LIQUIDITY_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.650551, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_rewards\nwhere LIQUIDITY_EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_rewards_LIQUIDITY_EARNINGS", "column_name": "LIQUIDITY_EARNINGS", "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__block_rewards')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f.sql", "original_file_path": "models/silver/silver__block_rewards.yml", "name": "dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY", "alias": "block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_rewards.yml/dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_637871af9e3035225b8949726d0c1b1f"}, "created_at": 1665176151.651297, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DAY\n    from THORCHAIN_DEV.silver.block_rewards\n    group by DAY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.block_rewards_DAY", "column_name": null, "file_key_name": "models.silver__block_rewards"}, "test.thorchain_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "name": "not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP", "alias": "pool_balance_change_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.yml/not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6546628, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_balance_change_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_balance_change_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pool_balance_change_events"}, "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_balance_change_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_balance_change_events_ASSET.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "name": "not_null_silver__pool_balance_change_events_ASSET", "alias": "pool_balance_change_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.yml/not_null_silver__pool_balance_change_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.655575, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_balance_change_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_balance_change_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__pool_balance_change_events"}, "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_AMOUNT.1a0e408609": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_balance_change_events_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_AMOUNT.1a0e408609", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_balance_change_events_RUNE_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "name": "not_null_silver__pool_balance_change_events_RUNE_AMOUNT", "alias": "pool_balance_change_events_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.yml/not_null_silver__pool_balance_change_events_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6563358, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_balance_change_events\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_balance_change_events_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.silver__pool_balance_change_events"}, "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_ADD.1cfcf54a13": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_ADD", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_balance_change_events_RUNE_ADD"], "unique_id": "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_ADD.1cfcf54a13", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_balance_change_events_RUNE_ADD.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "name": "not_null_silver__pool_balance_change_events_RUNE_ADD", "alias": "pool_balance_change_events_RUNE_ADD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.yml/not_null_silver__pool_balance_change_events_RUNE_ADD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.657094, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_balance_change_events\nwhere RUNE_ADD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_balance_change_events_RUNE_ADD", "column_name": "RUNE_ADD", "file_key_name": "models.silver__pool_balance_change_events"}, "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_balance_change_events_ASSET_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_balance_change_events_ASSET_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "name": "not_null_silver__pool_balance_change_events_ASSET_AMOUNT", "alias": "pool_balance_change_events_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.yml/not_null_silver__pool_balance_change_events_ASSET_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6579719, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_balance_change_events\nwhere ASSET_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_balance_change_events_ASSET_AMOUNT", "column_name": "ASSET_AMOUNT", "file_key_name": "models.silver__pool_balance_change_events"}, "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_ADD", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_balance_change_events_ASSET_ADD"], "unique_id": "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_balance_change_events_ASSET_ADD.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "name": "not_null_silver__pool_balance_change_events_ASSET_ADD", "alias": "pool_balance_change_events_ASSET_ADD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.yml/not_null_silver__pool_balance_change_events_ASSET_ADD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.658734, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_balance_change_events\nwhere ASSET_ADD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_balance_change_events_ASSET_ADD", "column_name": "ASSET_ADD", "file_key_name": "models.silver__pool_balance_change_events"}, "test.thorchain_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REASON", "model": "{{ get_where_subquery(ref('silver__pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_balance_change_events_REASON"], "unique_id": "test.thorchain_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_balance_change_events_REASON.sql", "original_file_path": "models/silver/silver__pool_balance_change_events.yml", "name": "not_null_silver__pool_balance_change_events_REASON", "alias": "pool_balance_change_events_REASON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_balance_change_events.yml/not_null_silver__pool_balance_change_events_REASON.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.659476, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_balance_change_events\nwhere REASON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_balance_change_events_REASON", "column_name": "REASON", "file_key_name": "models.silver__pool_balance_change_events"}, "test.thorchain_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_BLOCKCHAIN", "alias": "outbound_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6618922, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_FROM_ADDRESS", "alias": "outbound_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.662679, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_TO_ADDRESS", "alias": "outbound_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.663436, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_ASSET.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_ASSET", "alias": "outbound_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6643121, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__outbound_events_ASSET_E8.e28187620c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_ASSET_E8.e28187620c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_ASSET_E8", "alias": "outbound_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.665065, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__outbound_events_MEMO.88f8ed52e8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_MEMO"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_MEMO.88f8ed52e8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_MEMO.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_MEMO", "alias": "outbound_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_MEMO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.665823, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere MEMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_MEMO", "column_name": "MEMO", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IN_TX", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_IN_TX"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_IN_TX.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_IN_TX", "alias": "outbound_events_IN_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_IN_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.666692, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere IN_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_IN_TX", "column_name": "IN_TX", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__outbound_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__outbound_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "not_null_silver__outbound_events_BLOCK_TIMESTAMP", "alias": "outbound_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/not_null_silver__outbound_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.667527, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.outbound_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.outbound_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCKCHAIN", "FROM_ADDRESS", "TO_ADDRESS", "ASSET", "MEMO", "IN_TX", "BLOCK_TIMESTAMP", "EVENT_ID"], "model": "{{ get_where_subquery(ref('silver__outbound_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__outbound_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3.sql", "original_file_path": "models/silver/silver__outbound_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID", "alias": "outbound_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__outbound_events.yml/dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f771b1bbd82c97df42bd859f3238a5b3"}, "created_at": 1665176151.6682932, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, ASSET, MEMO, IN_TX, BLOCK_TIMESTAMP, EVENT_ID\n    from THORCHAIN_DEV.silver.outbound_events\n    group by TX_ID, BLOCKCHAIN, FROM_ADDRESS, TO_ADDRESS, ASSET, MEMO, IN_TX, BLOCK_TIMESTAMP, EVENT_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.outbound_events_TX_ID", "column_name": null, "file_key_name": "models.silver__outbound_events"}, "test.thorchain_models.not_null_silver__daily_tvl_DAY.b4b5f55703": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_tvl_DAY"], "unique_id": "test.thorchain_models.not_null_silver__daily_tvl_DAY.b4b5f55703", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_tvl_DAY.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "not_null_silver__daily_tvl_DAY", "alias": "daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/not_null_silver__daily_tvl_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.672848, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_tvl\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_tvl_DAY", "column_name": "DAY", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__1.c4d0d5f594": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_65af0aa6c6537bd49876636e1f8d738d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_65af0aa6c6537bd49876636e1f8d738d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__1.c4d0d5f594", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_65af0aa6c6537bd49876636e1f8d738d.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__1", "alias": "daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/dbt_expectations_expect_row_va_65af0aa6c6537bd49876636e1f8d738d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_65af0aa6c6537bd49876636e1f8d738d"}, "created_at": 1665176151.673662, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.daily_tvl\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.daily_tvl_DAY", "column_name": "DAY", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_POOLED", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED"], "unique_id": "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED", "alias": "daily_tvl_TOTAL_VALUE_POOLED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.676255, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_tvl\nwhere TOTAL_VALUE_POOLED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_tvl_TOTAL_VALUE_POOLED", "column_name": "TOTAL_VALUE_POOLED", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_POOLED_USD", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD", "alias": "daily_tvl_TOTAL_VALUE_POOLED_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.677142, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_tvl\nwhere TOTAL_VALUE_POOLED_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_tvl_TOTAL_VALUE_POOLED_USD", "column_name": "TOTAL_VALUE_POOLED_USD", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_BONDED", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED"], "unique_id": "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED", "alias": "daily_tvl_TOTAL_VALUE_BONDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.677906, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_tvl\nwhere TOTAL_VALUE_BONDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_tvl_TOTAL_VALUE_BONDED", "column_name": "TOTAL_VALUE_BONDED", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_BONDED_USD", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD", "alias": "daily_tvl_TOTAL_VALUE_BONDED_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.678664, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_tvl\nwhere TOTAL_VALUE_BONDED_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_tvl_TOTAL_VALUE_BONDED_USD", "column_name": "TOTAL_VALUE_BONDED_USD", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_LOCKED", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED"], "unique_id": "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED", "alias": "daily_tvl_TOTAL_VALUE_LOCKED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.67941, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_tvl\nwhere TOTAL_VALUE_LOCKED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_tvl_TOTAL_VALUE_LOCKED", "column_name": "TOTAL_VALUE_LOCKED", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_VALUE_LOCKED_USD", "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD", "alias": "daily_tvl_TOTAL_VALUE_LOCKED_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.68028, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_tvl\nwhere TOTAL_VALUE_LOCKED_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_tvl_TOTAL_VALUE_LOCKED_USD", "column_name": "TOTAL_VALUE_LOCKED_USD", "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__daily_tvl')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.sql", "original_file_path": "models/silver/silver__daily_tvl.yml", "name": "dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY", "alias": "daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_tvl.yml/dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.681034, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DAY\n    from THORCHAIN_DEV.silver.daily_tvl\n    group by DAY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.daily_tvl_DAY", "column_name": null, "file_key_name": "models.silver__daily_tvl"}, "test.thorchain_models.not_null_silver__daily_earnings_DAY.507c4965f2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_DAY"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_DAY.507c4965f2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_DAY.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_DAY", "alias": "daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.68529, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_DAY", "column_name": "DAY", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__1.1bba89d3fd": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_afda9a5e4fdca8efa9ccdb754519ae59\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_afda9a5e4fdca8efa9ccdb754519ae59", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__1.1bba89d3fd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_afda9a5e4fdca8efa9ccdb754519ae59.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__1", "alias": "daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/dbt_expectations_expect_row_va_afda9a5e4fdca8efa9ccdb754519ae59.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_afda9a5e4fdca8efa9ccdb754519ae59"}, "created_at": 1665176151.686104, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.daily_earnings\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.daily_earnings_DAY", "column_name": "DAY", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_LIQUIDITY_FEES"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_LIQUIDITY_FEES.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_LIQUIDITY_FEES", "alias": "daily_earnings_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_LIQUIDITY_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6887019, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere LIQUIDITY_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_LIQUIDITY_FEES", "column_name": "LIQUIDITY_FEES", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_LIQUIDITY_FEES_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_LIQUIDITY_FEES_USD", "alias": "daily_earnings_LIQUIDITY_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.689461, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere LIQUIDITY_FEES_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_LIQUIDITY_FEES_USD", "column_name": "LIQUIDITY_FEES_USD", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_BLOCK_REWARDS"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_BLOCK_REWARDS.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_BLOCK_REWARDS", "alias": "daily_earnings_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_BLOCK_REWARDS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.690345, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere BLOCK_REWARDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_BLOCK_REWARDS", "column_name": "BLOCK_REWARDS", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_BLOCK_REWARDS_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_BLOCK_REWARDS_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_BLOCK_REWARDS_USD", "alias": "daily_earnings_BLOCK_REWARDS_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_BLOCK_REWARDS_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.691102, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere BLOCK_REWARDS_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_BLOCK_REWARDS_USD", "column_name": "BLOCK_REWARDS_USD", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_TOTAL_EARNINGS"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_TOTAL_EARNINGS.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_TOTAL_EARNINGS", "alias": "daily_earnings_TOTAL_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_TOTAL_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.691849, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere TOTAL_EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_TOTAL_EARNINGS", "column_name": "TOTAL_EARNINGS", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_TOTAL_EARNINGS_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_TOTAL_EARNINGS_USD", "alias": "daily_earnings_TOTAL_EARNINGS_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.692595, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere TOTAL_EARNINGS_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_TOTAL_EARNINGS_USD", "column_name": "TOTAL_EARNINGS_USD", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_NODES"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_NODES.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_EARNINGS_TO_NODES", "alias": "daily_earnings_EARNINGS_TO_NODES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_EARNINGS_TO_NODES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.69347, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere EARNINGS_TO_NODES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_EARNINGS_TO_NODES", "column_name": "EARNINGS_TO_NODES", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD", "alias": "daily_earnings_EARNINGS_TO_NODES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.69422, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere EARNINGS_TO_NODES_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_EARNINGS_TO_NODES_USD", "column_name": "EARNINGS_TO_NODES_USD", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_POOLS"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS", "alias": "daily_earnings_EARNINGS_TO_POOLS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_EARNINGS_TO_POOLS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6949701, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere EARNINGS_TO_POOLS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_EARNINGS_TO_POOLS", "column_name": "EARNINGS_TO_POOLS", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS_USD", "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD", "alias": "daily_earnings_EARNINGS_TO_POOLS_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.6958451, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_earnings\nwhere EARNINGS_TO_POOLS_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_earnings_EARNINGS_TO_POOLS_USD", "column_name": "EARNINGS_TO_POOLS_USD", "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY"], "model": "{{ get_where_subquery(ref('silver__daily_earnings')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea.sql", "original_file_path": "models/silver/silver__daily_earnings.yml", "name": "dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY", "alias": "daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_earnings.yml/dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_e8045d88eed8a3687f670e0696703bea"}, "created_at": 1665176151.6966, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DAY\n    from THORCHAIN_DEV.silver.daily_earnings\n    group by DAY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.daily_earnings_DAY", "column_name": null, "file_key_name": "models.silver__daily_earnings"}, "test.thorchain_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_DAY"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_DAY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_DAY", "alias": "daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7044559, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_DAY", "column_name": "DAY", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__1.4a002d4fdf": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b66c6a239992c1aedb7c2a6d6b2837d4\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b66c6a239992c1aedb7c2a6d6b2837d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__1.4a002d4fdf", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_b66c6a239992c1aedb7c2a6d6b2837d4.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__1", "alias": "daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/dbt_expectations_expect_row_va_b66c6a239992c1aedb7c2a6d6b2837d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_b66c6a239992c1aedb7c2a6d6b2837d4"}, "created_at": 1665176151.7052622, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.daily_pool_stats\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.daily_pool_stats_DAY", "column_name": "DAY", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_POOL_NAME.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_POOL_NAME", "alias": "daily_pool_stats_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.707849, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYSTEM_REWARDS", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_SYSTEM_REWARDS"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS", "alias": "daily_pool_stats_SYSTEM_REWARDS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_SYSTEM_REWARDS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.70874, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere SYSTEM_REWARDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_SYSTEM_REWARDS", "column_name": "SYSTEM_REWARDS", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYSTEM_REWARDS_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD", "alias": "daily_pool_stats_SYSTEM_REWARDS_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.709493, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere SYSTEM_REWARDS_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_SYSTEM_REWARDS_USD", "column_name": "SYSTEM_REWARDS_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_ASSET_LIQUIDITY"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_ASSET_LIQUIDITY", "alias": "daily_pool_stats_ASSET_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.710248, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere ASSET_LIQUIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_ASSET_LIQUIDITY", "column_name": "ASSET_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_ASSET_PRICE"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_ASSET_PRICE.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_ASSET_PRICE", "alias": "daily_pool_stats_ASSET_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_ASSET_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.710994, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere ASSET_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_ASSET_PRICE", "column_name": "ASSET_PRICE", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_ASSET_PRICE_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_ASSET_PRICE_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_ASSET_PRICE_USD", "alias": "daily_pool_stats_ASSET_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_ASSET_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.711864, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere ASSET_PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_ASSET_PRICE_USD", "column_name": "ASSET_PRICE_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_LIQUIDITY.9a12031e05": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_RUNE_LIQUIDITY"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_LIQUIDITY.9a12031e05", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_RUNE_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_RUNE_LIQUIDITY", "alias": "daily_pool_stats_RUNE_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_RUNE_LIQUIDITY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7126029, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere RUNE_LIQUIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_RUNE_LIQUIDITY", "column_name": "RUNE_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE.b781c85c5c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_PRICE", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_RUNE_PRICE"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE.b781c85c5c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_RUNE_PRICE.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_RUNE_PRICE", "alias": "daily_pool_stats_RUNE_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_RUNE_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.713345, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere RUNE_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_RUNE_PRICE", "column_name": "RUNE_PRICE", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE_USD.49c02d7724": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_PRICE_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_RUNE_PRICE_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE_USD.49c02d7724", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_RUNE_PRICE_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_RUNE_PRICE_USD", "alias": "daily_pool_stats_RUNE_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_RUNE_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.714417, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere RUNE_PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_RUNE_PRICE_USD", "column_name": "RUNE_PRICE_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_LIQUIDITY_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT", "alias": "daily_pool_stats_ADD_LIQUIDITY_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.715183, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere ADD_LIQUIDITY_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_ADD_LIQUIDITY_COUNT", "column_name": "ADD_LIQUIDITY_COUNT", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASSET_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY", "alias": "daily_pool_stats_ADD_ASSET_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7159522, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere ADD_ASSET_LIQUIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_ADD_ASSET_LIQUIDITY", "column_name": "ADD_ASSET_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASSET_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD", "alias": "daily_pool_stats_ADD_ASSET_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.716688, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere ADD_ASSET_LIQUIDITY_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_ADD_ASSET_LIQUIDITY_USD", "column_name": "ADD_ASSET_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD.3a6babb532": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_RUNE_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD.3a6babb532", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD", "alias": "daily_pool_stats_ADD_RUNE_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.71756, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere ADD_RUNE_LIQUIDITY_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_ADD_RUNE_LIQUIDITY_USD", "column_name": "ADD_RUNE_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_WITHDRAW_COUNT", "alias": "daily_pool_stats_WITHDRAW_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_WITHDRAW_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.718297, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere WITHDRAW_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_WITHDRAW_COUNT", "column_name": "WITHDRAW_COUNT", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_ASSET_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY", "alias": "daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7190359, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere WITHDRAW_ASSET_LIQUIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY", "column_name": "WITHDRAW_ASSET_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_ASSET_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD", "alias": "daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.719777, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere WITHDRAW_ASSET_LIQUIDITY_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD", "column_name": "WITHDRAW_ASSET_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY.e35cdf38a2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_RUNE_LIQUIDITY", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY.e35cdf38a2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY", "alias": "daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.720644, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere WITHDRAW_RUNE_LIQUIDITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY", "column_name": "WITHDRAW_RUNE_LIQUIDITY", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD.b1b68e9efc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_RUNE_LIQUIDITY_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD.b1b68e9efc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD", "alias": "daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.721388, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere WITHDRAW_RUNE_LIQUIDITY_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD", "column_name": "WITHDRAW_RUNE_LIQUIDITY_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IL_PROTECTION_PAID", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID", "alias": "daily_pool_stats_IL_PROTECTION_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7221189, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere IL_PROTECTION_PAID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_IL_PROTECTION_PAID", "column_name": "IL_PROTECTION_PAID", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IL_PROTECTION_PAID_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD", "alias": "daily_pool_stats_IL_PROTECTION_PAID_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.722985, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere IL_PROTECTION_PAID_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_IL_PROTECTION_PAID_USD", "column_name": "IL_PROTECTION_PAID_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_AVERAGE_SLIP"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_AVERAGE_SLIP", "alias": "daily_pool_stats_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_AVERAGE_SLIP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.723732, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere AVERAGE_SLIP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_AVERAGE_SLIP", "column_name": "AVERAGE_SLIP", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP", "alias": "daily_pool_stats_TO_ASSET_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.724468, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TO_ASSET_AVERAGE_SLIP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TO_ASSET_AVERAGE_SLIP", "column_name": "TO_ASSET_AVERAGE_SLIP", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP.b89bdb784c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_RUNE_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP.b89bdb784c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP", "alias": "daily_pool_stats_TO_RUNE_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.725209, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TO_RUNE_AVERAGE_SLIP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TO_RUNE_AVERAGE_SLIP", "column_name": "TO_RUNE_AVERAGE_SLIP", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_SWAP_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_SWAP_COUNT", "alias": "daily_pool_stats_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_SWAP_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.726088, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere SWAP_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_SWAP_COUNT", "column_name": "SWAP_COUNT", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT", "alias": "daily_pool_stats_TO_ASSET_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.72683, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TO_ASSET_SWAP_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TO_ASSET_SWAP_COUNT", "column_name": "TO_ASSET_SWAP_COUNT", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT.3e93a8e08c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_RUNE_SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT.3e93a8e08c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT", "alias": "daily_pool_stats_TO_RUNE_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.727571, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TO_RUNE_SWAP_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TO_RUNE_SWAP_COUNT", "column_name": "TO_RUNE_SWAP_COUNT", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE.8ec30e912b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_VOLUME_RUNE", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE.8ec30e912b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE", "alias": "daily_pool_stats_SWAP_VOLUME_RUNE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.728307, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere SWAP_VOLUME_RUNE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_SWAP_VOLUME_RUNE", "column_name": "SWAP_VOLUME_RUNE", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD.d97e13aeae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_VOLUME_RUNE_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD.d97e13aeae", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD", "alias": "daily_pool_stats_SWAP_VOLUME_RUNE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7291698, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere SWAP_VOLUME_RUNE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_SWAP_VOLUME_RUNE_USD", "column_name": "SWAP_VOLUME_RUNE_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_SWAP_VOLUME", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME", "alias": "daily_pool_stats_TO_ASSET_SWAP_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.729911, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TO_ASSET_SWAP_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TO_ASSET_SWAP_VOLUME", "column_name": "TO_ASSET_SWAP_VOLUME", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME.2af93618fb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_RUNE_SWAP_VOLUME", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME.2af93618fb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME", "alias": "daily_pool_stats_TO_RUNE_SWAP_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.73064, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TO_RUNE_SWAP_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TO_RUNE_SWAP_VOLUME", "column_name": "TO_RUNE_SWAP_VOLUME", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE.fa14408704": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SWAP_FEES_RUNE", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE.fa14408704", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE", "alias": "daily_pool_stats_TOTAL_SWAP_FEES_RUNE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.731374, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TOTAL_SWAP_FEES_RUNE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TOTAL_SWAP_FEES_RUNE", "column_name": "TOTAL_SWAP_FEES_RUNE", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_SWAP_FEES_USD", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD", "alias": "daily_pool_stats_TOTAL_SWAP_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.732231, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TOTAL_SWAP_FEES_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TOTAL_SWAP_FEES_USD", "column_name": "TOTAL_SWAP_FEES_USD", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_ASSET_SWAP_FEES", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES", "alias": "daily_pool_stats_TOTAL_ASSET_SWAP_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.732971, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TOTAL_ASSET_SWAP_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TOTAL_ASSET_SWAP_FEES", "column_name": "TOTAL_ASSET_SWAP_FEES", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES.e16f506989": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_ASSET_RUNE_FEES", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES.e16f506989", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES", "alias": "daily_pool_stats_TOTAL_ASSET_RUNE_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.733707, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere TOTAL_ASSET_RUNE_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_TOTAL_ASSET_RUNE_FEES", "column_name": "TOTAL_ASSET_RUNE_FEES", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_MEMBER_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT", "alias": "daily_pool_stats_UNIQUE_MEMBER_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.734582, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere UNIQUE_MEMBER_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_UNIQUE_MEMBER_COUNT", "column_name": "UNIQUE_MEMBER_COUNT", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_SWAPPER_COUNT", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT", "alias": "daily_pool_stats_UNIQUE_SWAPPER_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.735327, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere UNIQUE_SWAPPER_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_UNIQUE_SWAPPER_COUNT", "column_name": "UNIQUE_SWAPPER_COUNT", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_UNITS", "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__daily_pool_stats_LIQUIDITY_UNITS"], "unique_id": "test.thorchain_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "not_null_silver__daily_pool_stats_LIQUIDITY_UNITS", "alias": "daily_pool_stats_LIQUIDITY_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.736075, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.daily_pool_stats\nwhere LIQUIDITY_UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.daily_pool_stats_LIQUIDITY_UNITS", "column_name": "LIQUIDITY_UNITS", "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__daily_pool_stats')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b.sql", "original_file_path": "models/silver/silver__daily_pool_stats.yml", "name": "dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME", "alias": "daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__daily_pool_stats.yml/dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_ee3b3af325930b4c028f7dbbf999646b"}, "created_at": 1665176151.73682, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DAY, POOL_NAME\n    from THORCHAIN_DEV.silver.daily_pool_stats\n    group by DAY, POOL_NAME\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.daily_pool_stats_DAY", "column_name": null, "file_key_name": "models.silver__daily_pool_stats"}, "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.7eec23c0d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.7eec23c0d9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__asgard_fund_yggdrasil_events.yml", "name": "not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP", "alias": "asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__asgard_fund_yggdrasil_events.yml/not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7402399, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_TX_ID.5c8429a2d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__asgard_fund_yggdrasil_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_TX_ID.5c8429a2d6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__asgard_fund_yggdrasil_events_TX_ID.sql", "original_file_path": "models/silver/silver__asgard_fund_yggdrasil_events.yml", "name": "not_null_silver__asgard_fund_yggdrasil_events_TX_ID", "alias": "asgard_fund_yggdrasil_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__asgard_fund_yggdrasil_events.yml/not_null_silver__asgard_fund_yggdrasil_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.741041, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.asgard_fund_yggdrasil_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET.4b14ad0d1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__asgard_fund_yggdrasil_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET.4b14ad0d1c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__asgard_fund_yggdrasil_events_ASSET.sql", "original_file_path": "models/silver/silver__asgard_fund_yggdrasil_events.yml", "name": "not_null_silver__asgard_fund_yggdrasil_events_ASSET", "alias": "asgard_fund_yggdrasil_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__asgard_fund_yggdrasil_events.yml/not_null_silver__asgard_fund_yggdrasil_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7418098, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.asgard_fund_yggdrasil_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8.97d75351f4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8.97d75351f4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__asgard_fund_yggdrasil_events.yml", "name": "not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8", "alias": "asgard_fund_yggdrasil_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__asgard_fund_yggdrasil_events.yml/not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.742568, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.asgard_fund_yggdrasil_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY.b769677902": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VAULT_KEY", "model": "{{ get_where_subquery(ref('silver__asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY"], "unique_id": "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY.b769677902", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY.sql", "original_file_path": "models/silver/silver__asgard_fund_yggdrasil_events.yml", "name": "not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY", "alias": "asgard_fund_yggdrasil_events_VAULT_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__asgard_fund_yggdrasil_events.yml/not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7434502, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events\nwhere VAULT_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.asgard_fund_yggdrasil_events_VAULT_KEY", "column_name": "VAULT_KEY", "file_key_name": "models.silver__asgard_fund_yggdrasil_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__asgard_fund_yggdrasil_events_EVENT_ID__TX_ID__ASSET__ASSET_E8__VAULT_KEY__BLOCK_TIMESTAMP.3ef17ff2a7": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_c76e922ecaecf05e090be216f925c3c3\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "TX_ID", "ASSET", "ASSET_E8", "VAULT_KEY", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__asgard_fund_yggdrasil_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_c76e922ecaecf05e090be216f925c3c3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__asgard_fund_yggdrasil_events_EVENT_ID__TX_ID__ASSET__ASSET_E8__VAULT_KEY__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__asgard_fund_yggdrasil_events_EVENT_ID__TX_ID__ASSET__ASSET_E8__VAULT_KEY__BLOCK_TIMESTAMP.3ef17ff2a7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_c76e922ecaecf05e090be216f925c3c3.sql", "original_file_path": "models/silver/silver__asgard_fund_yggdrasil_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__asgard_fund_yggdrasil_events_EVENT_ID__TX_ID__ASSET__ASSET_E8__VAULT_KEY__BLOCK_TIMESTAMP", "alias": "asgard_fund_yggdrasil_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__asgard_fund_yggdrasil_events.yml/dbt_utils_unique_combination_o_c76e922ecaecf05e090be216f925c3c3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_c76e922ecaecf05e090be216f925c3c3"}, "created_at": 1665176151.744211, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        EVENT_ID, TX_ID, ASSET, ASSET_E8, VAULT_KEY, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events\n    group by EVENT_ID, TX_ID, ASSET, ASSET_E8, VAULT_KEY, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.asgard_fund_yggdrasil_events_EVENT_ID", "column_name": null, "file_key_name": "models.silver__asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.748221, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfers_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_ID", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.749289, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfers_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfers_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_FROM_ADDRESS", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/not_null_silver__transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.750057, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfers\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfers_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__thor_0_9a_zA_Z_39_.f2dba09fd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"FROM_ADDRESS <> 'MidgardBalanceCorrectionAddress'\",alias=\"dbt_expectations_expect_column_51d9adcf667e62898d440fbe84810f2a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "thor[0-9a-zA-Z]{39}", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_51d9adcf667e62898d440fbe84810f2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "FROM_ADDRESS <> 'MidgardBalanceCorrectionAddress'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__thor_0_9a_zA_Z_39_"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__thor_0_9a_zA_Z_39_.f2dba09fd9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_51d9adcf667e62898d440fbe84810f2a.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__thor_0_9a_zA_Z_39_", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_51d9adcf667e62898d440fbe84810f2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "FROM_ADDRESS <> 'MidgardBalanceCorrectionAddress'", "alias": "dbt_expectations_expect_column_51d9adcf667e62898d440fbe84810f2a"}, "created_at": 1665176151.750993, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, 'thor[0-9a-zA-Z]{39}', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from THORCHAIN_DEV.silver.transfers where FROM_ADDRESS <> 'MidgardBalanceCorrectionAddress') dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfers_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfers_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TO_ADDRESS", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7584808, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfers_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__thor_0_9a_zA_Z_39_.004ec62530": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"TO_ADDRESS <> 'MidgardBalanceCorrectionAddress'\",alias=\"dbt_expectations_expect_column_d387a47a8764e7187e9eed120218efda\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "thor[0-9a-zA-Z]{39}", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d387a47a8764e7187e9eed120218efda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TO_ADDRESS <> 'MidgardBalanceCorrectionAddress'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__thor_0_9a_zA_Z_39_"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__thor_0_9a_zA_Z_39_.004ec62530", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_d387a47a8764e7187e9eed120218efda.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__thor_0_9a_zA_Z_39_", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d387a47a8764e7187e9eed120218efda.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TO_ADDRESS <> 'MidgardBalanceCorrectionAddress'", "alias": "dbt_expectations_expect_column_d387a47a8764e7187e9eed120218efda"}, "created_at": 1665176151.759542, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, 'thor[0-9a-zA-Z]{39}', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from THORCHAIN_DEV.silver.transfers where TO_ADDRESS <> 'MidgardBalanceCorrectionAddress') dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT.f5e577a890": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfers_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT.f5e577a890", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfers_RUNE_AMOUNT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_RUNE_AMOUNT", "alias": "transfers_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/not_null_silver__transfers_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.76176, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.transfers\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfers_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT_USD.9c1469e6f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__transfers_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT_USD.9c1469e6f5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__transfers_RUNE_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_RUNE_AMOUNT_USD", "alias": "transfers_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__transfers.yml/not_null_silver__transfers_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1665176151.762696, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.silver.transfers where BLOCK_TIMESTAMP <= SYSDATE() - interval '2 day' AND BLOCK_TIMESTAMP >= '2021-04-13') dbt_subquery\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.transfers_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.silver__transfers"}, "test.thorchain_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_pool_depths_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "name": "not_null_silver__block_pool_depths_BLOCK_TIMESTAMP", "alias": "block_pool_depths_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_pool_depths.yml/not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.764641, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_pool_depths\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_pool_depths_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__block_pool_depths"}, "test.thorchain_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_pool_depths_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_pool_depths_POOL_NAME.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "name": "not_null_silver__block_pool_depths_POOL_NAME", "alias": "block_pool_depths_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_pool_depths.yml/not_null_silver__block_pool_depths_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.765431, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_pool_depths\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_pool_depths_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__block_pool_depths"}, "test.thorchain_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_pool_depths_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_pool_depths_ASSET_E8.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "name": "not_null_silver__block_pool_depths_ASSET_E8", "alias": "block_pool_depths_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_pool_depths.yml/not_null_silver__block_pool_depths_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.766197, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_pool_depths\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_pool_depths_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__block_pool_depths"}, "test.thorchain_models.not_null_silver__block_pool_depths_RUNE_E8.773bfaa76a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_pool_depths_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__block_pool_depths_RUNE_E8.773bfaa76a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_pool_depths_RUNE_E8.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "name": "not_null_silver__block_pool_depths_RUNE_E8", "alias": "block_pool_depths_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_pool_depths.yml/not_null_silver__block_pool_depths_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.767078, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_pool_depths\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_pool_depths_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.silver__block_pool_depths"}, "test.thorchain_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_E8", "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_pool_depths_SYNTH_E8"], "unique_id": "test.thorchain_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_pool_depths_SYNTH_E8.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "name": "not_null_silver__block_pool_depths_SYNTH_E8", "alias": "block_pool_depths_SYNTH_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_pool_depths.yml/not_null_silver__block_pool_depths_SYNTH_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7678232, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_pool_depths\nwhere SYNTH_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_pool_depths_SYNTH_E8", "column_name": "SYNTH_E8", "file_key_name": "models.silver__block_pool_depths"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__block_pool_depths')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_pool_depths"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438.sql", "original_file_path": "models/silver/silver__block_pool_depths.yml", "name": "dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME", "alias": "block_pool_depths_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_pool_depths.yml/dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_54f5bb2fd4fc4fd0e38329cb8168a438"}, "created_at": 1665176151.768575, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_TIMESTAMP, POOL_NAME\n    from THORCHAIN_DEV.silver.block_pool_depths\n    group by BLOCK_TIMESTAMP, POOL_NAME\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.block_pool_depths_BLOCK_TIMESTAMP", "column_name": null, "file_key_name": "models.silver__block_pool_depths"}, "test.thorchain_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_DAY"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_DAY.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_DAY", "alias": "pool_block_statistics_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.775609, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_DAY", "column_name": "DAY", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__1.e3c9116788": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b50a0fb3621a13dfeed362dadb19a911\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b50a0fb3621a13dfeed362dadb19a911", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__1.e3c9116788", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_b50a0fb3621a13dfeed362dadb19a911.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__1", "alias": "pool_block_statistics_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/dbt_expectations_expect_row_va_b50a0fb3621a13dfeed362dadb19a911.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_b50a0fb3621a13dfeed362dadb19a911"}, "created_at": 1665176151.776414, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.pool_block_statistics\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.pool_block_statistics_DAY", "column_name": "DAY", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASSET_LIQUIDITY_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME", "alias": "pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_2b838ef8047e9a1025ffd36319907961"}, "created_at": 1665176151.779021, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ADD_ASSET_LIQUIDITY_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME", "column_name": "ADD_ASSET_LIQUIDITY_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_LIQUIDITY_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT", "alias": "pool_block_statistics_ADD_LIQUIDITY_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.779914, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ADD_LIQUIDITY_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ADD_LIQUIDITY_COUNT", "column_name": "ADD_LIQUIDITY_COUNT", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_LIQUIDITY_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME", "alias": "pool_block_statistics_ADD_LIQUIDITY_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.780673, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ADD_LIQUIDITY_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ADD_LIQUIDITY_VOLUME", "column_name": "ADD_LIQUIDITY_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME.dc4fce7fce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__pool_block_st_ceef049e004774843b2af189b3ba971e\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_RUNE_LIQUIDITY_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_ceef049e004774843b2af189b3ba971e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME.dc4fce7fce", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_st_ceef049e004774843b2af189b3ba971e.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME", "alias": "pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_st_ceef049e004774843b2af189b3ba971e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_ceef049e004774843b2af189b3ba971e"}, "created_at": 1665176151.781429, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ADD_RUNE_LIQUIDITY_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME", "column_name": "ADD_RUNE_LIQUIDITY_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_ASSET.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ASSET", "alias": "pool_block_statistics_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.782186, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_DEPTH", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ASSET_DEPTH"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_ASSET_DEPTH.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ASSET_DEPTH", "alias": "pool_block_statistics_ASSET_DEPTH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_ASSET_DEPTH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.783061, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ASSET_DEPTH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ASSET_DEPTH", "column_name": "ASSET_DEPTH", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ASSET_PRICE"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_ASSET_PRICE.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ASSET_PRICE", "alias": "pool_block_statistics_ASSET_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_ASSET_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.783809, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ASSET_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ASSET_PRICE", "column_name": "ASSET_PRICE", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_PRICE_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_ASSET_PRICE_USD"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_ASSET_PRICE_USD.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_ASSET_PRICE_USD", "alias": "pool_block_statistics_ASSET_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_ASSET_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7845492, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere ASSET_PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_ASSET_PRICE_USD", "column_name": "ASSET_PRICE_USD", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_AVERAGE_SLIP"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_AVERAGE_SLIP", "alias": "pool_block_statistics_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_AVERAGE_SLIP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.785674, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere AVERAGE_SLIP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_AVERAGE_SLIP", "column_name": "AVERAGE_SLIP", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMPERMANENT_LOSS_PROTECTION_PAID", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": "not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID", "alias": "pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_silver__pool_block_st_f7ba95fd4617615cf10ba227787756e8"}, "created_at": 1665176151.786443, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere IMPERMANENT_LOSS_PROTECTION_PAID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID", "column_name": "IMPERMANENT_LOSS_PROTECTION_PAID", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_RUNE_DEPTH.ba24bcf4aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_DEPTH", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_RUNE_DEPTH"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_RUNE_DEPTH.ba24bcf4aa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_RUNE_DEPTH.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_RUNE_DEPTH", "alias": "pool_block_statistics_RUNE_DEPTH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_RUNE_DEPTH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.787192, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere RUNE_DEPTH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_RUNE_DEPTH", "column_name": "RUNE_DEPTH", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_STATUS.12571911dc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_STATUS"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_STATUS.12571911dc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_STATUS.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_STATUS", "alias": "pool_block_statistics_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_STATUS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.787931, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_STATUS", "column_name": "STATUS", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_SWAP_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_SWAP_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_SWAP_COUNT", "alias": "pool_block_statistics_SWAP_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_SWAP_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.788797, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere SWAP_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_SWAP_COUNT", "column_name": "SWAP_COUNT", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SWAP_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_SWAP_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_SWAP_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_SWAP_VOLUME", "alias": "pool_block_statistics_SWAP_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_SWAP_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7895339, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere SWAP_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_SWAP_VOLUME", "column_name": "SWAP_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP", "alias": "pool_block_statistics_TO_ASSET_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.790269, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_ASSET_AVERAGE_SLIP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_ASSET_AVERAGE_SLIP", "column_name": "TO_ASSET_AVERAGE_SLIP", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_ASSET_COUNT", "alias": "pool_block_statistics_TO_ASSET_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_ASSET_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.791005, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_ASSET_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_ASSET_COUNT", "column_name": "TO_ASSET_COUNT", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_FEES"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_FEES.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_ASSET_FEES", "alias": "pool_block_statistics_TO_ASSET_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_ASSET_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.791862, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_ASSET_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_ASSET_FEES", "column_name": "TO_ASSET_FEES", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ASSET_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_ASSET_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_ASSET_VOLUME", "alias": "pool_block_statistics_TO_ASSET_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.792602, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_ASSET_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_ASSET_VOLUME", "column_name": "TO_ASSET_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP.4ffb26f47a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_RUNE_AVERAGE_SLIP", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP.4ffb26f47a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP", "alias": "pool_block_statistics_TO_RUNE_AVERAGE_SLIP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.793335, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_RUNE_AVERAGE_SLIP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_RUNE_AVERAGE_SLIP", "column_name": "TO_RUNE_AVERAGE_SLIP", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_COUNT.3734626432": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_RUNE_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_RUNE_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_COUNT.3734626432", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_RUNE_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_RUNE_COUNT", "alias": "pool_block_statistics_TO_RUNE_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_RUNE_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7942002, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_RUNE_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_RUNE_COUNT", "column_name": "TO_RUNE_COUNT", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_FEES.dcc05b09f6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_RUNE_FEES", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_RUNE_FEES"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_FEES.dcc05b09f6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_RUNE_FEES.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_RUNE_FEES", "alias": "pool_block_statistics_TO_RUNE_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_RUNE_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7949362, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_RUNE_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_RUNE_FEES", "column_name": "TO_RUNE_FEES", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_VOLUME.39f8343ad9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_RUNE_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TO_RUNE_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_VOLUME.39f8343ad9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TO_RUNE_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TO_RUNE_VOLUME", "alias": "pool_block_statistics_TO_RUNE_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TO_RUNE_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.795674, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TO_RUNE_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TO_RUNE_VOLUME", "column_name": "TO_RUNE_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTALFEES", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_TOTALFEES"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_TOTALFEES.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_TOTALFEES", "alias": "pool_block_statistics_TOTALFEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_TOTALFEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.796406, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere TOTALFEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_TOTALFEES", "column_name": "TOTALFEES", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_MEMBER_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT", "alias": "pool_block_statistics_UNIQUE_MEMBER_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7972639, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere UNIQUE_MEMBER_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_UNIQUE_MEMBER_COUNT", "column_name": "UNIQUE_MEMBER_COUNT", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_SWAPPER_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT", "alias": "pool_block_statistics_UNIQUE_SWAPPER_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.798005, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere UNIQUE_SWAPPER_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_UNIQUE_SWAPPER_COUNT", "column_name": "UNIQUE_SWAPPER_COUNT", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNITS", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_UNITS"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_UNITS.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_UNITS", "alias": "pool_block_statistics_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.79874, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_UNITS", "column_name": "UNITS", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_ASSET_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME", "alias": "pool_block_statistics_WITHDRAW_ASSET_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.7994711, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere WITHDRAW_ASSET_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_WITHDRAW_ASSET_VOLUME", "column_name": "WITHDRAW_ASSET_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_COUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_COUNT.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_WITHDRAW_COUNT", "alias": "pool_block_statistics_WITHDRAW_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_WITHDRAW_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.800342, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere WITHDRAW_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_WITHDRAW_COUNT", "column_name": "WITHDRAW_COUNT", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME.2c6f4ae4b2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_RUNE_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME.2c6f4ae4b2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME", "alias": "pool_block_statistics_WITHDRAW_RUNE_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.801078, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere WITHDRAW_RUNE_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_WITHDRAW_RUNE_VOLUME", "column_name": "WITHDRAW_RUNE_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "WITHDRAW_VOLUME", "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_statistics_WITHDRAW_VOLUME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "not_null_silver__pool_block_statistics_WITHDRAW_VOLUME", "alias": "pool_block_statistics_WITHDRAW_VOLUME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8018088, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_statistics\nwhere WITHDRAW_VOLUME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_statistics_WITHDRAW_VOLUME", "column_name": "WITHDRAW_VOLUME", "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["DAY", "ASSET"], "model": "{{ get_where_subquery(ref('silver__pool_block_statistics')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693.sql", "original_file_path": "models/silver/silver__pool_block_statistics.yml", "name": "dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET", "alias": "pool_block_statistics_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_statistics.yml/dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_695c762c9a4e0091848158293ea35693"}, "created_at": 1665176151.802559, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        DAY, ASSET\n    from THORCHAIN_DEV.silver.pool_block_statistics\n    group by DAY, ASSET\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.pool_block_statistics_DAY", "column_name": null, "file_key_name": "models.silver__pool_block_statistics"}, "test.thorchain_models.not_null_silver__prices_BLOCK_ID.b3347041fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__prices_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_silver__prices_BLOCK_ID.b3347041fc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__prices_BLOCK_ID.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_BLOCK_ID", "alias": "prices_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/not_null_silver__prices_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.806305, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.prices\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.prices_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__prices"}, "test.thorchain_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__prices_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__prices_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_BLOCK_TIMESTAMP", "alias": "prices_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/not_null_silver__prices_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.807112, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.prices\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.prices_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__prices"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1", "alias": "prices_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_9da273394f8f2bb28c152409efed30bd"}, "created_at": 1665176151.8078861, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.prices\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.prices_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__prices"}, "test.thorchain_models.not_null_silver__prices_PRICE_RUNE_ASSET.3b8a85b233": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_RUNE_ASSET", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__prices_PRICE_RUNE_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__prices_PRICE_RUNE_ASSET.3b8a85b233", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__prices_PRICE_RUNE_ASSET.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_PRICE_RUNE_ASSET", "alias": "prices_PRICE_RUNE_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/not_null_silver__prices_PRICE_RUNE_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8106189, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.prices\nwhere PRICE_RUNE_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.prices_PRICE_RUNE_ASSET", "column_name": "PRICE_RUNE_ASSET", "file_key_name": "models.silver__prices"}, "test.thorchain_models.not_null_silver__prices_PRICE_ASSET_RUNE.19b631d861": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_ASSET_RUNE", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__prices_PRICE_ASSET_RUNE"], "unique_id": "test.thorchain_models.not_null_silver__prices_PRICE_ASSET_RUNE.19b631d861", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__prices_PRICE_ASSET_RUNE.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_PRICE_ASSET_RUNE", "alias": "prices_PRICE_ASSET_RUNE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/not_null_silver__prices_PRICE_ASSET_RUNE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8114, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.prices\nwhere PRICE_ASSET_RUNE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.prices_PRICE_ASSET_RUNE", "column_name": "PRICE_ASSET_RUNE", "file_key_name": "models.silver__prices"}, "test.thorchain_models.not_null_silver__prices_ASSET_USD.a900d8c697": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_USD", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__prices_ASSET_USD"], "unique_id": "test.thorchain_models.not_null_silver__prices_ASSET_USD.a900d8c697", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__prices_ASSET_USD.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_ASSET_USD", "alias": "prices_ASSET_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/not_null_silver__prices_ASSET_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.812168, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.prices\nwhere ASSET_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.prices_ASSET_USD", "column_name": "ASSET_USD", "file_key_name": "models.silver__prices"}, "test.thorchain_models.not_null_silver__prices_RUNE_USD.2ac6d1ee7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_USD", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__prices_RUNE_USD"], "unique_id": "test.thorchain_models.not_null_silver__prices_RUNE_USD.2ac6d1ee7a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__prices_RUNE_USD.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_RUNE_USD", "alias": "prices_RUNE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/not_null_silver__prices_RUNE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.812914, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.prices\nwhere RUNE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.prices_RUNE_USD", "column_name": "RUNE_USD", "file_key_name": "models.silver__prices"}, "test.thorchain_models.not_null_silver__prices_POOL_NAME.7eacc16a03": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__prices_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__prices_POOL_NAME.7eacc16a03", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__prices_POOL_NAME.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "not_null_silver__prices_POOL_NAME", "alias": "prices_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/not_null_silver__prices_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.813801, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.prices\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.prices_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__prices"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__prices')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__prices"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815.sql", "original_file_path": "models/silver/silver__prices.yml", "name": "dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME", "alias": "prices_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__prices.yml/dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f6e279ceae09d7398500f23ebd437815"}, "created_at": 1665176151.814559, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, POOL_NAME\n    from THORCHAIN_DEV.silver.prices\n    group by BLOCK_ID, POOL_NAME\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.prices_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__prices"}, "test.thorchain_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pending_liquidity_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pending_liquidity_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "name": "not_null_silver__pending_liquidity_events_POOL_NAME", "alias": "pending_liquidity_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.yml/not_null_silver__pending_liquidity_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.81795, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pending_liquidity_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pending_liquidity_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__pending_liquidity_events"}, "test.thorchain_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pending_liquidity_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pending_liquidity_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "name": "not_null_silver__pending_liquidity_events_ASSET_E8", "alias": "pending_liquidity_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.yml/not_null_silver__pending_liquidity_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.818733, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pending_liquidity_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pending_liquidity_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__pending_liquidity_events"}, "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_ADDRESS.4812d25cff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_ADDRESS", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pending_liquidity_events_RUNE_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_ADDRESS.4812d25cff", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pending_liquidity_events_RUNE_ADDRESS.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "name": "not_null_silver__pending_liquidity_events_RUNE_ADDRESS", "alias": "pending_liquidity_events_RUNE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.yml/not_null_silver__pending_liquidity_events_RUNE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8198159, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pending_liquidity_events\nwhere RUNE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pending_liquidity_events_RUNE_ADDRESS", "column_name": "RUNE_ADDRESS", "file_key_name": "models.silver__pending_liquidity_events"}, "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_E8.d42e986972": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pending_liquidity_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_E8.d42e986972", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pending_liquidity_events_RUNE_E8.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "name": "not_null_silver__pending_liquidity_events_RUNE_E8", "alias": "pending_liquidity_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.yml/not_null_silver__pending_liquidity_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.820572, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pending_liquidity_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pending_liquidity_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.silver__pending_liquidity_events"}, "test.thorchain_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PENDING_TYPE", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pending_liquidity_events_PENDING_TYPE"], "unique_id": "test.thorchain_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pending_liquidity_events_PENDING_TYPE.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "name": "not_null_silver__pending_liquidity_events_PENDING_TYPE", "alias": "pending_liquidity_events_PENDING_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.yml/not_null_silver__pending_liquidity_events_PENDING_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.821316, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pending_liquidity_events\nwhere PENDING_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pending_liquidity_events_PENDING_TYPE", "column_name": "PENDING_TYPE", "file_key_name": "models.silver__pending_liquidity_events"}, "test.thorchain_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "name": "not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP", "alias": "pending_liquidity_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.yml/not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.822201, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pending_liquidity_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pending_liquidity_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pending_liquidity_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__RUNE_TX_ID__RUNE_ADDRESS__PENDING_TYPE__BLOCK_TIMESTAMP.f76bd250fb": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b31ec109ad7d69ece7fd83f4950b0eae\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "POOL_NAME", "ASSET_TX_ID", "ASSET_BLOCKCHAIN", "ASSET_ADDRESS", "RUNE_TX_ID", "RUNE_ADDRESS", "PENDING_TYPE", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__pending_liquidity_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b31ec109ad7d69ece7fd83f4950b0eae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__RUNE_TX_ID__RUNE_ADDRESS__PENDING_TYPE__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__RUNE_TX_ID__RUNE_ADDRESS__PENDING_TYPE__BLOCK_TIMESTAMP.f76bd250fb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_b31ec109ad7d69ece7fd83f4950b0eae.sql", "original_file_path": "models/silver/silver__pending_liquidity_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__RUNE_TX_ID__RUNE_ADDRESS__PENDING_TYPE__BLOCK_TIMESTAMP", "alias": "pending_liquidity_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pending_liquidity_events.yml/dbt_utils_unique_combination_o_b31ec109ad7d69ece7fd83f4950b0eae.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_b31ec109ad7d69ece7fd83f4950b0eae"}, "created_at": 1665176151.822954, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        EVENT_ID, POOL_NAME, ASSET_TX_ID, ASSET_BLOCKCHAIN, ASSET_ADDRESS, RUNE_TX_ID, RUNE_ADDRESS, PENDING_TYPE, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.pending_liquidity_events\n    group by EVENT_ID, POOL_NAME, ASSET_TX_ID, ASSET_BLOCKCHAIN, ASSET_ADDRESS, RUNE_TX_ID, RUNE_ADDRESS, PENDING_TYPE, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.pending_liquidity_events_EVENT_ID", "column_name": null, "file_key_name": "models.silver__pending_liquidity_events"}, "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_block_rewards_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "name": "not_null_silver__total_block_rewards_BLOCK_TIMESTAMP", "alias": "total_block_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.yml/not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.827061, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_block_rewards\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_block_rewards_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__total_block_rewards"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1", "alias": "total_block_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.yml/dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_56bd833e7a783543b57683c07cad0001"}, "created_at": 1665176151.827987, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.total_block_rewards\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.total_block_rewards_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__total_block_rewards"}, "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_block_rewards_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_block_rewards_BLOCK_ID.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "name": "not_null_silver__total_block_rewards_BLOCK_ID", "alias": "total_block_rewards_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.yml/not_null_silver__total_block_rewards_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.830585, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_block_rewards\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_block_rewards_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__total_block_rewards"}, "test.thorchain_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_ENTITY", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_block_rewards_REWARD_ENTITY"], "unique_id": "test.thorchain_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_block_rewards_REWARD_ENTITY.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "name": "not_null_silver__total_block_rewards_REWARD_ENTITY", "alias": "total_block_rewards_REWARD_ENTITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.yml/not_null_silver__total_block_rewards_REWARD_ENTITY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.831358, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_block_rewards\nwhere REWARD_ENTITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_block_rewards_REWARD_ENTITY", "column_name": "REWARD_ENTITY", "file_key_name": "models.silver__total_block_rewards"}, "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT.ebf47bba39": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_block_rewards_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT.ebf47bba39", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_block_rewards_RUNE_AMOUNT.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "name": "not_null_silver__total_block_rewards_RUNE_AMOUNT", "alias": "total_block_rewards_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.yml/not_null_silver__total_block_rewards_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8323169, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.total_block_rewards\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_block_rewards_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.silver__total_block_rewards"}, "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT_USD.054408ab82": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= CURRENT_DATE - 2 AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= CURRENT_DATE - 2 AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__total_block_rewards_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT_USD.054408ab82", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__total_block_rewards_RUNE_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "name": "not_null_silver__total_block_rewards_RUNE_AMOUNT_USD", "alias": "total_block_rewards_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.yml/not_null_silver__total_block_rewards_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= CURRENT_DATE - 2 AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1665176151.833461, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.silver.total_block_rewards where BLOCK_TIMESTAMP <= CURRENT_DATE - 2 AND BLOCK_TIMESTAMP >= '2021-04-13') dbt_subquery\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.total_block_rewards_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.silver__total_block_rewards"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "REWARD_ENTITY"], "model": "{{ get_where_subquery(ref('silver__total_block_rewards')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__total_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf.sql", "original_file_path": "models/silver/silver__total_block_rewards.yml", "name": "dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY", "alias": "total_block_rewards_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__total_block_rewards.yml/dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_f6fcfc1ed0803db068ffa343e9f96fbf"}, "created_at": 1665176151.834341, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, REWARD_ENTITY\n    from THORCHAIN_DEV.silver.total_block_rewards\n    group by BLOCK_ID, REWARD_ENTITY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.total_block_rewards_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__total_block_rewards"}, "test.thorchain_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__gas_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__gas_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__gas_events.yml", "name": "not_null_silver__gas_events_BLOCK_TIMESTAMP", "alias": "gas_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__gas_events.yml/not_null_silver__gas_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.837771, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.gas_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.gas_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__gas_events"}, "test.thorchain_models.not_null_silver__gas_events_ASSET.59ad7ccacd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__gas_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__gas_events_ASSET.59ad7ccacd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__gas_events_ASSET.sql", "original_file_path": "models/silver/silver__gas_events.yml", "name": "not_null_silver__gas_events_ASSET", "alias": "gas_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__gas_events.yml/not_null_silver__gas_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.838722, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.gas_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.gas_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__gas_events"}, "test.thorchain_models.not_null_silver__gas_events_RUNE_E8.4accfe95df": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__gas_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__gas_events_RUNE_E8.4accfe95df", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__gas_events_RUNE_E8.sql", "original_file_path": "models/silver/silver__gas_events.yml", "name": "not_null_silver__gas_events_RUNE_E8", "alias": "gas_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__gas_events.yml/not_null_silver__gas_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.839493, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.gas_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.gas_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.silver__gas_events"}, "test.thorchain_models.not_null_silver__gas_events_TX_COUNT.a45fc07260": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__gas_events_TX_COUNT"], "unique_id": "test.thorchain_models.not_null_silver__gas_events_TX_COUNT.a45fc07260", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__gas_events_TX_COUNT.sql", "original_file_path": "models/silver/silver__gas_events.yml", "name": "not_null_silver__gas_events_TX_COUNT", "alias": "gas_events_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__gas_events.yml/not_null_silver__gas_events_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.84025, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.gas_events\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.gas_events_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__gas_events"}, "test.thorchain_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__gas_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__gas_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__gas_events.yml", "name": "not_null_silver__gas_events_ASSET_E8", "alias": "gas_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__gas_events.yml/not_null_silver__gas_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.841001, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.gas_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.gas_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__gas_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "ASSET", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__gas_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__gas_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40.sql", "original_file_path": "models/silver/silver__gas_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP", "alias": "gas_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__gas_events.yml/dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_2a8604a8b7d703ccc4f57bb6f598ba40"}, "created_at": 1665176151.8419101, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        EVENT_ID, ASSET, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.gas_events\n    group by EVENT_ID, ASSET, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.gas_events_EVENT_ID", "column_name": null, "file_key_name": "models.silver__gas_events"}, "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_BLOCK_TIMESTAMP", "alias": "pool_block_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8459609, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1", "alias": "pool_block_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_e45b750ef0b3d5aab123a6e5193c647c"}, "created_at": 1665176151.846774, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.pool_block_balances\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.pool_block_balances_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_BLOCK_ID.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_BLOCK_ID", "alias": "pool_block_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.849477, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_POOL_NAME.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_POOL_NAME", "alias": "pool_block_balances_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.850243, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT.5a9eb1961c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT.5a9eb1961c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_RUNE_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_RUNE_AMOUNT", "alias": "pool_block_balances_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.851007, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT_USD.a2fdbc2215": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT_USD.a2fdbc2215", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_RUNE_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_RUNE_AMOUNT_USD", "alias": "pool_block_balances_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1665176151.85231, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.silver.pool_block_balances where BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13') dbt_subquery\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_ASSET_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_ASSET_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_ASSET_AMOUNT", "alias": "pool_block_balances_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_ASSET_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.853085, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere ASSET_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_ASSET_AMOUNT", "column_name": "ASSET_AMOUNT", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_ASSET_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_ASSET_AMOUNT_USD", "alias": "pool_block_balances_ASSET_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8538399, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere ASSET_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_ASSET_AMOUNT_USD", "column_name": "ASSET_AMOUNT_USD", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_AMOUNT", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_SYNTH_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_SYNTH_AMOUNT.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_SYNTH_AMOUNT", "alias": "pool_block_balances_SYNTH_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_SYNTH_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.85459, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere SYNTH_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_SYNTH_AMOUNT", "column_name": "SYNTH_AMOUNT", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD", "alias": "pool_block_balances_SYNTH_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.855456, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.pool_block_balances\nwhere SYNTH_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.pool_block_balances_SYNTH_AMOUNT_USD", "column_name": "SYNTH_AMOUNT_USD", "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_ID", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__pool_block_balances')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__pool_block_balances"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9.sql", "original_file_path": "models/silver/silver__pool_block_balances.yml", "name": "dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME", "alias": "pool_block_balances_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__pool_block_balances.yml/dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_b81ac9894957b103c4b6a5e259a2cad9"}, "created_at": 1665176151.856201, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_ID, POOL_NAME\n    from THORCHAIN_DEV.silver.pool_block_balances\n    group by BLOCK_ID, POOL_NAME\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.pool_block_balances_BLOCK_ID", "column_name": null, "file_key_name": "models.silver__pool_block_balances"}, "test.thorchain_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__active_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__active_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__active_vault_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__active_vault_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__active_vault_events.yml", "name": "not_null_silver__active_vault_events_BLOCK_TIMESTAMP", "alias": "active_vault_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__active_vault_events.yml/not_null_silver__active_vault_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.859116, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.active_vault_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.active_vault_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__active_vault_events"}, "test.thorchain_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASGARD_ADDR", "model": "{{ get_where_subquery(ref('silver__active_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__active_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__active_vault_events_ADD_ASGARD_ADDR"], "unique_id": "test.thorchain_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__active_vault_events_ADD_ASGARD_ADDR.sql", "original_file_path": "models/silver/silver__active_vault_events.yml", "name": "not_null_silver__active_vault_events_ADD_ASGARD_ADDR", "alias": "active_vault_events_ADD_ASGARD_ADDR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__active_vault_events.yml/not_null_silver__active_vault_events_ADD_ASGARD_ADDR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.859906, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.active_vault_events\nwhere ADD_ASGARD_ADDR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.active_vault_events_ADD_ASGARD_ADDR", "column_name": "ADD_ASGARD_ADDR", "file_key_name": "models.silver__active_vault_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["EVENT_ID", "BLOCK_TIMESTAMP", "ADD_ASGARD_ADDR"], "model": "{{ get_where_subquery(ref('silver__active_vault_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__active_vault_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7.sql", "original_file_path": "models/silver/silver__active_vault_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR", "alias": "active_vault_events_EVENT_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__active_vault_events.yml/dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_0d63789058f52da39ab0c87e9e7318b7"}, "created_at": 1665176151.860815, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        EVENT_ID, BLOCK_TIMESTAMP, ADD_ASGARD_ADDR\n    from THORCHAIN_DEV.silver.active_vault_events\n    group by EVENT_ID, BLOCK_TIMESTAMP, ADD_ASGARD_ADDR\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.active_vault_events_EVENT_ID", "column_name": null, "file_key_name": "models.silver__active_vault_events"}, "test.thorchain_models.not_null_silver__errata_events_BLOCK_TIMESTAMP.ed26a3347f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__errata_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__errata_events_BLOCK_TIMESTAMP.ed26a3347f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__errata_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__errata_events.yml", "name": "not_null_silver__errata_events_BLOCK_TIMESTAMP", "alias": "errata_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__errata_events.yml/not_null_silver__errata_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8641899, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.errata_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.errata_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__errata_events"}, "test.thorchain_models.not_null_silver__errata_events_IN_TX.46f2587784": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IN_TX", "model": "{{ get_where_subquery(ref('silver__errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__errata_events_IN_TX"], "unique_id": "test.thorchain_models.not_null_silver__errata_events_IN_TX.46f2587784", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__errata_events_IN_TX.sql", "original_file_path": "models/silver/silver__errata_events.yml", "name": "not_null_silver__errata_events_IN_TX", "alias": "errata_events_IN_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__errata_events.yml/not_null_silver__errata_events_IN_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.864984, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.errata_events\nwhere IN_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.errata_events_IN_TX", "column_name": "IN_TX", "file_key_name": "models.silver__errata_events"}, "test.thorchain_models.not_null_silver__errata_events_ASSET.bf7cbb369c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('silver__errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__errata_events_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__errata_events_ASSET.bf7cbb369c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__errata_events_ASSET.sql", "original_file_path": "models/silver/silver__errata_events.yml", "name": "not_null_silver__errata_events_ASSET", "alias": "errata_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__errata_events.yml/not_null_silver__errata_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.865752, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.errata_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.errata_events_ASSET", "column_name": "ASSET", "file_key_name": "models.silver__errata_events"}, "test.thorchain_models.not_null_silver__errata_events_ASSET_E8.b87bf8f0b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__errata_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__errata_events_ASSET_E8.b87bf8f0b8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__errata_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__errata_events.yml", "name": "not_null_silver__errata_events_ASSET_E8", "alias": "errata_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__errata_events.yml/not_null_silver__errata_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.866633, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.errata_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.errata_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__errata_events"}, "test.thorchain_models.not_null_silver__errata_events_RUNE_E8.d04fa6d569": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('silver__errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__errata_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__errata_events_RUNE_E8.d04fa6d569", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__errata_events_RUNE_E8.sql", "original_file_path": "models/silver/silver__errata_events.yml", "name": "not_null_silver__errata_events_RUNE_E8", "alias": "errata_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__errata_events.yml/not_null_silver__errata_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.86739, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.errata_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.errata_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.silver__errata_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__errata_events_IN_TX__ASSET__BLOCK_TIMESTAMP.a1b8166c5f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e1b148fe64d1e531a1c45b3f1dad688f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["IN_TX", "ASSET", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__errata_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__errata_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e1b148fe64d1e531a1c45b3f1dad688f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__errata_events_IN_TX__ASSET__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__errata_events_IN_TX__ASSET__BLOCK_TIMESTAMP.a1b8166c5f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_e1b148fe64d1e531a1c45b3f1dad688f.sql", "original_file_path": "models/silver/silver__errata_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__errata_events_IN_TX__ASSET__BLOCK_TIMESTAMP", "alias": "errata_events_IN_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__errata_events.yml/dbt_utils_unique_combination_o_e1b148fe64d1e531a1c45b3f1dad688f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_e1b148fe64d1e531a1c45b3f1dad688f"}, "created_at": 1665176151.868153, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        IN_TX, ASSET, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.errata_events\n    group by IN_TX, ASSET, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.errata_events_IN_TX", "column_name": null, "file_key_name": "models.silver__errata_events"}, "test.thorchain_models.not_null_silver__upgrades_BLOCK_TIMESTAMP.868821c1d9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_BLOCK_TIMESTAMP.868821c1d9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_BLOCK_TIMESTAMP", "alias": "upgrades_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.872372, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.upgrades\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__upgrades_BLOCK_TIMESTAMP__day__1.7be6afcdb1": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f534594868e8c863a72f617ab147ecbc\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f534594868e8c863a72f617ab147ecbc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__upgrades_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__upgrades_BLOCK_TIMESTAMP__day__1.7be6afcdb1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_f534594868e8c863a72f617ab147ecbc.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__upgrades_BLOCK_TIMESTAMP__day__1", "alias": "upgrades_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/dbt_expectations_expect_row_va_f534594868e8c863a72f617ab147ecbc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_f534594868e8c863a72f617ab147ecbc"}, "created_at": 1665176151.8731809, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.silver.upgrades\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.upgrades_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_BLOCK_ID.070f1680e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_BLOCK_ID.070f1680e3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_BLOCK_ID.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_BLOCK_ID", "alias": "upgrades_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.875781, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.upgrades\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_FROM_ADDRESS.38943cd872": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_FROM_ADDRESS.38943cd872", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_FROM_ADDRESS", "alias": "upgrades_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.876674, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.upgrades\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_TO_ADDRESS.ff5bcf771b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_TO_ADDRESS.ff5bcf771b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_TO_ADDRESS", "alias": "upgrades_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.877433, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.upgrades\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__upgrades_TO_ADDRESS__thor_0_9a_zA_Z_39_.4a808837e8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_387849309c75e81530e8298632695c86\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "thor[0-9a-zA-Z]{39}", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_387849309c75e81530e8298632695c86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["thorchain_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__upgrades_TO_ADDRESS__thor_0_9a_zA_Z_39_"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__upgrades_TO_ADDRESS__thor_0_9a_zA_Z_39_.4a808837e8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_387849309c75e81530e8298632695c86.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__upgrades_TO_ADDRESS__thor_0_9a_zA_Z_39_", "alias": "upgrades_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/dbt_expectations_expect_column_387849309c75e81530e8298632695c86.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_387849309c75e81530e8298632695c86"}, "created_at": 1665176151.878191, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, 'thor[0-9a-zA-Z]{39}', 1, 1)\n\n\n > 0\n as expression\n\n\n    from THORCHAIN_DEV.silver.upgrades\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.upgrades_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_BURN_ASSET.08a2741c2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BURN_ASSET", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_BURN_ASSET"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_BURN_ASSET.08a2741c2a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_BURN_ASSET.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_BURN_ASSET", "alias": "upgrades_BURN_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_BURN_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8803651, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.upgrades\nwhere BURN_ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_BURN_ASSET", "column_name": "BURN_ASSET", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT.6f5174d19c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT.6f5174d19c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_RUNE_AMOUNT.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_RUNE_AMOUNT", "alias": "upgrades_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8811362, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.upgrades\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT_USD.c580af1338": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT_USD.c580af1338", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_RUNE_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_RUNE_AMOUNT_USD", "alias": "upgrades_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1665176151.8821938, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.silver.upgrades where BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13') dbt_subquery\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT.4926b6dfbf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_AMOUNT", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_MINT_AMOUNT"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT.4926b6dfbf", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_MINT_AMOUNT.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_MINT_AMOUNT", "alias": "upgrades_MINT_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_MINT_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8829582, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.upgrades\nwhere MINT_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_MINT_AMOUNT", "column_name": "MINT_AMOUNT", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT_USD.88e239598a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINT_AMOUNT_USD", "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__upgrades_MINT_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT_USD.88e239598a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__upgrades_MINT_AMOUNT_USD.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "not_null_silver__upgrades_MINT_AMOUNT_USD", "alias": "upgrades_MINT_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/not_null_silver__upgrades_MINT_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13'"}, "created_at": 1665176151.883873, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.silver.upgrades where BLOCK_TIMESTAMP <= current_date -2 AND BLOCK_TIMESTAMP >= '2021-04-13') dbt_subquery\nwhere MINT_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.upgrades_MINT_AMOUNT_USD", "column_name": "MINT_AMOUNT_USD", "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__upgrades_TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__TO_ADDRESS__BURN_ASSET.35b0e1e2da": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_efbad14014224a904f5ab742b3b2a9af\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "BLOCK_TIMESTAMP", "FROM_ADDRESS", "TO_ADDRESS", "BURN_ASSET"], "model": "{{ get_where_subquery(ref('silver__upgrades')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__upgrades"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_efbad14014224a904f5ab742b3b2a9af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__upgrades_TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__TO_ADDRESS__BURN_ASSET"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__upgrades_TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__TO_ADDRESS__BURN_ASSET.35b0e1e2da", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_efbad14014224a904f5ab742b3b2a9af.sql", "original_file_path": "models/silver/silver__upgrades.yml", "name": "dbt_utils_unique_combination_of_columns_silver__upgrades_TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__TO_ADDRESS__BURN_ASSET", "alias": "upgrades_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__upgrades.yml/dbt_utils_unique_combination_o_efbad14014224a904f5ab742b3b2a9af.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_efbad14014224a904f5ab742b3b2a9af"}, "created_at": 1665176151.884653, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, BLOCK_TIMESTAMP, FROM_ADDRESS, TO_ADDRESS, BURN_ASSET\n    from THORCHAIN_DEV.silver.upgrades\n    group by TX_ID, BLOCK_TIMESTAMP, FROM_ADDRESS, TO_ADDRESS, BURN_ASSET\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.upgrades_TX_ID", "column_name": null, "file_key_name": "models.silver__upgrades"}, "test.thorchain_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_log_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_log_TIMESTAMP.sql", "original_file_path": "models/silver/silver__block_log.yml", "name": "not_null_silver__block_log_TIMESTAMP", "alias": "block_log_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_log.yml/not_null_silver__block_log_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.888313, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_log\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_log_TIMESTAMP", "column_name": "TIMESTAMP", "file_key_name": "models.silver__block_log"}, "test.thorchain_models.not_null_silver__block_log_HEIGHT.e9a4d0156c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HEIGHT", "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_log_HEIGHT"], "unique_id": "test.thorchain_models.not_null_silver__block_log_HEIGHT.e9a4d0156c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_log_HEIGHT.sql", "original_file_path": "models/silver/silver__block_log.yml", "name": "not_null_silver__block_log_HEIGHT", "alias": "block_log_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_log.yml/not_null_silver__block_log_HEIGHT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.889097, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_log\nwhere HEIGHT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_log_HEIGHT", "column_name": "HEIGHT", "file_key_name": "models.silver__block_log"}, "test.thorchain_models.not_null_silver__block_log_HASH.832559848d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__block_log_HASH"], "unique_id": "test.thorchain_models.not_null_silver__block_log_HASH.832559848d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__block_log_HASH.sql", "original_file_path": "models/silver/silver__block_log.yml", "name": "not_null_silver__block_log_HASH", "alias": "block_log_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_log.yml/not_null_silver__block_log_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.889846, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.block_log\nwhere HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.block_log_HASH", "column_name": "HASH", "file_key_name": "models.silver__block_log"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["HEIGHT", "TIMESTAMP", "HASH", "AGG_STATE"], "model": "{{ get_where_subquery(ref('silver__block_log')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7.sql", "original_file_path": "models/silver/silver__block_log.yml", "name": "dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE", "alias": "block_log_HEIGHT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__block_log"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__block_log.yml/dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_00ae7d0103218d620bbdaac21883d8a7"}, "created_at": 1665176151.890721, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        HEIGHT, TIMESTAMP, HASH, AGG_STATE\n    from THORCHAIN_DEV.silver.block_log\n    group by HEIGHT, TIMESTAMP, HASH, AGG_STATE\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.block_log_HEIGHT", "column_name": null, "file_key_name": "models.silver__block_log"}, "test.thorchain_models.not_null_silver__stake_events_POOL_NAME.341d5d5927": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__stake_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__stake_events_POOL_NAME.341d5d5927", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__stake_events_POOL_NAME.sql", "original_file_path": "models/silver/silver__stake_events.yml", "name": "not_null_silver__stake_events_POOL_NAME", "alias": "stake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.yml/not_null_silver__stake_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.894368, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.stake_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.stake_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__stake_events"}, "test.thorchain_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__stake_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__stake_events_ASSET_E8.sql", "original_file_path": "models/silver/silver__stake_events.yml", "name": "not_null_silver__stake_events_ASSET_E8", "alias": "stake_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.yml/not_null_silver__stake_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8951612, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.stake_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.stake_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.silver__stake_events"}, "test.thorchain_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__stake_events_STAKE_UNITS"], "unique_id": "test.thorchain_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__stake_events_STAKE_UNITS.sql", "original_file_path": "models/silver/silver__stake_events.yml", "name": "not_null_silver__stake_events_STAKE_UNITS", "alias": "stake_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.yml/not_null_silver__stake_events_STAKE_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.896051, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.stake_events\nwhere STAKE_UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.stake_events_STAKE_UNITS", "column_name": "STAKE_UNITS", "file_key_name": "models.silver__stake_events"}, "test.thorchain_models.not_null_silver__stake_events_RUNE_E8.b9a59bf8ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__stake_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__stake_events_RUNE_E8.b9a59bf8ec", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__stake_events_RUNE_E8.sql", "original_file_path": "models/silver/silver__stake_events.yml", "name": "not_null_silver__stake_events_RUNE_E8", "alias": "stake_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.yml/not_null_silver__stake_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.8968189, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.stake_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.stake_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.silver__stake_events"}, "test.thorchain_models.not_null_silver__stake_events__ASSET_IN_RUNE_E8.75a9ea038c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ASSET_IN_RUNE_E8", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__stake_events__ASSET_IN_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__stake_events__ASSET_IN_RUNE_E8.75a9ea038c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__stake_events__ASSET_IN_RUNE_E8.sql", "original_file_path": "models/silver/silver__stake_events.yml", "name": "not_null_silver__stake_events__ASSET_IN_RUNE_E8", "alias": "stake_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.yml/not_null_silver__stake_events__ASSET_IN_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.897579, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.stake_events\nwhere _ASSET_IN_RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.stake_events", "column_name": "_ASSET_IN_RUNE_E8", "file_key_name": "models.silver__stake_events"}, "test.thorchain_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__stake_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__stake_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__stake_events.yml", "name": "not_null_silver__stake_events_BLOCK_TIMESTAMP", "alias": "stake_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.yml/not_null_silver__stake_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.898321, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.stake_events\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.stake_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__stake_events"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__RUNE_TX_ID__RUNE_ADDRESS__BLOCK_TIMESTAMP.0e22ecc2c0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_367f298d62085d4d8d6708ed580e0a28\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["POOL_NAME", "ASSET_TX_ID", "ASSET_BLOCKCHAIN", "ASSET_ADDRESS", "STAKE_UNITS", "RUNE_TX_ID", "RUNE_ADDRESS", "BLOCK_TIMESTAMP"], "model": "{{ get_where_subquery(ref('silver__stake_events')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__stake_events"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_367f298d62085d4d8d6708ed580e0a28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__RUNE_TX_ID__RUNE_ADDRESS__BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__RUNE_TX_ID__RUNE_ADDRESS__BLOCK_TIMESTAMP.0e22ecc2c0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_367f298d62085d4d8d6708ed580e0a28.sql", "original_file_path": "models/silver/silver__stake_events.yml", "name": "dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__RUNE_TX_ID__RUNE_ADDRESS__BLOCK_TIMESTAMP", "alias": "stake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__stake_events.yml/dbt_utils_unique_combination_o_367f298d62085d4d8d6708ed580e0a28.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_367f298d62085d4d8d6708ed580e0a28"}, "created_at": 1665176151.8992121, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        POOL_NAME, ASSET_TX_ID, ASSET_BLOCKCHAIN, ASSET_ADDRESS, STAKE_UNITS, RUNE_TX_ID, RUNE_ADDRESS, BLOCK_TIMESTAMP\n    from THORCHAIN_DEV.silver.stake_events\n    group by POOL_NAME, ASSET_TX_ID, ASSET_BLOCKCHAIN, ASSET_ADDRESS, STAKE_UNITS, RUNE_TX_ID, RUNE_ADDRESS, BLOCK_TIMESTAMP\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.stake_events_POOL_NAME", "column_name": null, "file_key_name": "models.silver__stake_events"}, "test.thorchain_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__rewards_event_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "name": "not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP", "alias": "rewards_event_entries_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_event_entries.yml/not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.9028962, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.rewards_event_entries\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.rewards_event_entries_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__rewards_event_entries"}, "test.thorchain_models.not_null_silver__rewards_event_entries_RUNE_E8.d2d96ab281": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__rewards_event_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__rewards_event_entries_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_silver__rewards_event_entries_RUNE_E8.d2d96ab281", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__rewards_event_entries_RUNE_E8.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "name": "not_null_silver__rewards_event_entries_RUNE_E8", "alias": "rewards_event_entries_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_event_entries.yml/not_null_silver__rewards_event_entries_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.90369, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.rewards_event_entries\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.rewards_event_entries_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.silver__rewards_event_entries"}, "test.thorchain_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__rewards_event_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_silver", "fqn": ["thorchain_models", "silver", "not_null_silver__rewards_event_entries_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_silver__rewards_event_entries_POOL_NAME.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "name": "not_null_silver__rewards_event_entries_POOL_NAME", "alias": "rewards_event_entries_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_event_entries.yml/not_null_silver__rewards_event_entries_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176151.904601, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.silver.rewards_event_entries\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_silver.rewards_event_entries_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.silver__rewards_event_entries"}, "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME.49f4595c4a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_62391ff95357fb33d287f9e15021f34c\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_TIMESTAMP", "POOL_NAME"], "model": "{{ get_where_subquery(ref('silver__rewards_event_entries')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.silver__rewards_event_entries"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_62391ff95357fb33d287f9e15021f34c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["thorchain_models", "silver", "dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME"], "unique_id": "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME.49f4595c4a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_utils_unique_combination_o_62391ff95357fb33d287f9e15021f34c.sql", "original_file_path": "models/silver/silver__rewards_event_entries.yml", "name": "dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME", "alias": "rewards_event_entries_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/silver/silver__rewards_event_entries.yml/dbt_utils_unique_combination_o_62391ff95357fb33d287f9e15021f34c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_62391ff95357fb33d287f9e15021f34c"}, "created_at": 1665176151.905369, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_TIMESTAMP, POOL_NAME\n    from THORCHAIN_DEV.silver.rewards_event_entries\n    group by BLOCK_TIMESTAMP, POOL_NAME\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_utils_unique_combination_of_columns_silver.rewards_event_entries_BLOCK_TIMESTAMP", "column_name": null, "file_key_name": "models.silver__rewards_event_entries"}, "test.thorchain_models.tests__fact_prices__block_id-assert_no_gaps": {"raw_sql": "{{ sequence_distinct_gaps_dim_block_id(ref(\"core__fact_prices\"), \"block_id\") }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.sequence_distinct_gaps_dim_block_id"], "nodes": ["model.thorchain_models.core__fact_prices", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_prices__block_id-assert_no_gaps"], "unique_id": "test.thorchain_models.tests__fact_prices__block_id-assert_no_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_prices__block_id-assert_no_gaps.sql", "original_file_path": "tests/tests__fact_prices__block_id-assert_no_gaps.sql", "name": "tests__fact_prices__block_id-assert_no_gaps", "alias": "fact_prices", "checksum": {"name": "sha256", "checksum": "74c023d2cb72ec9624fde66cd5fef57769a6b8deff801fd393932f270d9c5589"}, "tags": [], "refs": [["core__fact_prices"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_prices__block_id-assert_no_gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176530.891038, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            block_id,\n            LAG(\n                block_id,\n                1\n            ) over (\n                ORDER BY\n                    block_id ASC\n            ) AS prev_block_id\n        FROM\n            (\n                SELECT\n                    DISTINCT block_id\n                FROM\n                    THORCHAIN_DEV.core.fact_prices A\n                    JOIN THORCHAIN_DEV.core.dim_block\n                    b\n                    ON A.dim_block_id = b.dim_block_id\n                WHERE\n                    A.dim_block_id <> '-1'\n                    AND b.block_timestamp :: DATE < CURRENT_DATE\n            )\n    )\nSELECT\n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_prices"}, "test.thorchain_models.tests__fact_swaps_assert_all_ids_exist_swap_events": {"raw_sql": "{{ all_ids_exist(ref(\"core__fact_swap_events\"), \"tx_id\", ref(\"core__fact_swaps\"), \"tx_id\") }}", "resource_type": "test", "depends_on": {"macros": [], "nodes": ["model.thorchain_models.core__fact_swaps"]}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_swaps_assert_all_ids_exist_swap_events"], "unique_id": "test.thorchain_models.tests__fact_swaps_assert_all_ids_exist_swap_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_swaps_assert_all_ids_exist_swap_events.sql", "original_file_path": "tests/tests__fact_swaps_assert_all_ids_exist_swap_events.sql", "name": "tests__fact_swaps_assert_all_ids_exist_swap_events", "alias": "fact_swaps_assert_all_ids_exist_swap_events", "checksum": {"name": "sha256", "checksum": "44ef6b134f130b45a3aadc24c21bf29c201ef895c4f0984ace3cad28aa338a20"}, "tags": [], "refs": [["core__fact_swap_events"], ["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665176530.930778}, "test.thorchain_models.tests__fact_daily_earnings__day_assert_no_gaps": {"raw_sql": "{{ date_gaps(ref(\"core__fact_daily_earnings\"), [], \"day\", dict(start_date = \"cast('2021-07-22' as date)\", end_date = \"cast('2021-08-11' as date)\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.date_gaps"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_daily_earnings__day_assert_no_gaps"], "unique_id": "test.thorchain_models.tests__fact_daily_earnings__day_assert_no_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_daily_earnings__day_assert_no_gaps.sql", "original_file_path": "tests/tests__fact_daily_earnings__day_assert_no_gaps.sql", "name": "tests__fact_daily_earnings__day_assert_no_gaps", "alias": "fact_daily_earnings", "checksum": {"name": "sha256", "checksum": "24f8630d69a36394abc2a953952a42d2892f48e366c3f75b846eea80db717a96"}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_daily_earnings__day_assert_no_gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.6232781, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            day,\n            LAG(\n                day,\n                1\n            ) over (\n                \n                ORDER BY\n                    day ASC\n            ) AS prev_day\n        FROM\n            THORCHAIN_DEV.core.fact_daily_earnings\n    )\nSELECT\n    \n    prev_day,\n    day,\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) - 1 AS gap\nFROM\n    source\n    LEFT JOIN (\n        \n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 20\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-07-22' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-08-11' as date)\n\n)\n\nselect * from filtered\n\n\n            )\n) exclude\n    ON source.day = exclude.date_day\nWHERE\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) > 1 \n    AND source.day != exclude.date_day\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_daily_earnings"}, "test.thorchain_models.tests__fact_block_pool_depths__block_id_assert_no_gaps": {"raw_sql": "{{ sequence_distinct_gaps_dim_block_id (ref(\"core__fact_block_pool_depths\"), \"block_id\") }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.sequence_distinct_gaps_dim_block_id"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_block_pool_depths__block_id_assert_no_gaps"], "unique_id": "test.thorchain_models.tests__fact_block_pool_depths__block_id_assert_no_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_block_pool_depths__block_id_assert_no_gaps.sql", "original_file_path": "tests/tests__fact_block_pool_depths__block_id_assert_no_gaps.sql", "name": "tests__fact_block_pool_depths__block_id_assert_no_gaps", "alias": "fact_block_pool_depths", "checksum": {"name": "sha256", "checksum": "7688176d836f5b93dfe6b52425723439a09c83178d4c801935757470201298bb"}, "tags": [], "refs": [["core__fact_block_pool_depths"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_block_pool_depths__block_id_assert_no_gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.640349, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            block_id,\n            LAG(\n                block_id,\n                1\n            ) over (\n                ORDER BY\n                    block_id ASC\n            ) AS prev_block_id\n        FROM\n            (\n                SELECT\n                    DISTINCT block_id\n                FROM\n                    THORCHAIN_DEV.core.fact_block_pool_depths A\n                    JOIN THORCHAIN_DEV.core.dim_block\n                    b\n                    ON A.dim_block_id = b.dim_block_id\n                WHERE\n                    A.dim_block_id <> '-1'\n                    AND b.block_timestamp :: DATE < CURRENT_DATE\n            )\n    )\nSELECT\n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_block_pool_depths"}, "test.thorchain_models.tests__fact_pool_block_statistics__day_assert_no_gap": {"raw_sql": "{{ date_gaps(ref(\"core__fact_pool_block_statistics\"), [], \"day\", dict(start_date = \"cast('2021-07-22' as date)\", end_date = \"cast('2021-08-11' as date)\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.date_gaps"], "nodes": ["model.thorchain_models.core__fact_pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_pool_block_statistics__day_assert_no_gap"], "unique_id": "test.thorchain_models.tests__fact_pool_block_statistics__day_assert_no_gap", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_pool_block_statistics__day_assert_no_gap.sql", "original_file_path": "tests/tests__fact_pool_block_statistics__day_assert_no_gap.sql", "name": "tests__fact_pool_block_statistics__day_assert_no_gap", "alias": "fact_pool_block_statistics", "checksum": {"name": "sha256", "checksum": "ac445b39f3f806cc51cb84b99a337baf3d8f8c5a2d950cdbdcfff8828a1dfb09"}, "tags": [], "refs": [["core__fact_pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_pool_block_statistics__day_assert_no_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.644129, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            day,\n            LAG(\n                day,\n                1\n            ) over (\n                \n                ORDER BY\n                    day ASC\n            ) AS prev_day\n        FROM\n            THORCHAIN_DEV.core.fact_pool_block_statistics\n    )\nSELECT\n    \n    prev_day,\n    day,\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) - 1 AS gap\nFROM\n    source\n    LEFT JOIN (\n        \n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 20\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-07-22' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-08-11' as date)\n\n)\n\nselect * from filtered\n\n\n            )\n) exclude\n    ON source.day = exclude.date_day\nWHERE\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) > 1 \n    AND source.day != exclude.date_day\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_pool_block_statistics"}, "test.thorchain_models.tests__fact_pool_block_balances__block_id_assert_no_gaps": {"raw_sql": "{{ sequence_distinct_gaps_dim_block_id(ref(\"corte__fact_pool_block_balances\"), \"block_id\") }}", "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.sequence_distinct_gaps_dim_block_id"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_pool_block_balances__block_id_assert_no_gaps"], "unique_id": "test.thorchain_models.tests__fact_pool_block_balances__block_id_assert_no_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_pool_block_balances__block_id_assert_no_gaps.sql", "original_file_path": "tests/tests__fact_pool_block_balances__block_id_assert_no_gaps.sql", "name": "tests__fact_pool_block_balances__block_id_assert_no_gaps", "alias": "fact_pool_block_balances", "checksum": {"name": "sha256", "checksum": "8278afd4a99e3dec32c297062c05b59dad6b9d3d15c04b3c32870114294a72d4"}, "tags": [], "refs": [["corte__fact_pool_block_balances"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.647051}, "test.thorchain_models.tests__fact_total_value_locked_day_assert_no_gap": {"raw_sql": "{{ date_gaps(ref(\"core__fact_total_value_locked\"), [], \"day\", dict(start_date = \"cast('2021-07-22' as date)\", end_date = \"cast('2021-08-11' as date)\"), dict(start_date = \"cast('2021-11-12' as date)\", end_date = \"cast('2021-11-18' as date)\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.date_gaps"], "nodes": ["model.thorchain_models.core__fact_total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_total_value_locked_day_assert_no_gap"], "unique_id": "test.thorchain_models.tests__fact_total_value_locked_day_assert_no_gap", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_total_value_locked_day_assert_no_gap.sql", "original_file_path": "tests/tests__fact_total_value_locked_day_assert_no_gap.sql", "name": "tests__fact_total_value_locked_day_assert_no_gap", "alias": "fact_total_value_locked_day_assert_no_gap", "checksum": {"name": "sha256", "checksum": "a41b4eec3148927af7e6431daabfef7f099d8089728122fc01005fb240229ea9"}, "tags": [], "refs": [["core__fact_total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_total_value_locked_day_assert_no_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.649867, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            day,\n            LAG(\n                day,\n                1\n            ) over (\n                \n                ORDER BY\n                    day ASC\n            ) AS prev_day\n        FROM\n            THORCHAIN_DEV.core.fact_total_value_locked\n    )\nSELECT\n    \n    prev_day,\n    day,\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) - 1 AS gap\nFROM\n    source\n    LEFT JOIN (\n        \n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 20\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-07-22' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-08-11' as date)\n\n)\n\nselect * from filtered\n\n\n            )UNION ALL\n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 6\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-11-12' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-11-18' as date)\n\n)\n\nselect * from filtered\n\n\n            )\n) exclude\n    ON source.day = exclude.date_day\nWHERE\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) > 1 \n    AND source.day != exclude.date_day\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_total_value_locked_day_assert_no_gap"}, "test.thorchain_models.tests__fact_total_block_rewards_block_id_assert_no_gaps": {"raw_sql": "{{ config(\n    warn_if = \"> 10\",\n    severity = \"warn\"\n) }}\n{{ sequence_distinct_gaps_dim_block_id(ref(\"core__fact_total_block_rewards\"), \"block_id\") }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.sequence_distinct_gaps_dim_block_id"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "warn", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "> 10", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_total_block_rewards_block_id_assert_no_gaps"], "unique_id": "test.thorchain_models.tests__fact_total_block_rewards_block_id_assert_no_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_total_block_rewards_block_id_assert_no_gaps.sql", "original_file_path": "tests/tests__fact_total_block_rewards_block_id_assert_no_gaps.sql", "name": "tests__fact_total_block_rewards_block_id_assert_no_gaps", "alias": "fact_total_block_rewards_block_id_assert_no_gaps", "checksum": {"name": "sha256", "checksum": "6e5598ae9ed4a2e4f4f27f8777ee304f763c0c8c1a1d2cc46482996a210f4402"}, "tags": [], "refs": [["core__fact_total_block_rewards"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_total_block_rewards_block_id_assert_no_gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "warn_if": "> 10", "severity": "warn"}, "created_at": 1665177474.6540391, "compiled_sql": "\nWITH source AS (\n        SELECT\n            \n            block_id,\n            LAG(\n                block_id,\n                1\n            ) over (\n                ORDER BY\n                    block_id ASC\n            ) AS prev_block_id\n        FROM\n            (\n                SELECT\n                    DISTINCT block_id\n                FROM\n                    THORCHAIN_DEV.core.fact_total_block_rewards A\n                    JOIN THORCHAIN_DEV.core.dim_block\n                    b\n                    ON A.dim_block_id = b.dim_block_id\n                WHERE\n                    A.dim_block_id <> '-1'\n                    AND b.block_timestamp :: DATE < CURRENT_DATE\n            )\n    )\nSELECT\n    prev_block_id,\n    block_id,\n    block_id - prev_block_id\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_id - prev_block_id <> 1\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_total_block_rewards_block_id_assert_no_gaps"}, "test.thorchain_models.tests__fact_pool_block_fees__day_assert_no_gap": {"raw_sql": "{{ date_gaps(ref(\"core__fact_pool_block_fees\"), [], \"day\", dict(start_date = \"cast('2021-07-22' as date)\", end_date = \"cast('2021-08-11' as date)\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.date_gaps"], "nodes": ["model.thorchain_models.core__fact_pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_pool_block_fees__day_assert_no_gap"], "unique_id": "test.thorchain_models.tests__fact_pool_block_fees__day_assert_no_gap", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_pool_block_fees__day_assert_no_gap.sql", "original_file_path": "tests/tests__fact_pool_block_fees__day_assert_no_gap.sql", "name": "tests__fact_pool_block_fees__day_assert_no_gap", "alias": "fact_pool_block_fees", "checksum": {"name": "sha256", "checksum": "74a890d21fd5309160196874293d21982229f4da6592cf8bd144953cd1ca6f8b"}, "tags": [], "refs": [["core__fact_pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_pool_block_fees__day_assert_no_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.656501, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            day,\n            LAG(\n                day,\n                1\n            ) over (\n                \n                ORDER BY\n                    day ASC\n            ) AS prev_day\n        FROM\n            THORCHAIN_DEV.core.fact_pool_block_fees\n    )\nSELECT\n    \n    prev_day,\n    day,\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) - 1 AS gap\nFROM\n    source\n    LEFT JOIN (\n        \n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 20\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-07-22' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-08-11' as date)\n\n)\n\nselect * from filtered\n\n\n            )\n) exclude\n    ON source.day = exclude.date_day\nWHERE\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) > 1 \n    AND source.day != exclude.date_day\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_pool_block_fees"}, "test.thorchain_models.tests__fact_daily_pool_stats__day_assert_no_gaps": {"raw_sql": "{{ date_gaps(ref(\"core__fact_daily_pool_stats\"), [], \"day\", dict(start_date = \"cast('2021-07-22' as date)\", end_date = \"cast('2021-08-11' as date)\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.date_gaps"], "nodes": ["model.thorchain_models.core__fact_daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_daily_pool_stats__day_assert_no_gaps"], "unique_id": "test.thorchain_models.tests__fact_daily_pool_stats__day_assert_no_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_daily_pool_stats__day_assert_no_gaps.sql", "original_file_path": "tests/tests__fact_daily_pool_stats__day_assert_no_gaps.sql", "name": "tests__fact_daily_pool_stats__day_assert_no_gaps", "alias": "fact_daily_pool_stats", "checksum": {"name": "sha256", "checksum": "0d5e74ece5812e73d37ce0f28cc4c5959584da3800810ec1527aed83ab7b7f37"}, "tags": [], "refs": [["core__fact_daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_daily_pool_stats__day_assert_no_gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.659335, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            day,\n            LAG(\n                day,\n                1\n            ) over (\n                \n                ORDER BY\n                    day ASC\n            ) AS prev_day\n        FROM\n            THORCHAIN_DEV.core.fact_daily_pool_stats\n    )\nSELECT\n    \n    prev_day,\n    day,\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) - 1 AS gap\nFROM\n    source\n    LEFT JOIN (\n        \n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 20\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-07-22' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-08-11' as date)\n\n)\n\nselect * from filtered\n\n\n            )\n) exclude\n    ON source.day = exclude.date_day\nWHERE\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) > 1 \n    AND source.day != exclude.date_day\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_daily_pool_stats"}, "test.thorchain_models.tests__fact_daily_tvl__day_assert_no_gaps": {"raw_sql": "{{ date_gaps(ref(\"core__fact_daily_tvl\"), [], \"day\", dict(start_date = \"cast('2021-07-22' as date)\", end_date = \"cast('2021-08-11' as date)\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.date_gaps"], "nodes": ["model.thorchain_models.core__fact_daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_daily_tvl__day_assert_no_gaps"], "unique_id": "test.thorchain_models.tests__fact_daily_tvl__day_assert_no_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_daily_tvl__day_assert_no_gaps.sql", "original_file_path": "tests/tests__fact_daily_tvl__day_assert_no_gaps.sql", "name": "tests__fact_daily_tvl__day_assert_no_gaps", "alias": "fact_daily_tvl", "checksum": {"name": "sha256", "checksum": "271d172d11832b850b752d521973fcb13cb1d7edb9556699f190c5696e786f05"}, "tags": [], "refs": [["core__fact_daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_daily_tvl__day_assert_no_gaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.662635, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            day,\n            LAG(\n                day,\n                1\n            ) over (\n                \n                ORDER BY\n                    day ASC\n            ) AS prev_day\n        FROM\n            THORCHAIN_DEV.core.fact_daily_tvl\n    )\nSELECT\n    \n    prev_day,\n    day,\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) - 1 AS gap\nFROM\n    source\n    LEFT JOIN (\n        \n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 20\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-07-22' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-08-11' as date)\n\n)\n\nselect * from filtered\n\n\n            )\n) exclude\n    ON source.day = exclude.date_day\nWHERE\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) > 1 \n    AND source.day != exclude.date_day\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_daily_tvl"}, "test.thorchain_models.tests__fact_block_rewards__day_assert_no_gap": {"raw_sql": "{{ date_gaps(ref(\"core__fact_block_rewards\"), [], \"day\", dict(start_date = \"cast('2021-07-22' as date)\", end_date = \"cast('2021-08-11' as date)\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.date_gaps"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "tests", "fqn": ["thorchain_models", "tests__fact_block_rewards__day_assert_no_gap"], "unique_id": "test.thorchain_models.tests__fact_block_rewards__day_assert_no_gap", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "tests__fact_block_rewards__day_assert_no_gap.sql", "original_file_path": "tests/tests__fact_block_rewards__day_assert_no_gap.sql", "name": "tests__fact_block_rewards__day_assert_no_gap", "alias": "fact_block_rewards", "checksum": {"name": "sha256", "checksum": "96c2dbd2e6d9f59cdcb51bdefbed3d3209c18222283b327c951bb89acdc0c8c5"}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/tests/tests__fact_block_rewards__day_assert_no_gap.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665177474.6664379, "compiled_sql": "WITH source AS (\n        SELECT\n            \n            day,\n            LAG(\n                day,\n                1\n            ) over (\n                \n                ORDER BY\n                    day ASC\n            ) AS prev_day\n        FROM\n            THORCHAIN_DEV.core.fact_block_rewards\n    )\nSELECT\n    \n    prev_day,\n    day,\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) - 1 AS gap\nFROM\n    source\n    LEFT JOIN (\n        \n            (\n            \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 20\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2021-07-22' as date)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2021-08-11' as date)\n\n)\n\nselect * from filtered\n\n\n            )\n) exclude\n    ON source.day = exclude.date_day\nWHERE\n    DATEDIFF(\n        days,\n        prev_day,\n        day\n    ) > 1 \n    AND source.day != exclude.date_day\nORDER BY\n    gap DESC\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.tests.fact_block_rewards"}, "model.thorchain_models.core__fact_pool_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_pool_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    asset,\n    status,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.asset','a.status','a.block_timestamp']\n  ) }} AS fact_pool_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  status,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__pool_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_pool_events"], "unique_id": "model.thorchain_models.core__fact_pool_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_pool_events.sql", "original_file_path": "models/core/core__fact_pool_events.sql", "name": "core__fact_pool_events", "alias": "fact_pool_events", "checksum": {"name": "sha256", "checksum": "8b931b626c89f5531307521797004d49f3f34ed9f547acf96838da217e20e418"}, "tags": [], "refs": [["silver__pool_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows that the status of the pool at each block id", "columns": {"FACT_POOL_EVENTS_ID": {"name": "FACT_POOL_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "The asset/pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "The current status for this pool", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_pool_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_pool_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.3303769, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    asset,\n    status,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.pool_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_pool_events\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      THORCHAIN_DEV.core.fact_pool_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.status as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_pool_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  status,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_pool_events"}, "model.thorchain_models.core__fact_refund_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_refund_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    asset_2nd,\n    asset_2nd_e8,\n    memo,\n    code,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__refund_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.tx_id','a.blockchain','a.from_address' ,'a.to_address','a. asset', 'a.asset_2nd', 'a.memo', 'a.code', 'a.reason', 'a.block_timestamp']\n  ) }} AS fact_refund_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__refund_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_refund_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_refund_events"], "unique_id": "model.thorchain_models.core__fact_refund_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_refund_events.sql", "original_file_path": "models/core/core__fact_refund_events.sql", "name": "core__fact_refund_events", "alias": "fact_refund_events", "checksum": {"name": "sha256", "checksum": "de899bfce564918082da2e3730206d47081ee50da5122a4714b7788a417ccd8c"}, "tags": [], "refs": [["silver__refund_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows that the refund events", "columns": {"FACT_REFUND_EVENTS_ID": {"name": "FACT_REFUND_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_2ND": {"name": "ASSET_2ND", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_2ND_E8": {"name": "ASSET_2ND_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODE": {"name": "CODE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_refund_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_refund_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_refund_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.362004, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    asset_2nd,\n    asset_2nd_e8,\n    memo,\n    code,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.refund_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_refund_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address as \n    varchar\n), '') || '-' || coalesce(cast(a. asset as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_2nd as \n    varchar\n), '') || '-' || coalesce(cast(a.memo as \n    varchar\n), '') || '-' || coalesce(cast(a.code as \n    varchar\n), '') || '-' || coalesce(cast(a.reason as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_refund_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  asset_2nd,\n  asset_2nd_e8,\n  memo,\n  code,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_refund_events"}, "model.thorchain_models.core__fact_inactive_vault_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_inactive_vault_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    add_asgard_address,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__inactive_vault_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR add_asgard_address IN (\n    SELECT\n      add_asgard_address\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.add_asgard_address','a.block_timestamp']\n  ) }} AS fact_inactive_vault_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  add_asgard_address,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__inactive_vault_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_inactive_vault_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_inactive_vault_events"], "unique_id": "model.thorchain_models.core__fact_inactive_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_inactive_vault_events.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.sql", "name": "core__fact_inactive_vault_events", "alias": "fact_inactive_vault_events", "checksum": {"name": "sha256", "checksum": "54ad88d1f816e6ff2a53403227623999d6b92cafb10f2d6739cb6d7687009557"}, "tags": [], "refs": [["silver__inactive_vault_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_INACTIVE_VAULT_EVENTS_ID": {"name": "FACT_INACTIVE_VAULT_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASGARD_ADDRESS": {"name": "ADD_ASGARD_ADDRESS", "description": "The asgard address in the vault which are inactive", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_inactive_vault_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_inactive_vault_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.374561, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    add_asgard_address,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.inactive_vault_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_inactive_vault_events\n  ) - INTERVAL '4 HOURS'\n  OR add_asgard_address IN (\n    SELECT\n      add_asgard_address\n    FROM\n      THORCHAIN_DEV.core.fact_inactive_vault_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.add_asgard_address as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_inactive_vault_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  add_asgard_address,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_inactive_vault_events"}, "model.thorchain_models.core__fact_set_version_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_set_version_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    version,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_version_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id', 'a.node_address', 'a.block_timestamp', 'a.version']\n  ) }} AS fact_set_version_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  version,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__set_version_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_version_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_set_version_events"], "unique_id": "model.thorchain_models.core__fact_set_version_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_set_version_events.sql", "original_file_path": "models/core/core__fact_set_version_events.sql", "name": "core__fact_set_version_events", "alias": "fact_set_version_events", "checksum": {"name": "sha256", "checksum": "e4ee929b80e7a857b91081c875324fc2b52b52343ed6d4d9890ed91e9af3e8ae"}, "tags": [], "refs": [["silver__set_version_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_SET_VERSION_EVENTS_ID": {"name": "FACT_SET_VERSION_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VERSION": {"name": "VERSION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_set_version_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_version_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_set_version_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.3875651, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    version,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.set_version_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_set_version_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.node_address as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.version as \n    varchar\n), '') as \n    varchar\n)) AS fact_set_version_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  version,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_set_version_events"}, "model.thorchain_models.core__dim_block": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'dim_block_id',\n    incremental_strategy = 'merge',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['height']\n    ) }} AS dim_block_id,\n    height AS block_id,\n    block_timestamp,\n    block_date,\n    block_hour,\n    block_week,\n    block_month,\n    block_quarter,\n    block_year,\n    block_DAYOFMONTH,\n    block_DAYOFWEEK,\n    block_DAYOFYEAR,\n    TIMESTAMP,\n    HASH,\n    agg_state,\n    _INSERTED_TIMESTAMP,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n    {{ ref('silver__block_log') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '72 HOURS'\n{% endif %}\nUNION ALL\nSELECT\n    '-1' AS dim_block_id,\n    -1 AS block_id,\n    '1900-01-01' :: datetime AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS TIMESTAMP,\n    NULL AS HASH,\n    NULL AS agg_state,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_block_id,\n    -2 AS block_id,\n    NULL AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS TIMESTAMP,\n    NULL AS HASH,\n    NULL AS agg_state,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt.is_incremental"], "nodes": ["model.thorchain_models.silver__block_log"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "dim_block_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__dim_block"], "unique_id": "model.thorchain_models.core__dim_block", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__dim_block.sql", "original_file_path": "models/core/core__dim_block.sql", "name": "core__dim_block", "alias": "dim_block", "checksum": {"name": "sha256", "checksum": "c28c2c328bfbb4d99f0be06aefd7971f04f9a0483a2beb90e0d9416add3928f8"}, "tags": [], "refs": [["silver__block_log"]], "sources": [], "metrics": [], "description": "Records of all blocks that have occurred on Algorand, dating back to the genesis block. ", "columns": {"DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_ID": {"name": "BLOCK_ID", "description": "ID of the confirmed block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DATE": {"name": "BLOCK_DATE", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HOUR": {"name": "BLOCK_HOUR", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_WEEK": {"name": "BLOCK_WEEK", "description": "Date of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_MONTH": {"name": "BLOCK_MONTH", "description": "The numeric month of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_QUARTER": {"name": "BLOCK_QUARTER", "description": "The numeric quarter of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_YEAR": {"name": "BLOCK_YEAR", "description": "The numeric year of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DAYOFMONTH": {"name": "BLOCK_DAYOFMONTH", "description": "The numeric day of month of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DAYOFWEEK": {"name": "BLOCK_DAYOFWEEK", "description": "The numeric day of week of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_DAYOFYEAR": {"name": "BLOCK_DAYOFYEAR", "description": "The numeric day of year of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TIMESTAMP": {"name": "TIMESTAMP", "description": "integer value of the block_teimstamp", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "block hash", "meta": {}, "data_type": null, "quote": null, "tags": []}, "agg_state": {"name": "agg_state", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__dim_block.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "dim_block_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.401369, "compiled_sql": "\n\nSELECT\n    md5(cast(coalesce(cast(height as \n    varchar\n), '') as \n    varchar\n)) AS dim_block_id,\n    height AS block_id,\n    block_timestamp,\n    block_date,\n    block_hour,\n    block_week,\n    block_month,\n    block_quarter,\n    block_year,\n    block_DAYOFMONTH,\n    block_DAYOFWEEK,\n    block_DAYOFYEAR,\n    TIMESTAMP,\n    HASH,\n    agg_state,\n    _INSERTED_TIMESTAMP,\n    'manual' AS _audit_run_id\nFROM\n    THORCHAIN_DEV.silver.block_log\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            THORCHAIN_DEV.core.dim_block\n    ) - INTERVAL '72 HOURS'\n\nUNION ALL\nSELECT\n    '-1' AS dim_block_id,\n    -1 AS block_id,\n    '1900-01-01' :: datetime AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS TIMESTAMP,\n    NULL AS HASH,\n    NULL AS agg_state,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    'manual' AS _audit_run_id\nUNION ALL\nSELECT\n    '-2' AS dim_block_id,\n    -2 AS block_id,\n    NULL AS block_timestamp,\n    NULL AS block_date,\n    NULL AS block_hour,\n    NULL AS block_week,\n    NULL AS block_month,\n    NULL AS block_quarter,\n    NULL AS block_year,\n    NULL AS block_DAYOFMONTH,\n    NULL AS block_DAYOFWEEK,\n    NULL AS block_DAYOFYEAR,\n    NULL AS TIMESTAMP,\n    NULL AS HASH,\n    NULL AS agg_state,\n    '1900-01-01' :: DATE AS _inserted_timestamp,\n    'manual' AS _audit_run_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.dim_block"}, "model.thorchain_models.core__fact_swaps": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_swaps_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    blockchain,\n    pool_name,\n    from_address,\n    native_to_address,\n    to_pool_address,\n    affiliate_address,\n    affiliate_fee_basis_points,\n    from_asset,\n    to_asset,\n    from_amount,\n    to_amount,\n    min_to_amount,\n    from_amount_usd,\n    to_amount_usd,\n    rune_usd,\n    asset_usd,\n    to_amount_min_usd,\n    swap_slip_bp,\n    liq_fee_rune,\n    liq_fee_rune_usd,\n    liq_fee_asset,\n    liq_fee_asset_usd,\n    _unique_key,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__swaps') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_swaps_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  pool_name,\n  from_address,\n  native_to_address,\n  to_pool_address,\n  affiliate_address,\n  affiliate_fee_basis_points,\n  from_asset,\n  to_asset,\n  from_amount,\n  to_amount,\n  min_to_amount,\n  from_amount_usd,\n  to_amount_usd,\n  rune_usd,\n  asset_usd,\n  to_amount_min_usd,\n  swap_slip_bp,\n  liq_fee_rune,\n  liq_fee_rune_usd,\n  liq_fee_asset,\n  liq_fee_asset_usd,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__swaps", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_swaps_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_swaps"], "unique_id": "model.thorchain_models.core__fact_swaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_swaps.sql", "original_file_path": "models/core/core__fact_swaps.sql", "name": "core__fact_swaps", "alias": "fact_swaps", "checksum": {"name": "sha256", "checksum": "8226fb25ef3f0fcca6994970dcef36da2a9bd4952f5b2e133f53be690ba23521"}, "tags": [], "refs": [["silver__swaps"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows the swap activity in Thorchain", "columns": {"FACT_SWAPS_ID": {"name": "FACT_SWAPS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The user address that initiates the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NATIVE_TO_ADDRESS": {"name": "NATIVE_TO_ADDRESS", "description": "The user address that is receiving the result of the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_POOL_ADDRESS": {"name": "TO_POOL_ADDRESS", "description": "The pool address that processes the swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AFFILIATE_ADDRESS": {"name": "AFFILIATE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AFFILIATE_FEE_BASIS_POINTS": {"name": "AFFILIATE_FEE_BASIS_POINTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ASSET": {"name": "FROM_ASSET", "description": "Initial asset to swap", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET": {"name": "TO_ASSET", "description": "The asset swap to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMOUNT": {"name": "FROM_AMOUNT", "description": "Amount of the asset to swap from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMOUNT": {"name": "TO_AMOUNT", "description": "Amount of the asset to swap for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_TO_AMOUNT": {"name": "MIN_TO_AMOUNT", "description": "Minimal amount to swap for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_AMOUNT_USD": {"name": "FROM_AMOUNT_USD", "description": "Amount in USD of the asset to swap from", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMOUNT_USD": {"name": "TO_AMOUNT_USD", "description": "Amount in USD of the asset to swap for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_USD": {"name": "RUNE_USD", "description": "Minimal amount in USD to swap for", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_USD": {"name": "ASSET_USD", "description": "Asset amount in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_AMOUNT_MIN_USD": {"name": "TO_AMOUNT_MIN_USD", "description": "Min asset amount in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_SLIP_BP": {"name": "SWAP_SLIP_BP", "description": "The slippage during the swap process", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_RUNE": {"name": "LIQ_FEE_RUNE", "description": "The amount of RUNE liquidity fee paid in RUNE for the swaps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_RUNE_USD": {"name": "LIQ_FEE_RUNE_USD", "description": "The amount of RUNE in USD liquidity fee paid in RUNE for the swaps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_ASSET": {"name": "LIQ_FEE_ASSET", "description": "The amount of Asset liquidity fee paid in RUNE for the swaps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQ_FEE_ASSET_USD": {"name": "LIQ_FEE_ASSET_USD", "description": "The amount of Asset in USD liquidity fee paid in RUNE for the swaps", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_swaps.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_swaps_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.427368, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    block_id,\n    tx_id,\n    blockchain,\n    pool_name,\n    from_address,\n    native_to_address,\n    to_pool_address,\n    affiliate_address,\n    affiliate_fee_basis_points,\n    from_asset,\n    to_asset,\n    from_amount,\n    to_amount,\n    min_to_amount,\n    from_amount_usd,\n    to_amount_usd,\n    rune_usd,\n    asset_usd,\n    to_amount_min_usd,\n    swap_slip_bp,\n    liq_fee_rune,\n    liq_fee_rune_usd,\n    liq_fee_asset,\n    liq_fee_asset_usd,\n    _unique_key,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.swaps\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_swaps\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_swaps_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  pool_name,\n  from_address,\n  native_to_address,\n  to_pool_address,\n  affiliate_address,\n  affiliate_fee_basis_points,\n  from_asset,\n  to_asset,\n  from_amount,\n  to_amount,\n  min_to_amount,\n  from_amount_usd,\n  to_amount_usd,\n  rune_usd,\n  asset_usd,\n  to_amount_min_usd,\n  swap_slip_bp,\n  liq_fee_rune,\n  liq_fee_rune_usd,\n  liq_fee_asset,\n  liq_fee_asset_usd,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_swaps"}, "model.thorchain_models.core__fact_pool_block_statistics": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_pool_block_statistics_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    add_asset_liquidity_volume,\n    add_liquidity_count,\n    add_liquidity_volume,\n    add_rune_liquidity_volume,\n    asset,\n    asset_depth,\n    asset_price,\n    asset_price_usd,\n    average_slip,\n    impermanent_loss_protection_paid,\n    rune_depth,\n    status,\n    swap_count,\n    swap_volume,\n    to_asset_average_slip,\n    to_asset_count,\n    to_asset_fees,\n    to_asset_volume,\n    to_rune_average_slip,\n    to_rune_count,\n    to_rune_fees,\n    to_rune_volume,\n    totalfees,\n    unique_member_count,\n    unique_swapper_count,\n    units,\n    withdraw_asset_volume,\n    withdraw_count,\n    withdraw_rune_volume,\n    withdraw_volume,\n    total_stake,\n    depth_product,\n    liquidity_unit_value_index,\n    prev_liquidity_unit_value_index,\n    _UNIQUE_KEY\n  FROM\n    {{ ref('silver__pool_block_statistics') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_pool_block_statistics_id,\n  DAY,\n  add_asset_liquidity_volume,\n  add_liquidity_count,\n  add_liquidity_volume,\n  add_rune_liquidity_volume,\n  asset,\n  asset_depth,\n  asset_price,\n  asset_price_usd,\n  average_slip,\n  impermanent_loss_protection_paid,\n  rune_depth,\n  status,\n  swap_count,\n  swap_volume,\n  to_asset_average_slip,\n  to_asset_count,\n  to_asset_fees,\n  to_asset_volume,\n  to_rune_average_slip,\n  to_rune_count,\n  to_rune_fees,\n  to_rune_volume,\n  totalfees,\n  unique_member_count,\n  unique_swapper_count,\n  units,\n  withdraw_asset_volume,\n  withdraw_count,\n  withdraw_rune_volume,\n  withdraw_volume,\n  total_stake,\n  depth_product,\n  liquidity_unit_value_index,\n  prev_liquidity_unit_value_index,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__pool_block_statistics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_block_statistics_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["day"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_pool_block_statistics"], "unique_id": "model.thorchain_models.core__fact_pool_block_statistics", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_pool_block_statistics.sql", "original_file_path": "models/core/core__fact_pool_block_statistics.sql", "name": "core__fact_pool_block_statistics", "alias": "fact_pool_block_statistics", "checksum": {"name": "sha256", "checksum": "62ff8bca4e54277621303c1c757c5bc30fc8800382266b2d59520b54ddc23346"}, "tags": [], "refs": [["silver__pool_block_statistics"]], "sources": [], "metrics": [], "description": "Fact table containing the actions the liquidity providers do in the THORChain, with the amount in RUNE/Asset", "columns": {"FACT_POOL_BLOCK_STATISTICS_ID": {"name": "FACT_POOL_BLOCK_STATISTICS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The timestamp in day for the recorded of the block fee", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_VOLUME": {"name": "ADD_ASSET_LIQUIDITY_VOLUME", "description": "How much asset liquidity has been added to the pool at this time for this pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "The count of add liquidity transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_LIQUIDITY_VOLUME": {"name": "ADD_LIQUIDITY_VOLUME", "description": "The asset volume of liquidity added to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_DEPTH": {"name": "ASSET_DEPTH", "description": "The current pool depth, which is the total Rune pooled in the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "The asset price in RUNE for this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "The asset price in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "The average slip point for this block within the day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMPERMANENT_LOSS_PROTECTION_PAID": {"name": "IMPERMANENT_LOSS_PROTECTION_PAID", "description": "The total impermanent loss protection paid for this pool on this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_DEPTH": {"name": "RUNE_DEPTH", "description": "The pool depth", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "The pool status, which is active or not", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "Total swap transactions count", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_VOLUME": {"name": "SWAP_VOLUME", "description": "Total swap volume", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "If the transaction is from Rune to Asset, the average slip point", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_COUNT": {"name": "TO_ASSET_COUNT", "description": "How many swaps happen from Rune to Asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_FEES": {"name": "TO_ASSET_FEES", "description": "The total swap fees paid to transfer from Rune to Asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_VOLUME": {"name": "TO_ASSET_VOLUME", "description": "The total volume transferred from Rune to Asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_AVERAGE_SLIP": {"name": "TO_RUNE_AVERAGE_SLIP", "description": "If the transaction is from Asset to Rune, the average slip point", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_COUNT": {"name": "TO_RUNE_COUNT", "description": "How many swaps happen from Asset to Rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_FEES": {"name": "TO_RUNE_FEES", "description": "The total swap fees paid to transfer from Asset to Rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_VOLUME": {"name": "TO_RUNE_VOLUME", "description": "The total volume transferred from Asset to Rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTALFEES": {"name": "TOTALFEES", "description": "The total fees paid for the swaps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "All memberships with a rune address. Take the member from rune and asset and then subtract the balance = 0 then get the results", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "The unique swap addresses for this pool ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNITS": {"name": "UNITS", "description": "The swap units", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_ASSET_VOLUME": {"name": "WITHDRAW_ASSET_VOLUME", "description": "How many assets get withdrawn from the liquidity pools", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "How many times the withdraw events happens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_RUNE_VOLUME": {"name": "WITHDRAW_RUNE_VOLUME", "description": "How many rune volume get withdrawn from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_VOLUME": {"name": "WITHDRAW_VOLUME", "description": "How many asset volume get withdrawn from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_STAKE": {"name": "TOTAL_STAKE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPTH_PRODUCT": {"name": "DEPTH_PRODUCT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_UNIT_VALUE_INDEX": {"name": "LIQUIDITY_UNIT_VALUE_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PREV_LIQUIDITY_UNIT_VALUE_INDEX": {"name": "PREV_LIQUIDITY_UNIT_VALUE_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_pool_block_statistics.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_statistics.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_pool_block_statistics_id", "incremental_strategy": "merge", "cluster_by": ["day"]}, "created_at": 1665513503.444038, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    add_asset_liquidity_volume,\n    add_liquidity_count,\n    add_liquidity_volume,\n    add_rune_liquidity_volume,\n    asset,\n    asset_depth,\n    asset_price,\n    asset_price_usd,\n    average_slip,\n    impermanent_loss_protection_paid,\n    rune_depth,\n    status,\n    swap_count,\n    swap_volume,\n    to_asset_average_slip,\n    to_asset_count,\n    to_asset_fees,\n    to_asset_volume,\n    to_rune_average_slip,\n    to_rune_count,\n    to_rune_fees,\n    to_rune_volume,\n    totalfees,\n    unique_member_count,\n    unique_swapper_count,\n    units,\n    withdraw_asset_volume,\n    withdraw_count,\n    withdraw_rune_volume,\n    withdraw_volume,\n    total_stake,\n    depth_product,\n    liquidity_unit_value_index,\n    prev_liquidity_unit_value_index,\n    _UNIQUE_KEY\n  FROM\n    THORCHAIN_DEV.silver.pool_block_statistics\n\n\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_pool_block_statistics\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_pool_block_statistics_id,\n  DAY,\n  add_asset_liquidity_volume,\n  add_liquidity_count,\n  add_liquidity_volume,\n  add_rune_liquidity_volume,\n  asset,\n  asset_depth,\n  asset_price,\n  asset_price_usd,\n  average_slip,\n  impermanent_loss_protection_paid,\n  rune_depth,\n  status,\n  swap_count,\n  swap_volume,\n  to_asset_average_slip,\n  to_asset_count,\n  to_asset_fees,\n  to_asset_volume,\n  to_rune_average_slip,\n  to_rune_count,\n  to_rune_fees,\n  to_rune_volume,\n  totalfees,\n  unique_member_count,\n  unique_swapper_count,\n  units,\n  withdraw_asset_volume,\n  withdraw_count,\n  withdraw_rune_volume,\n  withdraw_volume,\n  total_stake,\n  depth_product,\n  liquidity_unit_value_index,\n  prev_liquidity_unit_value_index,\n  'manual' AS _audit_run_id\nFROM\n  base A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_pool_block_statistics"}, "model.thorchain_models.core__fact_bond_actions": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = \"fact_bond_actions_id\",\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    {{ ref('silver__prices') }}\n  GROUP BY\n    block_id\n),\nbond_events AS (\n  SELECT\n    block_timestamp,\n    tx_id,\n    from_address,\n    to_address,\n    asset,\n    blockchain,\n    bond_type,\n    asset_e8,\n    e8,\n    memo,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__bond_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['be.tx_id','be.from_address','be.to_address ','be.asset_e8','be.bond_type','be.e8','be.block_timestamp','be.blockchain','be.asset','be.memo']\n  ) }} AS fact_bond_actions_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  to_address,\n  asset,\n  blockchain,\n  bond_type,\n  COALESCE(e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(\n    rune_usd * asset_e8,\n    0\n  ) AS asset_usd,\n  memo,\n  be._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  bond_events be\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON be.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.block_id = p.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__bond_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_bond_actions_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_bond_actions"], "unique_id": "model.thorchain_models.core__fact_bond_actions", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_bond_actions.sql", "original_file_path": "models/core/core__fact_bond_actions.sql", "name": "core__fact_bond_actions", "alias": "fact_bond_actions", "checksum": {"name": "sha256", "checksum": "8410320521acf4c33d9742795fba314531cc62d3f9ad876592e3f639ff2dbcd6"}, "tags": [], "refs": [["silver__prices"], ["silver__bond_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing the clean bond action table to record the node operators' behaviors", "columns": {"FACT_BOND_ACTIONS_ID": {"name": "FACT_BOND_ACTIONS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this bond events happens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bond_type": {"name": "bond_type", "description": "There are 4 different types of bond:bond_reward, bond_paid, bond_cost, bond_returned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "The asset amount for this bond event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_USD": {"name": "ASSET_USD", "description": "Used the price table to calculate the asset in the usd", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_bond_actions.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_bond_actions_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.451089, "compiled_sql": "\n\nWITH block_prices AS (\n\n  SELECT\n    AVG(rune_usd) AS rune_usd,\n    block_id\n  FROM\n    THORCHAIN_DEV.silver.prices\n  GROUP BY\n    block_id\n),\nbond_events AS (\n  SELECT\n    block_timestamp,\n    tx_id,\n    from_address,\n    to_address,\n    asset,\n    blockchain,\n    bond_type,\n    asset_e8,\n    e8,\n    memo,\n    event_id,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.bond_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_bond_actions\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      THORCHAIN_DEV.core.fact_bond_actions\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(be.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(be.from_address as \n    varchar\n), '') || '-' || coalesce(cast(be.to_address  as \n    varchar\n), '') || '-' || coalesce(cast(be.asset_e8 as \n    varchar\n), '') || '-' || coalesce(cast(be.bond_type as \n    varchar\n), '') || '-' || coalesce(cast(be.e8 as \n    varchar\n), '') || '-' || coalesce(cast(be.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(be.blockchain as \n    varchar\n), '') || '-' || coalesce(cast(be.asset as \n    varchar\n), '') || '-' || coalesce(cast(be.memo as \n    varchar\n), '') as \n    varchar\n)) AS fact_bond_actions_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  to_address,\n  asset,\n  blockchain,\n  bond_type,\n  COALESCE(e8 / pow(10, 8), 0) AS asset_amount,\n  COALESCE(\n    rune_usd * asset_e8,\n    0\n  ) AS asset_usd,\n  memo,\n  be._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  bond_events be\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON be.block_timestamp = b.timestamp\n  LEFT JOIN block_prices p\n  ON b.block_id = p.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_bond_actions"}, "model.thorchain_models.core__fact_switch_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_switch_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    from_address,\n    to_address,\n    burn_asset,\n    burn_e8,\n    mint_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__switch_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.tx_id','from_address','a.to_address','a.burn_asset','a.burn_e8','a.mint_e8']\n  ) }} AS fact_switch_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  to_address,\n  burn_asset,\n  burn_e8,\n  mint_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__switch_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_switch_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_switch_events"], "unique_id": "model.thorchain_models.core__fact_switch_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_switch_events.sql", "original_file_path": "models/core/core__fact_switch_events.sql", "name": "core__fact_switch_events", "alias": "fact_switch_events", "checksum": {"name": "sha256", "checksum": "103d9be846c5ad7bf419eea15bd41b0ee4828f20a41f7913851e930dfff38fd0"}, "tags": [], "refs": [["silver__switch_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows the switch events", "columns": {"FACT_SWITCH_EVENTS_ID": {"name": "FACT_SWITCH_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BURN_ASSET": {"name": "BURN_ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BURN_E8": {"name": "BURN_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_E8": {"name": "MINT_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_switch_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_switch_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_switch_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.474659, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    from_address,\n    to_address,\n    burn_asset,\n    burn_e8,\n    mint_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.switch_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_switch_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address as \n    varchar\n), '') || '-' || coalesce(cast(a.burn_asset as \n    varchar\n), '') || '-' || coalesce(cast(a.burn_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.mint_e8 as \n    varchar\n), '') as \n    varchar\n)) AS fact_switch_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  to_address,\n  burn_asset,\n  burn_e8,\n  mint_e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_switch_events"}, "model.thorchain_models.core__fact_validator_request_leave_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_validator_request_leave_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    tx_id,\n    from_address,\n    node_address,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__validator_request_leave_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.block_timestamp','a.tx_id', 'a.from_address', 'a.node_address']\n  ) }} AS fact_validator_request_leave_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  node_address,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__validator_request_leave_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_validator_request_leave_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_validator_request_leave_events"], "unique_id": "model.thorchain_models.core__fact_validator_request_leave_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_validator_request_leave_events.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.sql", "name": "core__fact_validator_request_leave_events", "alias": "fact_validator_request_leave_events", "checksum": {"name": "sha256", "checksum": "e61bca009ca064608ac14eda22de15999db5f4a944301dd415ba5a0c38754c70"}, "tags": [], "refs": [["silver__validator_request_leave_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing validator request leave events", "columns": {"FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID": {"name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "Address of node operator", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_validator_request_leave_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_validator_request_leave_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.488091, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    tx_id,\n    from_address,\n    node_address,\n    event_id,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.validator_request_leave_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_validator_request_leave_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.node_address as \n    varchar\n), '') as \n    varchar\n)) AS fact_validator_request_leave_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  node_address,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_validator_request_leave_events"}, "model.thorchain_models.core__fact_block_rewards": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_block_rewards_id',\n  incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    liquidity_fee,\n    block_rewards,\n    earnings,\n    bonding_earnings,\n    liquidity_earnings,\n    avg_node_count,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__block_rewards') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.day']\n  ) }} AS fact_block_rewards_id,\n  DAY,\n  liquidity_fee,\n  block_rewards,\n  earnings,\n  bonding_earnings,\n  liquidity_earnings,\n  avg_node_count,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_block_rewards_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_block_rewards"], "unique_id": "model.thorchain_models.core__fact_block_rewards", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_block_rewards.sql", "original_file_path": "models/core/core__fact_block_rewards.sql", "name": "core__fact_block_rewards", "alias": "fact_block_rewards", "checksum": {"name": "sha256", "checksum": "6bd6a0d3cf2850deb63d3694e5546f32610c39ebe4d5e2f6db7f301de2a71bd8"}, "tags": [], "refs": [["silver__block_rewards"]], "sources": [], "metrics": [], "description": "The summarized rewards information for each block per day", "columns": {"FACT_BLOCK_REWARDS_ID": {"name": "FACT_BLOCK_REWARDS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The recorded day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_FEE": {"name": "LIQUIDITY_FEE", "description": "The summarized liquidity cost fee within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "The summarized total block rewards within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "The summarized earnings within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BONDING_EARNINGS": {"name": "BONDING_EARNINGS", "description": "The summarized bonding earnings within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_EARNINGS": {"name": "LIQUIDITY_EARNINGS", "description": "The summarized liquidity earnings fee within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "The summarized average node operators number within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_block_rewards.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_block_rewards_id", "incremental_strategy": "merge"}, "created_at": 1665513503.503646, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    liquidity_fee,\n    block_rewards,\n    earnings,\n    bonding_earnings,\n    liquidity_earnings,\n    avg_node_count,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.block_rewards\n\n\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_block_rewards\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.day as \n    varchar\n), '') as \n    varchar\n)) AS fact_block_rewards_id,\n  DAY,\n  liquidity_fee,\n  block_rewards,\n  earnings,\n  bonding_earnings,\n  liquidity_earnings,\n  avg_node_count,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_block_rewards"}, "model.thorchain_models.core__fact_update_node_account_status_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_update_node_account_status_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    former_status,\n    current_status,\n    node_address,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__update_node_account_status_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.node_address', 'a.block_timestamp', 'a.current_status', 'a.former_status']\n  ) }} AS fact_update_node_account_status_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  former_status,\n  current_status,\n  node_address,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__update_node_account_status_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_update_node_account_status_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_update_node_account_status_events"], "unique_id": "model.thorchain_models.core__fact_update_node_account_status_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_update_node_account_status_events.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.sql", "name": "core__fact_update_node_account_status_events", "alias": "fact_update_node_account_status_events", "checksum": {"name": "sha256", "checksum": "21952f88d64ef28fc2751142f7f39d9926a238d529a4cc296b0f88809ac70111"}, "tags": [], "refs": [["silver__update_node_account_status_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing node account status events", "columns": {"FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID": {"name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FORMER_STATUS": {"name": "FORMER_STATUS", "description": "The amount of rune for this add event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENT_STATUS": {"name": "CURRENT_STATUS", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "Address of node operator", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_update_node_account_status_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_update_node_account_status_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.518911, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    former_status,\n    current_status,\n    node_address,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.update_node_account_status_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_update_node_account_status_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.node_address as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.current_status as \n    varchar\n), '') || '-' || coalesce(cast(a.former_status as \n    varchar\n), '') as \n    varchar\n)) AS fact_update_node_account_status_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  former_status,\n  current_status,\n  node_address,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_update_node_account_status_events"}, "model.thorchain_models.core__fact_active_vault_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_active_vault_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    add_asgard_addr,\n    event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__active_vault_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR add_asgard_addr IN (\n    SELECT\n      add_asgard_addr\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.block_timestamp','a.add_asgard_addr']\n  ) }} AS fact_active_vault_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  add_asgard_addr,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__active_vault_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_active_vault_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_active_vault_events"], "unique_id": "model.thorchain_models.core__fact_active_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_active_vault_events.sql", "original_file_path": "models/core/core__fact_active_vault_events.sql", "name": "core__fact_active_vault_events", "alias": "fact_active_vault_events", "checksum": {"name": "sha256", "checksum": "2b3c7c5973d2ea382a10cb332d359019b24ae4cedceabb7ae722888542b5a800"}, "tags": [], "refs": [["silver__active_vault_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fatc table containing the events triggered by the churning activities", "columns": {"FACT_ACTIVE_VAULT_EVENTS_ID": {"name": "FACT_ACTIVE_VAULT_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASGARD_ADDR": {"name": "ADD_ASGARD_ADDR", "description": "The asgard address added to the vault", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_active_vault_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_active_vault_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.534602, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_timestamp,\n    add_asgard_addr,\n    event_id,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.active_vault_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_active_vault_events\n  ) - INTERVAL '4 HOURS'\n  OR add_asgard_addr IN (\n    SELECT\n      add_asgard_addr\n    FROM\n      THORCHAIN_DEV.core.fact_active_vault_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.add_asgard_addr as \n    varchar\n), '') as \n    varchar\n)) AS fact_active_vault_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  add_asgard_addr,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_active_vault_events"}, "model.thorchain_models.core__fact_upgrades": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_upgrades_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    tx_id,\n    from_address,\n    to_address,\n    burn_asset,\n    rune_amount,\n    rune_amount_usd,\n    mint_amount,\n    mint_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__upgrades') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_upgrades_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  to_address,\n  burn_asset,\n  rune_amount,\n  rune_amount_usd,\n  mint_amount,\n  mint_amount_usd,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__upgrades", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_upgrades_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_upgrades"], "unique_id": "model.thorchain_models.core__fact_upgrades", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_upgrades.sql", "original_file_path": "models/core/core__fact_upgrades.sql", "name": "core__fact_upgrades", "alias": "fact_upgrades", "checksum": {"name": "sha256", "checksum": "8ca4dad0357a06bee62103a52773dba71fb902640eaaad4573714c3da6f15ec0"}, "tags": [], "refs": [["silver__upgrades"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing upgrade events", "columns": {"FACT_UPGRADES_ID": {"name": "FACT_UPGRADES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The address initiated this transfers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The address received this transfers", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BURN_ASSET": {"name": "BURN_ASSET", "description": "The burned asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "The transferred RUNE amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "The transferred RUNE amount in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_AMOUNT": {"name": "MINT_AMOUNT", "description": "The minted RUNE amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_AMOUNT_USD": {"name": "MINT_AMOUNT_USD", "description": "The minted RUNE amount in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_upgrades.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_upgrades.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_upgrades_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.549005, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    tx_id,\n    from_address,\n    to_address,\n    burn_asset,\n    rune_amount,\n    rune_amount_usd,\n    mint_amount,\n    mint_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.upgrades\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_upgrades\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_upgrades_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  from_address,\n  to_address,\n  burn_asset,\n  rune_amount,\n  rune_amount_usd,\n  mint_amount,\n  mint_amount_usd,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_upgrades"}, "model.thorchain_models.core__fact_pool_block_balances": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_pool_block_balances_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    pool_name,\n    rune_amount,\n    rune_amount_usd,\n    asset_amount,\n    asset_amount_usd,\n    synth_amount,\n    synth_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_block_balances') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_pool_block_balances_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  rune_amount,\n  rune_amount_usd,\n  asset_amount,\n  asset_amount_usd,\n  synth_amount,\n  synth_amount_usd,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__pool_block_balances", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_block_balances_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_pool_block_balances"], "unique_id": "model.thorchain_models.core__fact_pool_block_balances", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_pool_block_balances.sql", "original_file_path": "models/core/core__fact_pool_block_balances.sql", "name": "core__fact_pool_block_balances", "alias": "fact_pool_block_balances", "checksum": {"name": "sha256", "checksum": "45a7cada8dbc6442fd99cb22222add0ab9705256cae924f9466d318adb78b9a7"}, "tags": [], "refs": [["silver__pool_block_balances"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing the actions the liquidity providers do in the THORChain, with the amount in RUNE/Asset", "columns": {"FACT_POOL_BLOCK_BALANCES_ID": {"name": "FACT_POOL_BLOCK_BALANCES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "The rune amount balance for this pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "The rune amount balance in USD for this pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "The asset amount balance for this pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT_USD": {"name": "ASSET_AMOUNT_USD", "description": "The asset amount balance in USD for this pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYNTH_AMOUNT": {"name": "SYNTH_AMOUNT", "description": "The synth amount balance for this pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYNTH_AMOUNT_USD": {"name": "SYNTH_AMOUNT_USD", "description": "The synth amount balance in USD for this pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_pool_block_balances.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_pool_block_balances_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.561724, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    pool_name,\n    rune_amount,\n    rune_amount_usd,\n    asset_amount,\n    asset_amount_usd,\n    synth_amount,\n    synth_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.pool_block_balances\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_pool_block_balances\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_pool_block_balances_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  rune_amount,\n  rune_amount_usd,\n  asset_amount,\n  asset_amount_usd,\n  synth_amount,\n  synth_amount_usd,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_pool_block_balances"}, "model.thorchain_models.core__fact_reserve_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_reserve_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    address,\n    e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__reserve_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.tx_id','a.blockchain','a.from_address','a.to_address','a.asset','a.memo','a.address','a.block_timestamp']\n  ) }} AS fact_reserve_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  address,\n  e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__reserve_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_reserve_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_reserve_events"], "unique_id": "model.thorchain_models.core__fact_reserve_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_reserve_events.sql", "original_file_path": "models/core/core__fact_reserve_events.sql", "name": "core__fact_reserve_events", "alias": "fact_reserve_events", "checksum": {"name": "sha256", "checksum": "844fdbb29fa53c22272f4c8ce8db01c084dc4fe7643c4164c02bb9889b4b748b"}, "tags": [], "refs": [["silver__reserve_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows the amount of rune reserved into the network", "columns": {"FACT_RESERVE_EVENTS_ID": {"name": "FACT_RESERVE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The address reserve the amount to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "E8": {"name": "E8", "description": "The rune amount", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_reserve_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_reserve_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_reserve_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.580957, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    address,\n    e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.reserve_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_reserve_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.memo as \n    varchar\n), '') || '-' || coalesce(cast(a.address as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_reserve_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  address,\n  e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_reserve_events"}, "model.thorchain_models.core__fact_gas_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_gas_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    asset,\n    asset_e8,\n    rune_e8,\n    tx_count,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__gas_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.asset','a.block_timestamp']\n  ) }} AS fact_gas_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  asset_e8,\n  rune_e8,\n  tx_count,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__gas_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_gas_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_gas_events"], "unique_id": "model.thorchain_models.core__fact_gas_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_gas_events.sql", "original_file_path": "models/core/core__fact_gas_events.sql", "name": "core__fact_gas_events", "alias": "fact_gas_events", "checksum": {"name": "sha256", "checksum": "62afcdde8730f80c7ebf7e9847a990e7df2948711171a2bc9a69e3ae18681325"}, "tags": [], "refs": [["silver__gas_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_GAS_EVENTS_ID": {"name": "FACT_GAS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this fee, using the price table we can calculate the rune amount by asset amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "The total gas amount in rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The total count of transactions within this block id", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_gas_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_gas_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.593668, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    asset,\n    asset_e8,\n    rune_e8,\n    tx_count,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.gas_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_gas_events\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      THORCHAIN_DEV.core.fact_gas_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_gas_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  asset_e8,\n  rune_e8,\n  tx_count,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_gas_events"}, "model.thorchain_models.core__fact_thorname_change_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_thorname_change_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    owner,\n    chain,\n    address,\n    expire,\n    NAME,\n    fund_amount_e8,\n    registration_fee_e8,\n    event_id,\n    block_timestamp,\n    DATEADD(\n      ms,\n      __HEVO__LOADED_AT,\n      '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('bronze__thorname_change_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.block_timestamp','a.owner','a.chain','a.address','a.expire','a.name']\n  ) }} AS fact_thorname_change_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  owner,\n  chain,\n  address,\n  expire,\n  NAME,\n  fund_amount_e8,\n  registration_fee_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.bronze__thorname_change_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_thorname_change_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_thorname_change_events"], "unique_id": "model.thorchain_models.core__fact_thorname_change_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_thorname_change_events.sql", "original_file_path": "models/core/core__fact_thorname_change_events.sql", "name": "core__fact_thorname_change_events", "alias": "fact_thorname_change_events", "checksum": {"name": "sha256", "checksum": "6944d0aee2d25916310ae42f3ed2d0aa15f485d1076d7a824a23f4630c9f0e5e"}, "tags": [], "refs": [["bronze__thorname_change_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows name change events", "columns": {"FACT_THORNAME_CHANGE_EVENTS_ID": {"name": "FACT_THORNAME_CHANGE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OWNER": {"name": "OWNER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN": {"name": "CHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "expire": {"name": "expire", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FUND_AMOUNT_E8": {"name": "FUND_AMOUNT_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REGISTRATION_FEE_E8": {"name": "REGISTRATION_FEE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_thorname_change_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_thorname_change_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_thorname_change_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.611989, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    owner,\n    chain,\n    address,\n    expire,\n    NAME,\n    fund_amount_e8,\n    registration_fee_e8,\n    event_id,\n    block_timestamp,\n    DATEADD(\n      ms,\n      __HEVO__LOADED_AT,\n      '1970-01-01'\n    ) AS _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.bronze.thorname_change_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_thorname_change_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.owner as \n    varchar\n), '') || '-' || coalesce(cast(a.chain as \n    varchar\n), '') || '-' || coalesce(cast(a.address as \n    varchar\n), '') || '-' || coalesce(cast(a.expire as \n    varchar\n), '') || '-' || coalesce(cast(a.name as \n    varchar\n), '') as \n    varchar\n)) AS fact_thorname_change_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  owner,\n  chain,\n  address,\n  expire,\n  NAME,\n  fund_amount_e8,\n  registration_fee_e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_thorname_change_events"}, "model.thorchain_models.core__fact_total_block_rewards": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_total_block_rewards_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    reward_entity,\n    rune_amount,\n    rune_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__total_block_rewards') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_total_block_rewards_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  reward_entity,\n  rune_amount,\n  rune_amount_usd,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__total_block_rewards", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_total_block_rewards_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_total_block_rewards"], "unique_id": "model.thorchain_models.core__fact_total_block_rewards", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_total_block_rewards.sql", "original_file_path": "models/core/core__fact_total_block_rewards.sql", "name": "core__fact_total_block_rewards", "alias": "fact_total_block_rewards", "checksum": {"name": "sha256", "checksum": "221867585b13d51343723a54182aafdb4b1a22f2da8bf7b67050a9743ea40a0e"}, "tags": [], "refs": [["silver__total_block_rewards"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing stake events", "columns": {"FACT_TOTAL_BLOCK_REWARDS_ID": {"name": "FACT_TOTAL_BLOCK_REWARDS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARD_ENTITY": {"name": "REWARD_ENTITY", "description": "The asset or named as pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "The rewards measured in RUNE amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "The rewards measured in RUNE amount in the USD", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_total_block_rewards.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_total_block_rewards_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.6255019, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    reward_entity,\n    rune_amount,\n    rune_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.total_block_rewards\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_total_block_rewards\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_total_block_rewards_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  reward_entity,\n  rune_amount,\n  rune_amount_usd,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_total_block_rewards"}, "model.thorchain_models.core__fact_new_node_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_new_node_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    block_timestamp,\n    event_id,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__new_node_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR node_address IN (\n    SELECT\n      node_address\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.node_address','a.block_timestamp']\n  ) }} AS fact_new_node_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__new_node_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_new_node_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_new_node_events"], "unique_id": "model.thorchain_models.core__fact_new_node_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_new_node_events.sql", "original_file_path": "models/core/core__fact_new_node_events.sql", "name": "core__fact_new_node_events", "alias": "fact_new_node_events", "checksum": {"name": "sha256", "checksum": "9c0236aeab6d8bc20478a546c85cd7b78dfe84d0c38ca6c513c072041331fc4d"}, "tags": [], "refs": [["silver__new_node_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_NEW_NODE_EVENTS_ID": {"name": "FACT_NEW_NODE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "The asgard address in the vault which are inactive", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_new_node_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_new_node_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.639976, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    block_timestamp,\n    event_id,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.new_node_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_new_node_events\n  ) - INTERVAL '4 HOURS'\n  OR node_address IN (\n    SELECT\n      node_address\n    FROM\n      THORCHAIN_DEV.core.fact_new_node_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.node_address as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_new_node_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_new_node_events"}, "model.thorchain_models.core__fact_pending_liquidity_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_pending_liquidity_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_tx_id,\n    asset_blockchain,\n    asset_address,\n    asset_e8,\n    rune_tx_id,\n    rune_address,\n    rune_e8,\n    pending_type,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pending_liquidity_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.pool_name ','a.asset_tx_id','a.asset_blockchain','a.asset_address','a.rune_tx_id','a.rune_address ','a.pending_type','a.block_timestamp']\n  ) }} AS fact_pending_liquidity_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset_tx_id,\n  asset_blockchain,\n  asset_address,\n  asset_e8,\n  rune_tx_id,\n  rune_address,\n  rune_e8,\n  pending_type,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__pending_liquidity_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pending_liquidity_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_pending_liquidity_events"], "unique_id": "model.thorchain_models.core__fact_pending_liquidity_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_pending_liquidity_events.sql", "original_file_path": "models/core/core__fact_pending_liquidity_events.sql", "name": "core__fact_pending_liquidity_events", "alias": "fact_pending_liquidity_events", "checksum": {"name": "sha256", "checksum": "7f52f34d56a4423ec59aed710e8c9278c623245eba4088158201f8c9d6940039"}, "tags": [], "refs": [["silver__pending_liquidity_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_PENDING_LIQUIDITY_EVENTS_ID": {"name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_TX_ID": {"name": "ASSET_TX_ID", "description": "The unique transaction id for the rune event, the liquidity type can be add/remove the rune/asset, if the event related to rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_BLOCKCHAIN": {"name": "ASSET_BLOCKCHAIN", "description": "The blockchain of the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADDRESS": {"name": "ASSET_ADDRESS", "description": "The address of asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The amount of asset for the liquidity events", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_TX_ID": {"name": "RUNE_TX_ID", "description": "The unique transaction id for the rune event, the liquidity type can be add/remove the rune/asset, if the event related to rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_ADDRESS": {"name": "RUNE_ADDRESS", "description": "The address of rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "The amount of rune for the liquidity events", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PENDING_TYPE": {"name": "PENDING_TYPE", "description": "The type of liquidity, can be 'add' or 'withdraw'", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_pending_liquidity_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pending_liquidity_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_pending_liquidity_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.655454, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_tx_id,\n    asset_blockchain,\n    asset_address,\n    asset_e8,\n    rune_tx_id,\n    rune_address,\n    rune_e8,\n    pending_type,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.pending_liquidity_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_pending_liquidity_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.pool_name  as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_address as \n    varchar\n), '') || '-' || coalesce(cast(a.rune_tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.rune_address  as \n    varchar\n), '') || '-' || coalesce(cast(a.pending_type as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_pending_liquidity_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset_tx_id,\n  asset_blockchain,\n  asset_address,\n  asset_e8,\n  rune_tx_id,\n  rune_address,\n  rune_e8,\n  pending_type,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_pending_liquidity_events"}, "model.thorchain_models.core__fact_outbound_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_outbound_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    in_tx,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__outbound_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.tx_id ','a.blockchain','a.from_address','a.to_address','a.asset','a.memo ','a.in_tx','a.block_timestamp']\n  ) }} AS fact_outbound_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__outbound_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_outbound_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_outbound_events"], "unique_id": "model.thorchain_models.core__fact_outbound_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_outbound_events.sql", "original_file_path": "models/core/core__fact_outbound_events.sql", "name": "core__fact_outbound_events", "alias": "fact_outbound_events", "checksum": {"name": "sha256", "checksum": "d762a40cfe9f5b1725d9c18cea82c953b216befa01f39a408921f1ee0b0ee9ad"}, "tags": [], "refs": [["silver__outbound_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_OUTBOUND_EVENTS_ID": {"name": "FACT_OUTBOUND_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this outbound event happens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this outbound event, using the price table we can calculate the rune amount by asset amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IN_TX": {"name": "IN_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_outbound_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_outbound_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_outbound_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.669396, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    in_tx,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.outbound_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_outbound_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id  as \n    varchar\n), '') || '-' || coalesce(cast(a.blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.memo  as \n    varchar\n), '') || '-' || coalesce(cast(a.in_tx as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_outbound_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  in_tx,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_outbound_events"}, "model.thorchain_models.core__fact_stake_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_stake_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_tx_id,\n    asset_blockchain,\n    asset_address,\n    asset_e8,\n    stake_units,\n    rune_tx_id,\n    rune_address,\n    rune_e8,\n    _ASSET_IN_RUNE_E8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__stake_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id', 'a.pool_name', 'a.asset_blockchain', 'a.stake_units', 'a.rune_address', 'a.asset_tx_id', 'a.asset_address', 'a.block_timestamp']\n  ) }} AS fact_stake_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset_tx_id,\n  asset_blockchain,\n  asset_address,\n  asset_e8,\n  stake_units,\n  rune_tx_id,\n  rune_address,\n  rune_e8,\n  _ASSET_IN_RUNE_E8,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__stake_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_stake_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_stake_events"], "unique_id": "model.thorchain_models.core__fact_stake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_stake_events.sql", "original_file_path": "models/core/core__fact_stake_events.sql", "name": "core__fact_stake_events", "alias": "fact_stake_events", "checksum": {"name": "sha256", "checksum": "6ca5ca0fcf20ef63b5ef71a368334bfde4640ba53c4d4958ae9a42fc375b9e9e"}, "tags": [], "refs": [["silver__stake_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing stake events", "columns": {"FACT_STAKE_EVENTS_ID": {"name": "FACT_STAKE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_TX_ID": {"name": "ASSET_TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_BLOCKCHAIN": {"name": "ASSET_BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADDRESS": {"name": "ASSET_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_TX_ID": {"name": "RUNE_TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_ADDRESS": {"name": "RUNE_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "The asset amount for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_ASSET_IN_RUNE_E8": {"name": "_ASSET_IN_RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_stake_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_stake_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.683979, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_tx_id,\n    asset_blockchain,\n    asset_address,\n    asset_e8,\n    stake_units,\n    rune_tx_id,\n    rune_address,\n    rune_e8,\n    _ASSET_IN_RUNE_E8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.stake_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_stake_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.pool_name as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.stake_units as \n    varchar\n), '') || '-' || coalesce(cast(a.rune_address as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_address as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_stake_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset_tx_id,\n  asset_blockchain,\n  asset_address,\n  asset_e8,\n  stake_units,\n  rune_tx_id,\n  rune_address,\n  rune_e8,\n  _ASSET_IN_RUNE_E8,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_stake_events"}, "model.thorchain_models.core__fact_daily_pool_stats": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_daily_pool_stats_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    system_rewards,\n    system_rewards_usd,\n    asset_liquidity,\n    asset_price,\n    asset_price_usd,\n    rune_liquidity,\n    rune_price,\n    rune_price_usd,\n    add_liquidity_count,\n    add_asset_liquidity,\n    add_asset_liquidity_usd,\n    add_rune_liquidity,\n    add_rune_liquidity_usd,\n    withdraw_count,\n    withdraw_asset_liquidity,\n    withdraw_asset_liquidity_usd,\n    withdraw_rune_liquidity,\n    withdraw_rune_liquidity_usd,\n    il_protection_paid,\n    il_protection_paid_usd,\n    average_slip,\n    to_asset_average_slip,\n    to_rune_average_slip,\n    swap_count,\n    to_asset_swap_count,\n    to_rune_swap_count,\n    swap_volume_rune,\n    swap_volume_rune_usd,\n    to_asset_swap_volume,\n    to_rune_swap_volume,\n    total_swap_fees_rune,\n    total_swap_fees_usd,\n    total_asset_swap_fees,\n    total_asset_rune_fees,\n    unique_member_count,\n    unique_swapper_count,\n    liquidity_units,\n    _UNIQUE_KEY\n  FROM\n    {{ ref('silver__daily_pool_stats') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.day','a.pool_name']\n  ) }} AS fact_daily_pool_stats_id,\n  DAY,\n  pool_name,\n  system_rewards,\n  system_rewards_usd,\n  asset_liquidity,\n  asset_price,\n  asset_price_usd,\n  rune_liquidity,\n  rune_price,\n  rune_price_usd,\n  add_liquidity_count,\n  add_asset_liquidity,\n  add_asset_liquidity_usd,\n  add_rune_liquidity,\n  add_rune_liquidity_usd,\n  withdraw_count,\n  withdraw_asset_liquidity,\n  withdraw_asset_liquidity_usd,\n  withdraw_rune_liquidity,\n  withdraw_rune_liquidity_usd,\n  il_protection_paid,\n  il_protection_paid_usd,\n  average_slip,\n  to_asset_average_slip,\n  to_rune_average_slip,\n  swap_count,\n  to_asset_swap_count,\n  to_rune_swap_count,\n  swap_volume_rune,\n  swap_volume_rune_usd,\n  to_asset_swap_volume,\n  to_rune_swap_volume,\n  total_swap_fees_rune,\n  total_swap_fees_usd,\n  total_asset_swap_fees,\n  total_asset_rune_fees,\n  unique_member_count,\n  unique_swapper_count,\n  liquidity_units,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_daily_pool_stats_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["day"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_daily_pool_stats"], "unique_id": "model.thorchain_models.core__fact_daily_pool_stats", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_daily_pool_stats.sql", "original_file_path": "models/core/core__fact_daily_pool_stats.sql", "name": "core__fact_daily_pool_stats", "alias": "fact_daily_pool_stats", "checksum": {"name": "sha256", "checksum": "68e483ed7d558abbf44a903eee54496bdba03c3a21a0985a0a76bfaf3d7864de"}, "tags": [], "refs": [["silver__daily_pool_stats"]], "sources": [], "metrics": [], "description": "Fact table that shows the total valued locked and the total value bonded/pooled", "columns": {"FACT_DAILY_POOL_STATS_ID": {"name": "FACT_DAILY_POOL_STATS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEM_REWARDS": {"name": "SYSTEM_REWARDS", "description": "The total daily system rewards in RUNE to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYSTEM_REWARDS_USD": {"name": "SYSTEM_REWARDS_USD", "description": "The total daily system rewards in USD to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_LIQUIDITY": {"name": "ASSET_LIQUIDITY", "description": "The total asset liquidity for this pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE": {"name": "ASSET_PRICE", "description": "Current asset price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_PRICE_USD": {"name": "ASSET_PRICE_USD", "description": "Current asset price in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_LIQUIDITY": {"name": "RUNE_LIQUIDITY", "description": "The total RUNE liquidity for this pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_PRICE": {"name": "RUNE_PRICE", "description": "Current RUNE price", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_PRICE_USD": {"name": "RUNE_PRICE_USD", "description": "Current RUNE price in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_LIQUIDITY_COUNT": {"name": "ADD_LIQUIDITY_COUNT", "description": "How many times to add liquidity to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY": {"name": "ADD_ASSET_LIQUIDITY", "description": "The total amount of asset liquidity added to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_ASSET_LIQUIDITY_USD": {"name": "ADD_ASSET_LIQUIDITY_USD", "description": "The total amount in usd of asset liquidity added to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_RUNE_LIQUIDITY": {"name": "ADD_RUNE_LIQUIDITY", "description": "The total amount of RUNE liquidity added to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADD_RUNE_LIQUIDITY_USD": {"name": "ADD_RUNE_LIQUIDITY_USD", "description": "The total amount in usd of RUNE liquidity added to the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_COUNT": {"name": "WITHDRAW_COUNT", "description": "Time to withdraw from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY": {"name": "WITHDRAW_ASSET_LIQUIDITY", "description": "The total amount of asset withdrawn from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_ASSET_LIQUIDITY_USD": {"name": "WITHDRAW_ASSET_LIQUIDITY_USD", "description": "The total amount in USD of asset withdrawn from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_RUNE_LIQUIDITY": {"name": "WITHDRAW_RUNE_LIQUIDITY", "description": "The total amount of RUNE withdrawn from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "WITHDRAW_RUNE_LIQUIDITY_USD": {"name": "WITHDRAW_RUNE_LIQUIDITY_USD", "description": "The total amount in USD of RUNE withdrawn from the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IL_PROTECTION_PAID": {"name": "IL_PROTECTION_PAID", "description": "Impermanent loss protection cost paid to the network", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IL_PROTECTION_PAID_USD": {"name": "IL_PROTECTION_PAID_USD", "description": "Impermanent loss protection cost in USD paid to the network", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVERAGE_SLIP": {"name": "AVERAGE_SLIP", "description": "Average slippage ", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_AVERAGE_SLIP": {"name": "TO_ASSET_AVERAGE_SLIP", "description": "When swap from RUNE to Asset, the average slippage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_AVERAGE_SLIP": {"name": "TO_RUNE_AVERAGE_SLIP", "description": "When swap from Asset to RUNE, the average slippage", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_COUNT": {"name": "SWAP_COUNT", "description": "Total number of swaps", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_SWAP_COUNT": {"name": "TO_ASSET_SWAP_COUNT", "description": "Total number of swaps from RUNE TO Asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_SWAP_COUNT": {"name": "TO_RUNE_SWAP_COUNT", "description": "Total number of swaps from Asset TO RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_VOLUME_RUNE": {"name": "SWAP_VOLUME_RUNE", "description": "The swap amount of RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SWAP_VOLUME_RUNE_USD": {"name": "SWAP_VOLUME_RUNE_USD", "description": "The swap amount of RUNE in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ASSET_SWAP_VOLUME": {"name": "TO_ASSET_SWAP_VOLUME", "description": "The swap volume from RUNE to Asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_RUNE_SWAP_VOLUME": {"name": "TO_RUNE_SWAP_VOLUME", "description": "The swap volume from Asset to RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SWAP_FEES_RUNE": {"name": "TOTAL_SWAP_FEES_RUNE", "description": "Total swap fees in RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_SWAP_FEES_USD": {"name": "TOTAL_SWAP_FEES_USD", "description": "Total swap fees in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_ASSET_SWAP_FEES": {"name": "TOTAL_ASSET_SWAP_FEES", "description": "Total asset swap fees in asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_ASSET_RUNE_FEES": {"name": "TOTAL_ASSET_RUNE_FEES", "description": "Total asset swap fees in RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_MEMBER_COUNT": {"name": "UNIQUE_MEMBER_COUNT", "description": "All memberships with a rune address. Take the member from rune and asset and then subtract the balance = 0 then get the results", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_SWAPPER_COUNT": {"name": "UNIQUE_SWAPPER_COUNT", "description": "The unique swap address for this pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_UNITS": {"name": "LIQUIDITY_UNITS", "description": "The amount of units for the liquidity in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_daily_pool_stats.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_pool_stats.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_daily_pool_stats_id", "incremental_strategy": "merge", "cluster_by": ["day"]}, "created_at": 1665513503.707008, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    system_rewards,\n    system_rewards_usd,\n    asset_liquidity,\n    asset_price,\n    asset_price_usd,\n    rune_liquidity,\n    rune_price,\n    rune_price_usd,\n    add_liquidity_count,\n    add_asset_liquidity,\n    add_asset_liquidity_usd,\n    add_rune_liquidity,\n    add_rune_liquidity_usd,\n    withdraw_count,\n    withdraw_asset_liquidity,\n    withdraw_asset_liquidity_usd,\n    withdraw_rune_liquidity,\n    withdraw_rune_liquidity_usd,\n    il_protection_paid,\n    il_protection_paid_usd,\n    average_slip,\n    to_asset_average_slip,\n    to_rune_average_slip,\n    swap_count,\n    to_asset_swap_count,\n    to_rune_swap_count,\n    swap_volume_rune,\n    swap_volume_rune_usd,\n    to_asset_swap_volume,\n    to_rune_swap_volume,\n    total_swap_fees_rune,\n    total_swap_fees_usd,\n    total_asset_swap_fees,\n    total_asset_rune_fees,\n    unique_member_count,\n    unique_swapper_count,\n    liquidity_units,\n    _UNIQUE_KEY\n  FROM\n    THORCHAIN_DEV.silver.daily_pool_stats\n\n\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_daily_pool_stats\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.day as \n    varchar\n), '') || '-' || coalesce(cast(a.pool_name as \n    varchar\n), '') as \n    varchar\n)) AS fact_daily_pool_stats_id,\n  DAY,\n  pool_name,\n  system_rewards,\n  system_rewards_usd,\n  asset_liquidity,\n  asset_price,\n  asset_price_usd,\n  rune_liquidity,\n  rune_price,\n  rune_price_usd,\n  add_liquidity_count,\n  add_asset_liquidity,\n  add_asset_liquidity_usd,\n  add_rune_liquidity,\n  add_rune_liquidity_usd,\n  withdraw_count,\n  withdraw_asset_liquidity,\n  withdraw_asset_liquidity_usd,\n  withdraw_rune_liquidity,\n  withdraw_rune_liquidity_usd,\n  il_protection_paid,\n  il_protection_paid_usd,\n  average_slip,\n  to_asset_average_slip,\n  to_rune_average_slip,\n  swap_count,\n  to_asset_swap_count,\n  to_rune_swap_count,\n  swap_volume_rune,\n  swap_volume_rune_usd,\n  to_asset_swap_volume,\n  to_rune_swap_volume,\n  total_swap_fees_rune,\n  total_swap_fees_usd,\n  total_asset_swap_fees,\n  total_asset_rune_fees,\n  unique_member_count,\n  unique_swapper_count,\n  liquidity_units,\n  'manual' AS _audit_run_id\nFROM\n  base A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_daily_pool_stats"}, "model.thorchain_models.core__fact_daily_tvl": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_daily_tvl_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    total_value_pooled,\n    total_value_pooled_usd,\n    total_value_bonded,\n    total_value_bonded_usd,\n    total_value_locked,\n    total_value_locked_usd\n  FROM\n    {{ ref('silver__daily_tvl') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.day']\n  ) }} AS fact_daily_tvl_id,\n  DAY,\n  total_value_pooled,\n  total_value_pooled_usd,\n  total_value_bonded,\n  total_value_bonded_usd,\n  total_value_locked,\n  total_value_locked_usd,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_daily_tvl_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["day"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_daily_tvl"], "unique_id": "model.thorchain_models.core__fact_daily_tvl", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_daily_tvl.sql", "original_file_path": "models/core/core__fact_daily_tvl.sql", "name": "core__fact_daily_tvl", "alias": "fact_daily_tvl", "checksum": {"name": "sha256", "checksum": "d9271b024ee104784e798fda9d128f87da691a1c724c8be645eab7dfa55c2447"}, "tags": [], "refs": [["silver__daily_tvl"]], "sources": [], "metrics": [], "description": "Fact table that shows the total valued locked and the total value bonded/pooled", "columns": {"FACT_DAILY_TVL_ID": {"name": "FACT_DAILY_TVL_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "The total amount of rune provided by the liquidity provides and pooled in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_POOLED_USD": {"name": "TOTAL_VALUE_POOLED_USD", "description": "The total USD amount of rune provided by the liquidity provides and pooled in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "The total amount of rune provided by the node operators and bonded in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_BONDED_USD": {"name": "TOTAL_VALUE_BONDED_USD", "description": "The total USD amount of rune provided by the node operators and bonded in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "The total rune value locked in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED_USD": {"name": "TOTAL_VALUE_LOCKED_USD", "description": "The total USD value locked in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_daily_tvl.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_tvl.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_daily_tvl_id", "incremental_strategy": "merge", "cluster_by": ["day"]}, "created_at": 1665513503.7149382, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    total_value_pooled,\n    total_value_pooled_usd,\n    total_value_bonded,\n    total_value_bonded_usd,\n    total_value_locked,\n    total_value_locked_usd\n  FROM\n    THORCHAIN_DEV.silver.daily_tvl\n\n\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_daily_tvl\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.day as \n    varchar\n), '') as \n    varchar\n)) AS fact_daily_tvl_id,\n  DAY,\n  total_value_pooled,\n  total_value_pooled_usd,\n  total_value_bonded,\n  total_value_bonded_usd,\n  total_value_locked,\n  total_value_locked_usd,\n  'manual' AS _audit_run_id\nFROM\n  base A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_daily_tvl"}, "model.thorchain_models.core__fact_rewards_event_entries": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_rewards_event_entries_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    rune_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__rewards_event_entries') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.pool_name','a.block_timestamp']\n  ) }} AS fact_rewards_event_entries_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  rune_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__rewards_event_entries", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_rewards_event_entries_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_rewards_event_entries"], "unique_id": "model.thorchain_models.core__fact_rewards_event_entries", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_rewards_event_entries.sql", "original_file_path": "models/core/core__fact_rewards_event_entries.sql", "name": "core__fact_rewards_event_entries", "alias": "fact_rewards_event_entries", "checksum": {"name": "sha256", "checksum": "6f4cfd3fb15313b278fc5659dda716a92d88660c4221c77ab24a8f79389b20be"}, "tags": [], "refs": [["silver__rewards_event_entries"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that hows the entries for the rewards", "columns": {"FACT_REWARDS_EVENT_ENTRIES_ID": {"name": "FACT_REWARDS_EVENT_ENTRIES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "The rune amount of the rewards for this pool at this block", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_rewards_event_entries.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_event_entries.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_rewards_event_entries_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.722686, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    rune_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.rewards_event_entries\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_rewards_event_entries\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.pool_name as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_rewards_event_entries_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  rune_e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_rewards_event_entries"}, "model.thorchain_models.core__fact_slash_amounts": {"raw_sql": "{{ config(\n  materialized = 'view',\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset,\n    asset_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__slash_amounts') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.pool_name','a.asset']\n  ) }} AS fact_slash_amounts_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset,\n  asset_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__slash_amounts", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_slash_amounts"], "unique_id": "model.thorchain_models.core__fact_slash_amounts", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_slash_amounts.sql", "original_file_path": "models/core/core__fact_slash_amounts.sql", "name": "core__fact_slash_amounts", "alias": "fact_slash_amounts", "checksum": {"name": "sha256", "checksum": "233fdd544d04f2e0fa6acc84c9d7214e26689810d54c048181ae91509ea6e9b2"}, "tags": [], "refs": [["silver__slash_amounts"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_SLASH_AMOUNTS_ID": {"name": "FACT_SLASH_AMOUNTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": " The asset amount", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_slash_amounts.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_amounts.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "view"}, "created_at": 1665513503.735199, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset,\n    asset_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.slash_amounts\n\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.pool_name as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') as \n    varchar\n)) AS fact_slash_amounts_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  pool_name,\n  asset,\n  asset_e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_slash_amounts"}, "model.thorchain_models.core__fact_total_value_locked": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_total_value_locked_id',\n  incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    total_value_pooled,\n    total_value_bonded,\n    total_value_locked,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__total_value_locked') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.day']\n  ) }} AS fact_total_value_locked_id,\n  DAY,\n  total_value_pooled,\n  total_value_bonded,\n  total_value_locked,\n  _INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_total_value_locked_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_total_value_locked"], "unique_id": "model.thorchain_models.core__fact_total_value_locked", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_total_value_locked.sql", "original_file_path": "models/core/core__fact_total_value_locked.sql", "name": "core__fact_total_value_locked", "alias": "fact_total_value_locked", "checksum": {"name": "sha256", "checksum": "72474341d33fc423233a60fdbcb332cda99f844c96b197db068959a0d8100341"}, "tags": [], "refs": [["silver__total_value_locked"]], "sources": [], "metrics": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_TOTAL_VALUE_LOCKED_ID": {"name": "FACT_TOTAL_VALUE_LOCKED_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The timestamp in day for the recorded of the block fee", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_POOLED": {"name": "TOTAL_VALUE_POOLED", "description": "The total amount of rune provided by the liquidity provides and pooled in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_BONDED": {"name": "TOTAL_VALUE_BONDED", "description": "The total amount of rune provided by the node operators and bonded in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_VALUE_LOCKED": {"name": "TOTAL_VALUE_LOCKED", "description": "The total rune value locked in the pool", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_total_value_locked.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_value_locked.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_total_value_locked_id", "incremental_strategy": "merge"}, "created_at": 1665513503.747912, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    total_value_pooled,\n    total_value_bonded,\n    total_value_locked,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.total_value_locked\n\n\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_total_value_locked\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.day as \n    varchar\n), '') as \n    varchar\n)) AS fact_total_value_locked_id,\n  DAY,\n  total_value_pooled,\n  total_value_bonded,\n  total_value_locked,\n  _INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_total_value_locked"}, "model.thorchain_models.core__fact_liquidity_actions": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_liquidity_actions_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    tx_id,\n    lp_action,\n    pool_name,\n    from_address,\n    to_address,\n    rune_amount,\n    rune_amount_usd,\n    asset_amount,\n    asset_amount_usd,\n    stake_units,\n    asset_tx_id,\n    asset_address,\n    asset_blockchain,\n    il_protection,\n    il_protection_usd,\n    unstake_asymmetry,\n    unstake_basis_points,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__liquidity_actions') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_liquidity_actions_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  lp_action,\n  pool_name,\n  from_address,\n  to_address,\n  rune_amount,\n  rune_amount_usd,\n  asset_amount,\n  asset_amount_usd,\n  stake_units,\n  asset_tx_id,\n  asset_address,\n  asset_blockchain,\n  il_protection,\n  il_protection_usd,\n  unstake_asymmetry,\n  unstake_basis_points,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__liquidity_actions", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_liquidity_actions_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_liquidity_actions"], "unique_id": "model.thorchain_models.core__fact_liquidity_actions", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_liquidity_actions.sql", "original_file_path": "models/core/core__fact_liquidity_actions.sql", "name": "core__fact_liquidity_actions", "alias": "fact_liquidity_actions", "checksum": {"name": "sha256", "checksum": "814c46ef7991b4ca1ddaa437884428680184e59cd43ba3caa5cb2e25ee814065"}, "tags": [], "refs": [["silver__liquidity_actions"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing the actions the liquidity providers do in the THORChain, with the amount in RUNE/Asset", "columns": {"FACT_LIQUIDITY_ACTIONS_ID": {"name": "FACT_LIQUIDITY_ACTIONS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LP_ACTION": {"name": "LP_ACTION", "description": "The direction of the liquidity providers, add or remove the liquidity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "How many RUNE liquidity added/removed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "How many RUNE liquidity added/removed in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "How many Asset liquidity added/removed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT_USD": {"name": "ASSET_AMOUNT_USD", "description": "How many Asset liquidity added/removed in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "Stake units are a way of representing how much liquidity an address has in the pool. THORChain converts the raw amounts you are depositing / withdrawing into stake_units to represent what % of the pool you own a claim to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_tx_id": {"name": "asset_tx_id", "description": "The transaction id for adding/removing the asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_address": {"name": "asset_address", "description": "The asset address of the liquidity provider", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asset_blockchain": {"name": "asset_blockchain", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "il_protection": {"name": "il_protection", "description": "The total impermanent loss protection paid for this pool on this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "il_protection_usd": {"name": "il_protection_usd", "description": "The total impermanent loss protection paid  in USD for this pool on this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unstake_asymmetry": {"name": "unstake_asymmetry", "description": "Only exists in unstake, or removing the liquidity", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unstake_basis_points": {"name": "unstake_basis_points", "description": "The basis points for unstaking, or removing the liquidity", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_liquidity_actions.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_liquidity_actions_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.758295, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    tx_id,\n    lp_action,\n    pool_name,\n    from_address,\n    to_address,\n    rune_amount,\n    rune_amount_usd,\n    asset_amount,\n    asset_amount_usd,\n    stake_units,\n    asset_tx_id,\n    asset_address,\n    asset_blockchain,\n    il_protection,\n    il_protection_usd,\n    unstake_asymmetry,\n    unstake_basis_points,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.liquidity_actions\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_liquidity_actions\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_liquidity_actions_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  lp_action,\n  pool_name,\n  from_address,\n  to_address,\n  rune_amount,\n  rune_amount_usd,\n  asset_amount,\n  asset_amount_usd,\n  stake_units,\n  asset_tx_id,\n  asset_address,\n  asset_blockchain,\n  il_protection,\n  il_protection_usd,\n  unstake_asymmetry,\n  unstake_basis_points,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_liquidity_actions"}, "model.thorchain_models.core__fact_asgard_fund_yggdrasil_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_asgard_fund_yggdrasil_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    asset,\n    asset_e8,\n    vault_key,\n    event_id,\n    block_timestamp,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__asgard_fund_yggdrasil_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.tx_id','a.asset ','a.asset_e8','a.vault_key','a.block_timestamp']\n  ) }} AS fact_asgard_fund_yggdrasil_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.asset,\n  A.tx_id,\n  A.vault_key,\n  A.asset_e8,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_asgard_fund_yggdrasil_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_asgard_fund_yggdrasil_events"], "unique_id": "model.thorchain_models.core__fact_asgard_fund_yggdrasil_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_asgard_fund_yggdrasil_events.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.sql", "name": "core__fact_asgard_fund_yggdrasil_events", "alias": "fact_asgard_fund_yggdrasil_events", "checksum": {"name": "sha256", "checksum": "a684cf5f3a9682f23650dde8bb2c7ca0392f0cde78c2e48cb4fd1bf82a477386"}, "tags": [], "refs": [["silver__asgard_fund_yggdrasil_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing add events", "columns": {"FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID": {"name": "FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VAULT_KEY": {"name": "VAULT_KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_asgard_fund_yggdrasil_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_asgard_fund_yggdrasil_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.775994, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    asset,\n    asset_e8,\n    vault_key,\n    event_id,\n    block_timestamp,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.asgard_fund_yggdrasil_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.asset  as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.vault_key as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_asgard_fund_yggdrasil_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.asset,\n  A.tx_id,\n  A.vault_key,\n  A.asset_e8,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events"}, "model.thorchain_models.core__fact_unstake_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_unstake_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    e.tx_id,\n    e.blockchain,\n    e.from_address,\n    e.to_address,\n    e.asset,\n    e.asset_e8,\n    e.emit_asset_e8,\n    e.emit_rune_e8,\n    e.memo,\n    e.pool_name,\n    e.stake_units,\n    e.basis_points,\n    e.asymmetry,\n    e.imp_loss_protection_e8,\n    e._emit_asset_in_rune_e8,\n    e.block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__unstake_events') }}\n    e\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.tx_id', 'a.blockchain', 'a.from_address', 'a.to_address', 'a.asset', 'a.asset_e8', 'a.emit_asset_e8', 'a.emit_rune_e8', 'a.memo', 'a.pool_name', 'a.stake_units', 'a.basis_points', 'a.asymmetry', 'a.imp_loss_protection_e8', 'a._emit_asset_in_rune_e8','a.block_timestamp']\n  ) }} AS fact_unstake_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.tx_id,\n  A.blockchain,\n  A.from_address,\n  A.to_address,\n  A.asset,\n  A.asset_e8,\n  A.emit_asset_e8,\n  A.emit_rune_e8,\n  A.memo,\n  A.pool_name,\n  A.stake_units,\n  A.basis_points,\n  A.asymmetry,\n  A.imp_loss_protection_e8,\n  A._emit_asset_in_rune_e8,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__unstake_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_unstake_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_unstake_events"], "unique_id": "model.thorchain_models.core__fact_unstake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_unstake_events.sql", "original_file_path": "models/core/core__fact_unstake_events.sql", "name": "core__fact_unstake_events", "alias": "fact_unstake_events", "checksum": {"name": "sha256", "checksum": "acd7177340a36c0da997201035d712d2b87326a930d2c46912ae17c887d419f5"}, "tags": [], "refs": [["silver__unstake_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing unstake events", "columns": {"FACT_UNSTAKE_EVENTS_ID": {"name": "FACT_UNSTAKE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this bond, using the price table we can calculate the rune amount by asset amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMIT_ASSET_E8": {"name": "EMIT_ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EMIT_RUNE_E8": {"name": "EMIT_RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STAKE_UNITS": {"name": "STAKE_UNITS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BASIS_POINTS": {"name": "BASIS_POINTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASYMMETRY": {"name": "ASYMMETRY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IMP_LOSS_PROTECTION_E8": {"name": "IMP_LOSS_PROTECTION_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_EMIT_ASSET_IN_RUNE_E8": {"name": "_EMIT_ASSET_IN_RUNE_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_unstake_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_unstake_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.79309, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    e.tx_id,\n    e.blockchain,\n    e.from_address,\n    e.to_address,\n    e.asset,\n    e.asset_e8,\n    e.emit_asset_e8,\n    e.emit_rune_e8,\n    e.memo,\n    e.pool_name,\n    e.stake_units,\n    e.basis_points,\n    e.asymmetry,\n    e.imp_loss_protection_e8,\n    e._emit_asset_in_rune_e8,\n    e.block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.unstake_events\n    e\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_unstake_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.emit_asset_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.emit_rune_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.memo as \n    varchar\n), '') || '-' || coalesce(cast(a.pool_name as \n    varchar\n), '') || '-' || coalesce(cast(a.stake_units as \n    varchar\n), '') || '-' || coalesce(cast(a.basis_points as \n    varchar\n), '') || '-' || coalesce(cast(a.asymmetry as \n    varchar\n), '') || '-' || coalesce(cast(a.imp_loss_protection_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a._emit_asset_in_rune_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_unstake_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.tx_id,\n  A.blockchain,\n  A.from_address,\n  A.to_address,\n  A.asset,\n  A.asset_e8,\n  A.emit_asset_e8,\n  A.emit_rune_e8,\n  A.memo,\n  A.pool_name,\n  A.stake_units,\n  A.basis_points,\n  A.asymmetry,\n  A.imp_loss_protection_e8,\n  A._emit_asset_in_rune_e8,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_unstake_events"}, "model.thorchain_models.core__fact_set_mimir_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_set_mimir_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    key,\n    VALUE,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_mimir_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.key','a.block_timestamp']\n  ) }} AS fact_set_mimir_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  key,\n  VALUE,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__set_mimir_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_mimir_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_set_mimir_events"], "unique_id": "model.thorchain_models.core__fact_set_mimir_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_set_mimir_events.sql", "original_file_path": "models/core/core__fact_set_mimir_events.sql", "name": "core__fact_set_mimir_events", "alias": "fact_set_mimir_events", "checksum": {"name": "sha256", "checksum": "5c627167e9118cf12a0e9a382526ac478ae329cb71033cfb6e8a09de54d03d14"}, "tags": [], "refs": [["silver__set_mimir_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_SET_MIMIR_EVENTS_ID": {"name": "FACT_SET_MIMIR_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "KEY": {"name": "KEY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALUE": {"name": "VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_set_mimir_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_mimir_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_set_mimir_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.815883, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    key,\n    VALUE,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.set_mimir_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_set_mimir_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.key as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_set_mimir_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  key,\n  VALUE,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_set_mimir_events"}, "model.thorchain_models.core__fact_bond_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_bond_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    bond_type,\n    e8,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__bond_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.tx_id','a.from_address','a.to_address ','a.asset_e8','a.bond_type','a.e8','a.block_timestamp','a.blockchain','a.asset','a.memo']\n  ) }} AS fact_bond_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  bond_type,\n  e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__bond_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_bond_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_bond_events"], "unique_id": "model.thorchain_models.core__fact_bond_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_bond_events.sql", "original_file_path": "models/core/core__fact_bond_events.sql", "name": "core__fact_bond_events", "alias": "fact_bond_events", "checksum": {"name": "sha256", "checksum": "633553679139ebba76426735933f8b666437bab601cd322ff183e03e5a052f4c"}, "tags": [], "refs": [["silver__bond_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing all the information about the bond activities. THORChain uses a spinoff of the Proof of Stake consensus mechanism called Proof of Bond.", "columns": {"FACT_BOND_EVENTS_ID": {"name": "FACT_BOND_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this bond events happens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this bond, using the price table we can calculate the rune amount by asset amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bond_type": {"name": "bond_type", "description": "There are 4 different types of bond:bond_reward, bond_paid, bond_cost, bond_returned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "E8": {"name": "E8", "description": "The rune amount for this bond event", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_bond_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_bond_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.828463, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    blockchain,\n    from_address,\n    to_address,\n    asset,\n    asset_e8,\n    memo,\n    bond_type,\n    e8,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.bond_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_bond_events\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      THORCHAIN_DEV.core.fact_bond_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address  as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.bond_type as \n    varchar\n), '') || '-' || coalesce(cast(a.e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.memo as \n    varchar\n), '') as \n    varchar\n)) AS fact_bond_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  blockchain,\n  from_address,\n  to_address,\n  asset,\n  asset_e8,\n  memo,\n  bond_type,\n  e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_bond_events"}, "model.thorchain_models.core__fact_transfers": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_transfers_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    from_address,\n    to_address,\n    asset,\n    rune_amount,\n    rune_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__transfers') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_transfers_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  from_address,\n  to_address,\n  asset,\n  rune_amount,\n  rune_amount_usd,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__transfers", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transfers_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_transfers"], "unique_id": "model.thorchain_models.core__fact_transfers", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_transfers.sql", "original_file_path": "models/core/core__fact_transfers.sql", "name": "core__fact_transfers", "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "f758c6e7483e9cea7b93c13932577b0e69ffe26c29d573187887542e74b5c9e2"}, "tags": [], "refs": [["silver__transfers"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table shows the transfer action between different address", "columns": {"FACT_TRANSFERS_ID": {"name": "FACT_TRANSFERS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "The transferred RUNE amount", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT_USD": {"name": "RUNE_AMOUNT_USD", "description": "The transferred RUNE amount in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_transfers.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_transfers_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.850165, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    from_address,\n    to_address,\n    asset,\n    rune_amount,\n    rune_amount_usd,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.transfers\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_transfers\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_transfers_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  from_address,\n  to_address,\n  asset,\n  rune_amount,\n  rune_amount_usd,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_transfers"}, "model.thorchain_models.core__fact_pool_balance_change_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_pool_balance_change_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    asset,\n    rune_amount,\n    rune_add,\n    asset_amount,\n    asset_add,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_balance_change_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.asset','a.block_timestamp']\n  ) }} AS fact_pool_balance_change_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  rune_amount,\n  rune_add,\n  asset_amount,\n  asset_add,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__pool_balance_change_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_balance_change_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_pool_balance_change_events"], "unique_id": "model.thorchain_models.core__fact_pool_balance_change_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_pool_balance_change_events.sql", "original_file_path": "models/core/core__fact_pool_balance_change_events.sql", "name": "core__fact_pool_balance_change_events", "alias": "fact_pool_balance_change_events", "checksum": {"name": "sha256", "checksum": "969726c214840d346b9e54a2480ecd97e2e2bdeb04b7cbe9fff0cd02d4052287"}, "tags": [], "refs": [["silver__pool_balance_change_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows the change of the pool balance", "columns": {"FACT_POOL_BALANCE_CHANGE_EVENTS_ID": {"name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Same as pool name, which pool this bond events happens", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_AMOUNT": {"name": "RUNE_AMOUNT", "description": "The amount of rune for the pool balance change", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_ADD": {"name": "RUNE_ADD", "description": "False or True, if True, then the event is to add rune not asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_AMOUNT": {"name": "ASSET_AMOUNT", "description": "The amount of asset for the pool balance change", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADD": {"name": "ASSET_ADD", "description": "False or True, if True, then the event is to add asset not rune", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "The reason for the pool balance change", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_pool_balance_change_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_balance_change_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_pool_balance_change_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.866546, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    asset,\n    rune_amount,\n    rune_add,\n    asset_amount,\n    asset_add,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.pool_balance_change_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_pool_balance_change_events\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      THORCHAIN_DEV.core.fact_pool_balance_change_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_pool_balance_change_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset,\n  rune_amount,\n  rune_add,\n  asset_amount,\n  asset_add,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_pool_balance_change_events"}, "model.thorchain_models.core__fact_rewards_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_rewards_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    bond_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__rewards_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.block_timestamp']\n  ) }} AS fact_rewards_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  bond_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__rewards_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_rewards_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_rewards_events"], "unique_id": "model.thorchain_models.core__fact_rewards_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_rewards_events.sql", "original_file_path": "models/core/core__fact_rewards_events.sql", "name": "core__fact_rewards_events", "alias": "fact_rewards_events", "checksum": {"name": "sha256", "checksum": "71bbe68390d18f3a7d84d67f7cad2e8a3eed981263ec5e4d78d432ae371d6525"}, "tags": [], "refs": [["silver__rewards_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows the entries for the rewards", "columns": {"FACT_REWARDS_EVENTS_ID": {"name": "FACT_REWARDS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BOND_E8": {"name": "BOND_E8", "description": "The rune amount of the bond for this pool at this block", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_rewards_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_rewards_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.877795, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    bond_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.rewards_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_rewards_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_rewards_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  bond_e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_rewards_events"}, "model.thorchain_models.core__fact_errata_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_errata_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    in_tx,\n    asset,\n    asset_e8,\n    rune_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__errata_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.in_tx','a.asset','a.block_timestamp']\n  ) }} AS fact_errata_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset_e8,\n  rune_e8,\n  in_tx,\n  asset,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__errata_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_errata_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_errata_events"], "unique_id": "model.thorchain_models.core__fact_errata_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_errata_events.sql", "original_file_path": "models/core/core__fact_errata_events.sql", "name": "core__fact_errata_events", "alias": "fact_errata_events", "checksum": {"name": "sha256", "checksum": "da56a1a8c976e5936ce1eb173ca975ee0a8fc38fab8ac5ce6820b8e8b8d8da84"}, "tags": [], "refs": [["silver__errata_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing errata events", "columns": {"FACT_ERRATA_EVENTS_ID": {"name": "FACT_ERRATA_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "The rune amount for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IN_TX": {"name": "IN_TX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_errata_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_errata_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.8898182, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    in_tx,\n    asset,\n    asset_e8,\n    rune_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.errata_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_errata_events\n  ) - INTERVAL '4 HOURS'\n  OR asset IN (\n    SELECT\n      asset\n    FROM\n      THORCHAIN_DEV.core.fact_errata_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.in_tx as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_errata_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  asset_e8,\n  rune_e8,\n  in_tx,\n  asset,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_errata_events"}, "model.thorchain_models.core__fact_add_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_add_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    e.block_timestamp,\n    e.tx_id,\n    e.rune_e8,\n    e.blockchain,\n    e.asset_e8,\n    e.pool_name,\n    e.memo,\n    e.to_address,\n    e.from_address,\n    e.asset,\n    e.event_id,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__add_events') }}\n    e\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.tx_id','a.blockchain','a.from_address','a.to_address','a.asset','a.memo','a.block_timestamp']\n  ) }} AS fact_add_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.tx_id,\n  A.rune_e8,\n  A.blockchain,\n  A.asset_e8,\n  A.pool_name,\n  A.memo,\n  A.to_address,\n  A.from_address,\n  A.asset,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__add_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_add_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_add_events"], "unique_id": "model.thorchain_models.core__fact_add_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_add_events.sql", "original_file_path": "models/core/core__fact_add_events.sql", "name": "core__fact_add_events", "alias": "fact_add_events", "checksum": {"name": "sha256", "checksum": "10997db9ef8e48a93017529cc38ddeb32dc4f01d463028de58454a2915192702"}, "tags": [], "refs": [["silver__add_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing add events", "columns": {"FACT_ADD_EVENTS_ID": {"name": "FACT_ADD_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "The amount of rune for this add event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MEMO": {"name": "MEMO", "description": "The memo for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_add_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_add_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.9049559, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    e.block_timestamp,\n    e.tx_id,\n    e.rune_e8,\n    e.blockchain,\n    e.asset_e8,\n    e.pool_name,\n    e.memo,\n    e.to_address,\n    e.from_address,\n    e.asset,\n    e.event_id,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.add_events\n    e\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_add_events\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      THORCHAIN_DEV.core.fact_add_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id as \n    varchar\n), '') || '-' || coalesce(cast(a.blockchain as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.memo as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_add_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  A.tx_id,\n  A.rune_e8,\n  A.blockchain,\n  A.asset_e8,\n  A.pool_name,\n  A.memo,\n  A.to_address,\n  A.from_address,\n  A.asset,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_add_events"}, "model.thorchain_models.core__fact_transfer_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_transfer_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    from_address,\n    to_address,\n    asset,\n    amount_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__transfer_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id', 'a.from_address', 'a.to_address', 'a.asset', 'a.amount_e8']\n  ) }} AS fact_transfer_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  from_address,\n  to_address,\n  asset,\n  amount_e8,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__transfer_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_transfer_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_transfer_events"], "unique_id": "model.thorchain_models.core__fact_transfer_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_transfer_events.sql", "original_file_path": "models/core/core__fact_transfer_events.sql", "name": "core__fact_transfer_events", "alias": "fact_transfer_events", "checksum": {"name": "sha256", "checksum": "6fe51dbc096cd70d5ec3ced3b1f02761edd59eaa09e9b00ee482855c41ce59e6"}, "tags": [], "refs": [["silver__transfer_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing stake events", "columns": {"FACT_TRANSFER_EVENTS_ID": {"name": "FACT_TRANSFER_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The account public key", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_E8": {"name": "AMOUNT_E8", "description": "The asset amount for this event", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_transfer_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_transfer_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.92257, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    from_address,\n    to_address,\n    asset,\n    amount_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.transfer_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_transfer_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.from_address as \n    varchar\n), '') || '-' || coalesce(cast(a.to_address as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.amount_e8 as \n    varchar\n), '') as \n    varchar\n)) AS fact_transfer_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  from_address,\n  to_address,\n  asset,\n  amount_e8,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_transfer_events"}, "model.thorchain_models.core__fact_daily_earnings": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_daily_earnings_id',\n  incremental_strategy = 'merge'\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    liquidity_fees,\n    liquidity_fees_usd,\n    block_rewards,\n    block_rewards_usd,\n    total_earnings,\n    total_earnings_usd,\n    earnings_to_nodes,\n    earnings_to_nodes_usd,\n    earnings_to_pools,\n    earnings_to_pools_usd,\n    avg_node_count,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__daily_earnings') }}\n\n{% if is_incremental() %}\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.day']\n  ) }} AS fact_daily_earnings_id,\n  DAY,\n  liquidity_fees,\n  liquidity_fees_usd,\n  block_rewards,\n  block_rewards_usd,\n  total_earnings,\n  total_earnings_usd,\n  earnings_to_nodes,\n  earnings_to_nodes_usd,\n  earnings_to_pools,\n  earnings_to_pools_usd,\n  avg_node_count,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_daily_earnings_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_daily_earnings"], "unique_id": "model.thorchain_models.core__fact_daily_earnings", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_daily_earnings.sql", "original_file_path": "models/core/core__fact_daily_earnings.sql", "name": "core__fact_daily_earnings", "alias": "fact_daily_earnings", "checksum": {"name": "sha256", "checksum": "d2548ab216f31b4286750dd9ec9cee231d0b3100584147257cce3f1170e8ba58"}, "tags": [], "refs": [["silver__daily_earnings"]], "sources": [], "metrics": [], "description": "The earnings information for the whole THORChain network broken down by daily", "columns": {"FACT_DAILY_EARNINGS_ID": {"name": "FACT_DAILY_EARNINGS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The recorded day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_FEES": {"name": "LIQUIDITY_FEES", "description": "The summarized liquidity cost fee within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LIQUIDITY_FEES_USD": {"name": "LIQUIDITY_FEES_USD", "description": "The summarized liquidity cost fee within this day in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_REWARDS": {"name": "BLOCK_REWARDS", "description": "The summarized total block rewards within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_REWARDS_USD": {"name": "BLOCK_REWARDS_USD", "description": "The summarized total block rewards within this day in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_EARNINGS": {"name": "TOTAL_EARNINGS", "description": "The summarized total earnings within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_EARNINGS_USD": {"name": "TOTAL_EARNINGS_USD", "description": "The summarized total earnings within this day in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_NODES": {"name": "EARNINGS_TO_NODES", "description": "The summarized bonding earnings within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_NODES_USD": {"name": "EARNINGS_TO_NODES_USD", "description": "The summarized bonding earnings within this day in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_POOLS": {"name": "EARNINGS_TO_POOLS", "description": "The summarized liquidity earnings fee within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS_TO_POOLS_USD": {"name": "EARNINGS_TO_POOLS_USD", "description": "The summarized liquidity earnings fee within this day in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AVG_NODE_COUNT": {"name": "AVG_NODE_COUNT", "description": "The summarized average node operators number within this day", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_daily_earnings.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_daily_earnings_id", "incremental_strategy": "merge"}, "created_at": 1665513503.9389288, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    liquidity_fees,\n    liquidity_fees_usd,\n    block_rewards,\n    block_rewards_usd,\n    total_earnings,\n    total_earnings_usd,\n    earnings_to_nodes,\n    earnings_to_nodes_usd,\n    earnings_to_pools,\n    earnings_to_pools_usd,\n    avg_node_count,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.daily_earnings\n\n\nWHERE\n  DAY >= (\n    SELECT\n      MAX(\n        DAY\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_daily_earnings\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.day as \n    varchar\n), '') as \n    varchar\n)) AS fact_daily_earnings_id,\n  DAY,\n  liquidity_fees,\n  liquidity_fees_usd,\n  block_rewards,\n  block_rewards_usd,\n  total_earnings,\n  total_earnings_usd,\n  earnings_to_nodes,\n  earnings_to_nodes_usd,\n  earnings_to_pools,\n  earnings_to_pools_usd,\n  avg_node_count,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_daily_earnings"}, "model.thorchain_models.core__fact_fee_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_fee_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    asset,\n    pool_deduct,\n    asset_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__fee_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.asset','a.asset_e8','a.pool_deduct','a.block_timestamp','a.tx_id ']\n  ) }} AS fact_fee_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  asset,\n  pool_deduct,\n  asset_e8,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__fee_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_fee_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_fee_events"], "unique_id": "model.thorchain_models.core__fact_fee_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_fee_events.sql", "original_file_path": "models/core/core__fact_fee_events.sql", "name": "core__fact_fee_events", "alias": "fact_fee_events", "checksum": {"name": "sha256", "checksum": "d362c55d2713d48c9302bbdfdc8747ffa187fbc487d7e42737eed894c4623fe2"}, "tags": [], "refs": [["silver__fee_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing all related fees that happen in the Thorchain network", "columns": {"FACT_FEE_EVENTS_ID": {"name": "FACT_FEE_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "Asset name or pool name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_DEDUCT": {"name": "POOL_DEDUCT", "description": "The amount deducted from the pool related to the fee", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset amount for this fee, using the price table we can calculate the rune amount by asset amount", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_fee_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_fee_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.9596438, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    tx_id,\n    asset,\n    pool_deduct,\n    asset_e8,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.fee_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_fee_events\n  ) - INTERVAL '4 HOURS'\n  OR tx_id IN (\n    SELECT\n      tx_id\n    FROM\n      THORCHAIN_DEV.core.fact_fee_events\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.asset as \n    varchar\n), '') || '-' || coalesce(cast(a.asset_e8 as \n    varchar\n), '') || '-' || coalesce(cast(a.pool_deduct as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.tx_id  as \n    varchar\n), '') as \n    varchar\n)) AS fact_fee_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  tx_id,\n  asset,\n  pool_deduct,\n  asset_e8,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_fee_events"}, "model.thorchain_models.core__fact_set_node_keys_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_set_node_keys_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    secp256k1,\n    ed25519,\n    validator_consensus,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_node_keys_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id', 'a.node_address', 'a.secp256k1', 'a.ed25519', 'a.block_timestamp', 'a.validator_consensus']\n  ) }} AS fact_set_node_keys_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__set_node_keys_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_node_keys_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_set_node_keys_events"], "unique_id": "model.thorchain_models.core__fact_set_node_keys_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_set_node_keys_events.sql", "original_file_path": "models/core/core__fact_set_node_keys_events.sql", "name": "core__fact_set_node_keys_events", "alias": "fact_set_node_keys_events", "checksum": {"name": "sha256", "checksum": "1e982251a29c4e1a10f0f009d105bc0ae45ab4370d2eb27c1e62b520fea7546c"}, "tags": [], "refs": [["silver__set_node_keys_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_SET_NODE_KEYS_EVENTS_ID": {"name": "FACT_SET_NODE_KEYS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SECP256K1": {"name": "SECP256K1", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ED25519": {"name": "ED25519", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_CONSENSUS": {"name": "VALIDATOR_CONSENSUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_set_node_keys_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_node_keys_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_set_node_keys_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.97668, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    secp256k1,\n    ed25519,\n    validator_consensus,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.set_node_keys_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_set_node_keys_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.node_address as \n    varchar\n), '') || '-' || coalesce(cast(a.secp256k1 as \n    varchar\n), '') || '-' || coalesce(cast(a.ed25519 as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') || '-' || coalesce(cast(a.validator_consensus as \n    varchar\n), '') as \n    varchar\n)) AS fact_set_node_keys_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  secp256k1,\n  ed25519,\n  validator_consensus,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_set_node_keys_events"}, "model.thorchain_models.core__fact_block_pool_depths": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_pool_depths_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_e8,\n    rune_e8,\n    synth_e8,\n    block_timestamp,\n    _inserted_timestamp\n  FROM\n    {{ ref('silver__block_pool_depths') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '72 HOURS'\n  OR pool_name IN (\n    SELECT\n      pool_name\n    FROM\n      {{ this }}\n    WHERE\n      dim_block_id = '-1'\n  )\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.pool_name','a.block_timestamp']\n  ) }} AS fact_pool_depths_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  rune_e8,\n  asset_e8,\n  synth_e8,\n  pool_name,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_depths_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_block_pool_depths"], "unique_id": "model.thorchain_models.core__fact_block_pool_depths", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_block_pool_depths.sql", "original_file_path": "models/core/core__fact_block_pool_depths.sql", "name": "core__fact_block_pool_depths", "alias": "fact_block_pool_depths", "checksum": {"name": "sha256", "checksum": "4a96bf199e8e18e03d4d61b0dee7af747cdb123788966c008f04df001dd29d4b"}, "tags": [], "refs": [["silver__block_pool_depths"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table containing all the available pools and its rune/asset depth at each block interval", "columns": {"FACT_POOL_DEPTHS_ID": {"name": "FACT_POOL_DEPTHS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_E8": {"name": "RUNE_E8", "description": "The rune depth for this pool at this block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_E8": {"name": "ASSET_E8", "description": "The asset depth for this pool at this block", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYNTH_E8": {"name": "SYNTH_E8", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_block_pool_depths.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_pool_depths_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513503.989411, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    pool_name,\n    asset_e8,\n    rune_e8,\n    synth_e8,\n    block_timestamp,\n    _inserted_timestamp\n  FROM\n    THORCHAIN_DEV.silver.block_pool_depths\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_block_pool_depths\n  ) - INTERVAL '72 HOURS'\n  OR pool_name IN (\n    SELECT\n      pool_name\n    FROM\n      THORCHAIN_DEV.core.fact_block_pool_depths\n    WHERE\n      dim_block_id = '-1'\n  )\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.pool_name as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_pool_depths_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  rune_e8,\n  asset_e8,\n  synth_e8,\n  pool_name,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_block_pool_depths"}, "model.thorchain_models.core__fact_prices": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'FACT_PRICES_ID',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    block_timestamp,\n    price_rune_asset,\n    price_asset_rune,\n    asset_usd,\n    rune_usd,\n    pool_name,\n    _unique_key\n  FROM\n    {{ ref('silver__prices') }}\n\n{% if is_incremental() %}\nWHERE\n  block_timestamp :: DATE >= CURRENT_DATE -5\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_prices_id,\n  A.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  price_rune_asset,\n  price_asset_rune,\n  asset_usd,\n  rune_usd,\n  pool_name,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_id = b.block_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__prices", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "FACT_PRICES_ID", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_prices"], "unique_id": "model.thorchain_models.core__fact_prices", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_prices.sql", "original_file_path": "models/core/core__fact_prices.sql", "name": "core__fact_prices", "alias": "fact_prices", "checksum": {"name": "sha256", "checksum": "919e24f5540f4d7d07cdc10d00f4c8fcd1f7999bb378b196995e2b8bab5b18c6"}, "tags": [], "refs": [["silver__prices"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that provides the summary of the gas events for each block", "columns": {"FACT_PRICES_ID": {"name": "FACT_PRICES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_RUNE_ASSET": {"name": "PRICE_RUNE_ASSET", "description": "How many RUNE can be exchanged by 1 Asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_ASSET_RUNE": {"name": "PRICE_ASSET_RUNE", "description": "How many Asset can be exchanged by 1 RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_USD": {"name": "ASSET_USD", "description": "The Asset price in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_USD": {"name": "RUNE_USD", "description": "The Rune price in USD", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_prices.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "FACT_PRICES_ID", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513504.00623, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    block_id,\n    block_timestamp,\n    price_rune_asset,\n    price_asset_rune,\n    asset_usd,\n    rune_usd,\n    pool_name,\n    _unique_key\n  FROM\n    THORCHAIN_DEV.silver.prices\n\n\nWHERE\n  block_timestamp :: DATE >= CURRENT_DATE -5\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_prices_id,\n  A.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  price_rune_asset,\n  price_asset_rune,\n  asset_usd,\n  rune_usd,\n  pool_name,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_id = b.block_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_prices"}, "model.thorchain_models.core__fact_set_ip_address_events": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_set_ip_address_events_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    ip_addr,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__set_ip_address_events') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.node_address','a.ip_addr','a.block_timestamp']\n  ) }} AS fact_set_ip_address_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  ip_addr,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__set_ip_address_events", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_set_ip_address_events_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_set_ip_address_events"], "unique_id": "model.thorchain_models.core__fact_set_ip_address_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_set_ip_address_events.sql", "original_file_path": "models/core/core__fact_set_ip_address_events.sql", "name": "core__fact_set_ip_address_events", "alias": "fact_set_ip_address_events", "checksum": {"name": "sha256", "checksum": "62e1a15e3775c7bbbdbff76574e98be308fbd6b0bd3d48a8444b6d702f7c8617"}, "tags": [], "refs": [["silver__set_ip_address_events"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows set ip address events", "columns": {"FACT_SET_IP_ADDRESS_EVENTS_ID": {"name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IP_ADDR": {"name": "IP_ADDR", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_set_ip_address_events.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_ip_address_events.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_set_ip_address_events_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513504.01967, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    ip_addr,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.set_ip_address_events\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_set_ip_address_events\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.node_address as \n    varchar\n), '') || '-' || coalesce(cast(a.ip_addr as \n    varchar\n), '') || '-' || coalesce(cast(a.block_timestamp as \n    varchar\n), '') as \n    varchar\n)) AS fact_set_ip_address_events_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  ip_addr,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_set_ip_address_events"}, "model.thorchain_models.core__fact_pool_block_fees": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_pool_block_fees_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['day']\n) }}\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    rewards,\n    total_liquidity_fees_rune,\n    asset_liquidity_fees,\n    rune_liquidity_fees,\n    earnings,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__pool_block_fees') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a._unique_key']\n  ) }} AS fact_pool_block_fees_id,\n  DAY,\n  pool_name,\n  rewards,\n  total_liquidity_fees_rune,\n  asset_liquidity_fees,\n  rune_liquidity_fees,\n  earnings,\n  A._inserted_timestamp,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_pool_block_fees_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["day"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_pool_block_fees"], "unique_id": "model.thorchain_models.core__fact_pool_block_fees", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_pool_block_fees.sql", "original_file_path": "models/core/core__fact_pool_block_fees.sql", "name": "core__fact_pool_block_fees", "alias": "fact_pool_block_fees", "checksum": {"name": "sha256", "checksum": "178eed258a58972318c526af4e9e1e09d4ffb6161648d54ade1a09e657ab231a"}, "tags": [], "refs": [["silver__pool_block_fees"]], "sources": [], "metrics": [], "description": "Fact table that shows the fee paid by each pool at different timestamp", "columns": {"FACT_POOL_BLOCK_FEES_ID": {"name": "FACT_POOL_BLOCK_FEES_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DAY": {"name": "DAY", "description": "The unique transaction id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "Name of the pool -- also asset name in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REWARDS": {"name": "REWARDS", "description": "The total rewards", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_LIQUIDITY_FEES_RUNE": {"name": "TOTAL_LIQUIDITY_FEES_RUNE", "description": "The total liquidity fees paid in RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_LIQUIDITY_FEES": {"name": "ASSET_LIQUIDITY_FEES", "description": "The liquidity fees paid in Asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RUNE_LIQUIDITY_FEES": {"name": "RUNE_LIQUIDITY_FEES", "description": "The liquidity fees paid in RUNE", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EARNINGS": {"name": "EARNINGS", "description": "The total earnings for this pool at this time", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_pool_block_fees.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_fees.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_pool_block_fees_id", "incremental_strategy": "merge", "cluster_by": ["day"]}, "created_at": 1665513504.0336719, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    DAY,\n    pool_name,\n    rewards,\n    total_liquidity_fees_rune,\n    asset_liquidity_fees,\n    rune_liquidity_fees,\n    earnings,\n    _unique_key,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.pool_block_fees\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_pool_block_fees\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a._unique_key as \n    varchar\n), '') as \n    varchar\n)) AS fact_pool_block_fees_id,\n  DAY,\n  pool_name,\n  rewards,\n  total_liquidity_fees_rune,\n  asset_liquidity_fees,\n  rune_liquidity_fees,\n  earnings,\n  A._inserted_timestamp,\n  'manual' AS _audit_run_id\nFROM\n  base A", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_pool_block_fees"}, "model.thorchain_models.core__fact_slash_points": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  unique_key = 'fact_slash_points_id',\n  incremental_strategy = 'merge',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    slash_points,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    {{ ref('silver__slash_points') }}\n\n{% if is_incremental() %}\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      {{ this }}\n  ) - INTERVAL '48 HOURS'\n{% endif %}\n)\nSELECT\n  {{ dbt_utils.surrogate_key(\n    ['a.event_id','a.node_address','a.slash_points']\n  ) }} AS fact_slash_points_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  slash_points,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  '{{ env_var(\"DBT_CLOUD_RUN_ID\", \"manual\") }}' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN {{ ref('core__dim_block') }}\n  b\n  ON A.block_timestamp = b.timestamp", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.thorchain_models.silver__slash_points", "model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "fact_slash_points_id", "on_schema_change": "ignore", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "merge", "post-hook": [], "pre-hook": []}, "database": "THORCHAIN_DEV", "schema": "core", "fqn": ["thorchain_models", "core", "core__fact_slash_points"], "unique_id": "model.thorchain_models.core__fact_slash_points", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "core/core__fact_slash_points.sql", "original_file_path": "models/core/core__fact_slash_points.sql", "name": "core__fact_slash_points", "alias": "fact_slash_points", "checksum": {"name": "sha256", "checksum": "94c19b712009965b62998be0580ba40194f76b9df76585bed0a3e4329fdd2c5a"}, "tags": [], "refs": [["silver__slash_points"], ["core__dim_block"]], "sources": [], "metrics": [], "description": "Fact table that shows set mimir events", "columns": {"FACT_SLASH_POINTS_ID": {"name": "FACT_SLASH_POINTS_ID", "description": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "Timestamp of block minting(without a timezone)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIM_BLOCK_ID": {"name": "DIM_BLOCK_ID", "description": "FK to DIM_BLOCK table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NODE_ADDRESS": {"name": "NODE_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SLASH_POINTS": {"name": "SLASH_POINTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "REASON": {"name": "REASON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "thorchain_models://models/core/core__fact_slash_points.yml", "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_points.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "unique_key": "fact_slash_points_id", "incremental_strategy": "merge", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1665513504.040489, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    node_address,\n    slash_points,\n    reason,\n    event_id,\n    block_timestamp,\n    _INSERTED_TIMESTAMP\n  FROM\n    THORCHAIN_DEV.silver.slash_points\n\n\nWHERE\n  _inserted_timestamp >= (\n    SELECT\n      MAX(\n        _inserted_timestamp\n      )\n    FROM\n      THORCHAIN_DEV.core.fact_slash_points\n  ) - INTERVAL '48 HOURS'\n\n)\nSELECT\n  md5(cast(coalesce(cast(a.event_id as \n    varchar\n), '') || '-' || coalesce(cast(a.node_address as \n    varchar\n), '') || '-' || coalesce(cast(a.slash_points as \n    varchar\n), '') as \n    varchar\n)) AS fact_slash_points_id,\n  b.block_timestamp,\n  COALESCE(\n    b.dim_block_id,\n    '-1'\n  ) AS dim_block_id,\n  node_address,\n  slash_points,\n  reason,\n  A._INSERTED_TIMESTAMP,\n  'manual' AS _audit_run_id\nFROM\n  base A\n  LEFT JOIN THORCHAIN_DEV.core.dim_block\n  b\n  ON A.block_timestamp = b.timestamp", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.core.fact_slash_points"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_events_FACT_POOL_EVENTS_ID.05fb28a742": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_346b932f327fd50d83c6a895e652f6c9\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_346b932f327fd50d83c6a895e652f6c9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_pool_events_FACT_POOL_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_events_FACT_POOL_EVENTS_ID.05fb28a742", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_346b932f327fd50d83c6a895e652f6c9.sql", "original_file_path": "models/core/core__fact_pool_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_pool_events_FACT_POOL_EVENTS_ID", "alias": "fact_pool_events_FACT_POOL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_events.yml/dbt_expectations_expect_column_346b932f327fd50d83c6a895e652f6c9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_346b932f327fd50d83c6a895e652f6c9"}, "created_at": 1665513503.3344588, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_POOL_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_pool_events_FACT_POOL_EVENTS_ID", "column_name": "FACT_POOL_EVENTS_ID", "file_key_name": "models.core__fact_pool_events"}, "test.thorchain_models.unique_core__fact_pool_events_FACT_POOL_EVENTS_ID.a1d33c7d0a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_pool_events_FACT_POOL_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_pool_events_FACT_POOL_EVENTS_ID.a1d33c7d0a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_pool_events_FACT_POOL_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_pool_events.yml", "name": "unique_core__fact_pool_events_FACT_POOL_EVENTS_ID", "alias": "fact_pool_events_FACT_POOL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_events.yml/unique_core__fact_pool_events_FACT_POOL_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.340584, "compiled_sql": "\n    \n    \n\nselect\n    FACT_POOL_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_pool_events\nwhere FACT_POOL_EVENTS_ID is not null\ngroup by FACT_POOL_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_pool_events_FACT_POOL_EVENTS_ID", "column_name": "FACT_POOL_EVENTS_ID", "file_key_name": "models.core__fact_pool_events"}, "test.thorchain_models.not_null_core__fact_pool_events_BLOCK_TIMESTAMP.05cfb58d49": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_pool_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_events_BLOCK_TIMESTAMP.05cfb58d49", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_pool_events.yml", "name": "not_null_core__fact_pool_events_BLOCK_TIMESTAMP", "alias": "fact_pool_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_events.yml/not_null_core__fact_pool_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.342209, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_pool_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_pool_events"}, "test.thorchain_models.negative_one_core__fact_pool_events_DIM_BLOCK_ID.229c8d7f20": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_pool_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_pool_events_DIM_BLOCK_ID.229c8d7f20", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_pool_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_pool_events.yml", "name": "negative_one_core__fact_pool_events_DIM_BLOCK_ID", "alias": "fact_pool_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_events.yml/negative_one_core__fact_pool_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.343403, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_pool_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_pool_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_pool_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_events_FACT_POOL_EVENTS_ID.13c1ea183b": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_649efc888c014b35b91d34ac337ede12\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_649efc888c014b35b91d34ac337ede12", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_pool_events_FACT_POOL_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_events_FACT_POOL_EVENTS_ID.13c1ea183b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_649efc888c014b35b91d34ac337ede12.sql", "original_file_path": "models/core/core__fact_pool_events.yml", "name": "dbt_constraints_primary_key_core__fact_pool_events_FACT_POOL_EVENTS_ID", "alias": "fact_pool_events_FACT_POOL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_events.yml/dbt_constraints_primary_key_co_649efc888c014b35b91d34ac337ede12.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_649efc888c014b35b91d34ac337ede12"}, "created_at": 1665513503.3460102, "compiled_sql": "with validation_errors as (\n    select\n        FACT_POOL_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_pool_events\n    group by FACT_POOL_EVENTS_ID\n    having count(*) > 1\n        or FACT_POOL_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_pool_events_FACT_POOL_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_pool_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0340867efb": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_92a712e61a5a8afa215fe4b3a6a733eb\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pool_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_92a712e61a5a8afa215fe4b3a6a733eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0340867efb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_92a712e61a5a8afa215fe4b3a6a733eb.sql", "original_file_path": "models/core/core__fact_pool_events.yml", "name": "dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_pool_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_pool_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_events.yml/dbt_constraints_foreign_key_co_92a712e61a5a8afa215fe4b3a6a733eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_92a712e61a5a8afa215fe4b3a6a733eb"}, "created_at": 1665513503.3521862, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_pool_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_pool_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_pool_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_refund_events_FACT_REFUND_EVENTS_ID.30b6902b47": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_10f3ad07cf2ed238b328f3eba5dde70b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_REFUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_refund_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_refund_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_10f3ad07cf2ed238b328f3eba5dde70b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_refund_events_FACT_REFUND_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_refund_events_FACT_REFUND_EVENTS_ID.30b6902b47", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_10f3ad07cf2ed238b328f3eba5dde70b.sql", "original_file_path": "models/core/core__fact_refund_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_refund_events_FACT_REFUND_EVENTS_ID", "alias": "fact_refund_events_FACT_REFUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_refund_events.yml/dbt_expectations_expect_column_10f3ad07cf2ed238b328f3eba5dde70b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_10f3ad07cf2ed238b328f3eba5dde70b"}, "created_at": 1665513503.362418, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_REFUND_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_refund_events_FACT_REFUND_EVENTS_ID", "column_name": "FACT_REFUND_EVENTS_ID", "file_key_name": "models.core__fact_refund_events"}, "test.thorchain_models.unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID.6f93d8d08e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_REFUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID.6f93d8d08e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_refund_events.yml", "name": "unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID", "alias": "fact_refund_events_FACT_REFUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_refund_events.yml/unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.364825, "compiled_sql": "\n    \n    \n\nselect\n    FACT_REFUND_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_refund_events\nwhere FACT_REFUND_EVENTS_ID is not null\ngroup by FACT_REFUND_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_refund_events_FACT_REFUND_EVENTS_ID", "column_name": "FACT_REFUND_EVENTS_ID", "file_key_name": "models.core__fact_refund_events"}, "test.thorchain_models.not_null_core__fact_refund_events_BLOCK_TIMESTAMP.8b9509ce39": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_refund_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_refund_events_BLOCK_TIMESTAMP.8b9509ce39", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_refund_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_refund_events.yml", "name": "not_null_core__fact_refund_events_BLOCK_TIMESTAMP", "alias": "fact_refund_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_refund_events.yml/not_null_core__fact_refund_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.365896, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_refund_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_refund_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_refund_events"}, "test.thorchain_models.negative_one_core__fact_refund_events_DIM_BLOCK_ID.4a28b5bc7c": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_refund_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_refund_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_refund_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_refund_events_DIM_BLOCK_ID.4a28b5bc7c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_refund_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_refund_events.yml", "name": "negative_one_core__fact_refund_events_DIM_BLOCK_ID", "alias": "fact_refund_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_refund_events.yml/negative_one_core__fact_refund_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.367021, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_refund_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_refund_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_refund_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_refund_events_FACT_REFUND_EVENTS_ID.81e4335507": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_d29a2a7dd8840f0eaf2712b88f07cf37\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_REFUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_refund_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_refund_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_d29a2a7dd8840f0eaf2712b88f07cf37", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_refund_events_FACT_REFUND_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_refund_events_FACT_REFUND_EVENTS_ID.81e4335507", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_d29a2a7dd8840f0eaf2712b88f07cf37.sql", "original_file_path": "models/core/core__fact_refund_events.yml", "name": "dbt_constraints_primary_key_core__fact_refund_events_FACT_REFUND_EVENTS_ID", "alias": "fact_refund_events_FACT_REFUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_refund_events.yml/dbt_constraints_primary_key_co_d29a2a7dd8840f0eaf2712b88f07cf37.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_d29a2a7dd8840f0eaf2712b88f07cf37"}, "created_at": 1665513503.368973, "compiled_sql": "with validation_errors as (\n    select\n        FACT_REFUND_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_refund_events\n    group by FACT_REFUND_EVENTS_ID\n    having count(*) > 1\n        or FACT_REFUND_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_refund_events_FACT_REFUND_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_refund_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0233f89047": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_2cb00cfe49f1968c0e2487fd05ca5494\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_refund_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_refund_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_2cb00cfe49f1968c0e2487fd05ca5494", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0233f89047", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_2cb00cfe49f1968c0e2487fd05ca5494.sql", "original_file_path": "models/core/core__fact_refund_events.yml", "name": "dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_refund_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_refund_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_refund_events.yml/dbt_constraints_foreign_key_co_2cb00cfe49f1968c0e2487fd05ca5494.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_2cb00cfe49f1968c0e2487fd05ca5494"}, "created_at": 1665513503.371113, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_refund_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_refund_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_refund_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.762237682c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_924bf1f785d20e97272cb5bc0a0fe319\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_inactive_vault_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_inactive_vault_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_924bf1f785d20e97272cb5bc0a0fe319", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.762237682c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_924bf1f785d20e97272cb5bc0a0fe319.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "alias": "fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.yml/dbt_expectations_expect_column_924bf1f785d20e97272cb5bc0a0fe319.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_924bf1f785d20e97272cb5bc0a0fe319"}, "created_at": 1665513503.37503, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_INACTIVE_VAULT_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.core__fact_inactive_vault_events"}, "test.thorchain_models.unique_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.20dbc5312c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_inactive_vau_82a777bca79f0b6909c5dcf1dcafc7da\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_inactive_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_inactive_vault_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_inactive_vau_82a777bca79f0b6909c5dcf1dcafc7da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.20dbc5312c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_inactive_vau_82a777bca79f0b6909c5dcf1dcafc7da.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.yml", "name": "unique_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "alias": "fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.yml/unique_core__fact_inactive_vau_82a777bca79f0b6909c5dcf1dcafc7da.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_inactive_vau_82a777bca79f0b6909c5dcf1dcafc7da"}, "created_at": 1665513503.3772118, "compiled_sql": "\n    \n    \n\nselect\n    FACT_INACTIVE_VAULT_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_inactive_vault_events\nwhere FACT_INACTIVE_VAULT_EVENTS_ID is not null\ngroup by FACT_INACTIVE_VAULT_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.core__fact_inactive_vault_events"}, "test.thorchain_models.not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP.2da1a512b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_inactive_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_inactive_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP.2da1a512b0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.yml", "name": "not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP", "alias": "fact_inactive_vault_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.yml/not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.3782039, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_inactive_vault_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_inactive_vault_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_inactive_vault_events"}, "test.thorchain_models.negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID.83076c6521": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_inactive_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_inactive_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID.83076c6521", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.yml", "name": "negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID", "alias": "fact_inactive_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.yml/negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.3792908, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_inactive_vault_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_inactive_vault_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_inactive_vault_events"}, "test.thorchain_models.not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.6ee8b1c1ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASGARD_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_inactive_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_inactive_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.6ee8b1c1ac", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.yml", "name": "not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS", "alias": "fact_inactive_vault_events_ADD_ASGARD_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.yml/not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.381084, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_inactive_vault_events\nwhere ADD_ASGARD_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_inactive_vault_events_ADD_ASGARD_ADDRESS", "column_name": "ADD_ASGARD_ADDRESS", "file_key_name": "models.core__fact_inactive_vault_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.a765dbbadc": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_121497e0a601eab5e453d8a661a5cde9\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_INACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_inactive_vault_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_inactive_vault_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_121497e0a601eab5e453d8a661a5cde9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.a765dbbadc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_121497e0a601eab5e453d8a661a5cde9.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.yml", "name": "dbt_constraints_primary_key_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "alias": "fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.yml/dbt_constraints_primary_key_co_121497e0a601eab5e453d8a661a5cde9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_121497e0a601eab5e453d8a661a5cde9"}, "created_at": 1665513503.382004, "compiled_sql": "with validation_errors as (\n    select\n        FACT_INACTIVE_VAULT_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_inactive_vault_events\n    group by FACT_INACTIVE_VAULT_EVENTS_ID\n    having count(*) > 1\n        or FACT_INACTIVE_VAULT_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_inactive_vault_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fde1b47635": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_e43da57a1ea2b1ec0b62981e4e945c32\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_inactive_vault_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_inactive_vault_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_e43da57a1ea2b1ec0b62981e4e945c32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fde1b47635", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_e43da57a1ea2b1ec0b62981e4e945c32.sql", "original_file_path": "models/core/core__fact_inactive_vault_events.yml", "name": "dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_inactive_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_inactive_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_inactive_vault_events.yml/dbt_constraints_foreign_key_co_e43da57a1ea2b1ec0b62981e4e945c32.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_e43da57a1ea2b1ec0b62981e4e945c32"}, "created_at": 1665513503.383918, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_inactive_vault_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_inactive_vault_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_inactive_vault_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.2996130685": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_37f23380935882e18a1cd82c9f3f75cb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_VERSION_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_version_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_version_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_37f23380935882e18a1cd82c9f3f75cb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.2996130685", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_37f23380935882e18a1cd82c9f3f75cb.sql", "original_file_path": "models/core/core__fact_set_version_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "alias": "fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_version_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_version_events.yml/dbt_expectations_expect_column_37f23380935882e18a1cd82c9f3f75cb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_37f23380935882e18a1cd82c9f3f75cb"}, "created_at": 1665513503.3879528, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SET_VERSION_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "column_name": "FACT_SET_VERSION_EVENTS_ID", "file_key_name": "models.core__fact_set_version_events"}, "test.thorchain_models.unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.ba09f86108": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_VERSION_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_version_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_version_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.ba09f86108", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_set_version_events.yml", "name": "unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "alias": "fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_version_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_version_events.yml/unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.389786, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SET_VERSION_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_set_version_events\nwhere FACT_SET_VERSION_EVENTS_ID is not null\ngroup by FACT_SET_VERSION_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "column_name": "FACT_SET_VERSION_EVENTS_ID", "file_key_name": "models.core__fact_set_version_events"}, "test.thorchain_models.not_null_core__fact_set_version_events_BLOCK_TIMESTAMP.8e51f47ffb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_set_version_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_version_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_set_version_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_set_version_events_BLOCK_TIMESTAMP.8e51f47ffb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_set_version_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_set_version_events.yml", "name": "not_null_core__fact_set_version_events_BLOCK_TIMESTAMP", "alias": "fact_set_version_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_version_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_version_events.yml/not_null_core__fact_set_version_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.390854, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_set_version_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_set_version_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_set_version_events"}, "test.thorchain_models.negative_one_core__fact_set_version_events_DIM_BLOCK_ID.52ed0c5ef6": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_version_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_version_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_set_version_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_set_version_events_DIM_BLOCK_ID.52ed0c5ef6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_set_version_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_set_version_events.yml", "name": "negative_one_core__fact_set_version_events_DIM_BLOCK_ID", "alias": "fact_set_version_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_version_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_version_events.yml/negative_one_core__fact_set_version_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.391809, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_set_version_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_set_version_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_set_version_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.4cc0e57996": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_955303b186b437c495b748f6ff78591e\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_VERSION_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_version_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_version_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_955303b186b437c495b748f6ff78591e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.4cc0e57996", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_955303b186b437c495b748f6ff78591e.sql", "original_file_path": "models/core/core__fact_set_version_events.yml", "name": "dbt_constraints_primary_key_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "alias": "fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_version_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_version_events.yml/dbt_constraints_primary_key_co_955303b186b437c495b748f6ff78591e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_955303b186b437c495b748f6ff78591e"}, "created_at": 1665513503.393682, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SET_VERSION_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_set_version_events\n    group by FACT_SET_VERSION_EVENTS_ID\n    having count(*) > 1\n        or FACT_SET_VERSION_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_set_version_events_FACT_SET_VERSION_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_set_version_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4f6df8b36a": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_eb1cde3e2fc870d8ddc1255c5ada9d0c\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_version_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_version_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_eb1cde3e2fc870d8ddc1255c5ada9d0c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4f6df8b36a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_eb1cde3e2fc870d8ddc1255c5ada9d0c.sql", "original_file_path": "models/core/core__fact_set_version_events.yml", "name": "dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_set_version_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_set_version_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_version_events.yml/dbt_constraints_foreign_key_co_eb1cde3e2fc870d8ddc1255c5ada9d0c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_eb1cde3e2fc870d8ddc1255c5ada9d0c"}, "created_at": 1665513503.396023, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_set_version_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_set_version_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_set_version_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID", "alias": "dim_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_309d406d76df03445d3583ba220c4a82"}, "created_at": 1665513503.401831, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DIM_BLOCK_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.dim_block_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__dim_block_BLOCK_ID"], "unique_id": "test.thorchain_models.not_null_core__dim_block_BLOCK_ID.4093a445bc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__dim_block_BLOCK_ID.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_ID", "alias": "dim_block_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.403983, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.dim_block_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__dim_block_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__dim_block_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_TIMESTAMP", "alias": "dim_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.4049861, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.dim_block_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1", "alias": "dim_block_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_6c239171eef91186fe7212448c07c99b"}, "created_at": 1665513503.405951, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.core.dim_block\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.dim_block_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_DATE", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__dim_block_BLOCK_DATE"], "unique_id": "test.thorchain_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__dim_block_BLOCK_DATE.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_DATE", "alias": "dim_block_BLOCK_DATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_DATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.416835, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_DATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.dim_block_BLOCK_DATE", "column_name": "BLOCK_DATE", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HOUR", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__dim_block_BLOCK_HOUR"], "unique_id": "test.thorchain_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__dim_block_BLOCK_HOUR.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_HOUR", "alias": "dim_block_BLOCK_HOUR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_HOUR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.4178271, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_HOUR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.dim_block_BLOCK_HOUR", "column_name": "BLOCK_HOUR", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_WEEK", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__dim_block_BLOCK_WEEK"], "unique_id": "test.thorchain_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__dim_block_BLOCK_WEEK.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_BLOCK_WEEK", "alias": "dim_block_BLOCK_WEEK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/not_null_core__dim_block_BLOCK_WEEK.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.4187908, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_WEEK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.dim_block_BLOCK_WEEK", "column_name": "BLOCK_WEEK", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TIMESTAMP", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__dim_block_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__dim_block_TIMESTAMP.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_TIMESTAMP", "alias": "dim_block_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/not_null_core__dim_block_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.4198809, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.dim_block_TIMESTAMP", "column_name": "TIMESTAMP", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.not_null_core__dim_block_HASH.b08299a937": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HASH", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__dim_block_HASH"], "unique_id": "test.thorchain_models.not_null_core__dim_block_HASH.b08299a937", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__dim_block_HASH.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "not_null_core__dim_block_HASH", "alias": "dim_block_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/not_null_core__dim_block_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.42082, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.dim_block where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.dim_block_HASH", "column_name": "HASH", "file_key_name": "models.core__dim_block"}, "test.thorchain_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__dim_block')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__dim_block.yml", "name": "dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID", "alias": "dim_block_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__dim_block.yml/dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.4216142, "compiled_sql": "with validation_errors as (\n    select\n        DIM_BLOCK_ID, count(*)\n    from THORCHAIN_DEV.core.dim_block\n    group by DIM_BLOCK_ID\n    having count(*) > 1\n        or DIM_BLOCK_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.dim_block_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__dim_block"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID", "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_swaps.yml/dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_772580aa53b8cabe1100cddb87c3c1d2"}, "created_at": 1665513503.4277902, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SWAPS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_swaps_FACT_SWAPS_ID", "column_name": "FACT_SWAPS_ID", "file_key_name": "models.core__fact_swaps"}, "test.thorchain_models.unique_core__fact_swaps_FACT_SWAPS_ID.7963ad36b2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_swaps_FACT_SWAPS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_swaps_FACT_SWAPS_ID.7963ad36b2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_swaps_FACT_SWAPS_ID.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "unique_core__fact_swaps_FACT_SWAPS_ID", "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_swaps.yml/unique_core__fact_swaps_FACT_SWAPS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.4298592, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SWAPS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_swaps\nwhere FACT_SWAPS_ID is not null\ngroup by FACT_SWAPS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_swaps_FACT_SWAPS_ID", "column_name": "FACT_SWAPS_ID", "file_key_name": "models.core__fact_swaps"}, "test.thorchain_models.not_null_core__fact_swaps_BLOCK_TIMESTAMP.1623c6eef8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_swaps_BLOCK_TIMESTAMP.1623c6eef8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "not_null_core__fact_swaps_BLOCK_TIMESTAMP", "alias": "fact_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_swaps.yml/not_null_core__fact_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.431081, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_swaps where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_swaps"}, "test.thorchain_models.negative_one_core__fact_swaps_DIM_BLOCK_ID.396aa69d74": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_swaps_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_swaps_DIM_BLOCK_ID.396aa69d74", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_swaps_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "negative_one_core__fact_swaps_DIM_BLOCK_ID", "alias": "fact_swaps_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_swaps.yml/negative_one_core__fact_swaps_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.4321349, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_swaps where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_swaps_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_swaps"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID.a2d4e0d78c": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SWAPS_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID.a2d4e0d78c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID", "alias": "fact_swaps_FACT_SWAPS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_swaps.yml/dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.434196, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SWAPS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_swaps\n    group by FACT_SWAPS_ID\n    having count(*) > 1\n        or FACT_SWAPS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_swaps_FACT_SWAPS_ID", "column_name": null, "file_key_name": "models.core__fact_swaps"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9c0cfcb6fa": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_21aa6b5e93c044f44d423c00207bcc89\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_swaps')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_swaps"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_21aa6b5e93c044f44d423c00207bcc89", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9c0cfcb6fa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_21aa6b5e93c044f44d423c00207bcc89.sql", "original_file_path": "models/core/core__fact_swaps.yml", "name": "dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_swaps_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_swaps.yml/dbt_constraints_foreign_key_co_21aa6b5e93c044f44d423c00207bcc89.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_21aa6b5e93c044f44d423c00207bcc89"}, "created_at": 1665513503.436161, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_swaps\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_swaps_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_swaps"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ec777b98b4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c7b03b1203921b14c039498e411f2828\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_statistics')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_statistics"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c7b03b1203921b14c039498e411f2828", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ec777b98b4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_c7b03b1203921b14c039498e411f2828.sql", "original_file_path": "models/core/core__fact_pool_block_statistics.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "alias": "fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_statistics.yml/dbt_expectations_expect_column_c7b03b1203921b14c039498e411f2828.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c7b03b1203921b14c039498e411f2828"}, "created_at": 1665513503.4445398, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_POOL_BLOCK_STATISTICS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "file_key_name": "models.core__fact_pool_block_statistics"}, "test.thorchain_models.unique_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.b28d264159": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_pool_block_s_c1586d2922e759df95b1ddb5ed62e450\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_statistics')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_statistics"]}, "config": {"enabled": true, "alias": "unique_core__fact_pool_block_s_c1586d2922e759df95b1ddb5ed62e450", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.b28d264159", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_pool_block_s_c1586d2922e759df95b1ddb5ed62e450.sql", "original_file_path": "models/core/core__fact_pool_block_statistics.yml", "name": "unique_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "alias": "fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_statistics.yml/unique_core__fact_pool_block_s_c1586d2922e759df95b1ddb5ed62e450.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_pool_block_s_c1586d2922e759df95b1ddb5ed62e450"}, "created_at": 1665513503.446462, "compiled_sql": "\n    \n    \n\nselect\n    FACT_POOL_BLOCK_STATISTICS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_pool_block_statistics\nwhere FACT_POOL_BLOCK_STATISTICS_ID is not null\ngroup by FACT_POOL_BLOCK_STATISTICS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "file_key_name": "models.core__fact_pool_block_statistics"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.8b6f112393": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_2daeed70d904c7eeb7a983d309710259\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BLOCK_STATISTICS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_statistics')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_statistics"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_2daeed70d904c7eeb7a983d309710259", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.8b6f112393", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_2daeed70d904c7eeb7a983d309710259.sql", "original_file_path": "models/core/core__fact_pool_block_statistics.yml", "name": "dbt_constraints_primary_key_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "alias": "fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_statistics"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_statistics.yml/dbt_constraints_primary_key_co_2daeed70d904c7eeb7a983d309710259.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_2daeed70d904c7eeb7a983d309710259"}, "created_at": 1665513503.4473789, "compiled_sql": "with validation_errors as (\n    select\n        FACT_POOL_BLOCK_STATISTICS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_pool_block_statistics\n    group by FACT_POOL_BLOCK_STATISTICS_ID\n    having count(*) > 1\n        or FACT_POOL_BLOCK_STATISTICS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID", "column_name": null, "file_key_name": "models.core__fact_pool_block_statistics"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.bbca05111b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0f329cd1bd385db0431e246aee446ed5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_BOND_ACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f329cd1bd385db0431e246aee446ed5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_bond_actions_FACT_BOND_ACTIONS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.bbca05111b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_0f329cd1bd385db0431e246aee446ed5.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_bond_actions_FACT_BOND_ACTIONS_ID", "alias": "fact_bond_actions_FACT_BOND_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/dbt_expectations_expect_column_0f329cd1bd385db0431e246aee446ed5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0f329cd1bd385db0431e246aee446ed5"}, "created_at": 1665513503.451616, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_BOND_ACTIONS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_bond_actions_FACT_BOND_ACTIONS_ID", "column_name": "FACT_BOND_ACTIONS_ID", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.8735e54613": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_BOND_ACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.8735e54613", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID", "alias": "fact_bond_actions_FACT_BOND_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.4542341, "compiled_sql": "\n    \n    \n\nselect\n    FACT_BOND_ACTIONS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere FACT_BOND_ACTIONS_ID is not null\ngroup by FACT_BOND_ACTIONS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_bond_actions_FACT_BOND_ACTIONS_ID", "column_name": "FACT_BOND_ACTIONS_ID", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_BLOCK_TIMESTAMP.e429436031": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_BLOCK_TIMESTAMP.e429436031", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_BLOCK_TIMESTAMP", "alias": "fact_bond_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.455489, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_bond_actions where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_actions_BLOCK_TIMESTAMP__day__4.6de8191c45": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_824cf8ac18d30653745515e8ab1229aa\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 4, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_824cf8ac18d30653745515e8ab1229aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_actions_BLOCK_TIMESTAMP__day__4"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_actions_BLOCK_TIMESTAMP__day__4.6de8191c45", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_824cf8ac18d30653745515e8ab1229aa.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_actions_BLOCK_TIMESTAMP__day__4", "alias": "fact_bond_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/dbt_expectations_expect_row_va_824cf8ac18d30653745515e8ab1229aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_824cf8ac18d30653745515e8ab1229aa"}, "created_at": 1665513503.456531, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.core.fact_bond_actions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -4,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_bond_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.negative_one_core__fact_bond_actions_DIM_BLOCK_ID.62a90a6040": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_bond_actions_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_bond_actions_DIM_BLOCK_ID.62a90a6040", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_bond_actions_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "negative_one_core__fact_bond_actions_DIM_BLOCK_ID", "alias": "fact_bond_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/negative_one_core__fact_bond_actions_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.4597278, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_bond_actions where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_bond_actions_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_TX_ID.479e4a030a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_TX_ID"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_TX_ID.479e4a030a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_TX_ID.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_TX_ID", "alias": "fact_bond_actions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.4615119, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_BLOCKCHAIN.173b70dd6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_BLOCKCHAIN.173b70dd6d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_BLOCKCHAIN.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_BLOCKCHAIN", "alias": "fact_bond_actions_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.4625459, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_FROM_ADDRESS.f83dcb3484": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_FROM_ADDRESS.f83dcb3484", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_FROM_ADDRESS.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_FROM_ADDRESS", "alias": "fact_bond_actions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.463361, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_TO_ADDRESS.609662b36d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_TO_ADDRESS.609662b36d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_TO_ADDRESS.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_TO_ADDRESS", "alias": "fact_bond_actions_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.4641652, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_bond_type.df2a3b5b16": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bond_type", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_bond_type"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_bond_type.df2a3b5b16", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_bond_type.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_bond_type", "alias": "fact_bond_actions_bond_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_bond_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.465167, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere bond_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_bond_type", "column_name": "bond_type", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_AMOUNT.1b3ee2f2e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_ASSET_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_AMOUNT.1b3ee2f2e2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_ASSET_AMOUNT.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_ASSET_AMOUNT", "alias": "fact_bond_actions_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_ASSET_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.466004, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere ASSET_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_ASSET_AMOUNT", "column_name": "ASSET_AMOUNT", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_USD.698118cb1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_USD", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_actions_ASSET_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_USD.698118cb1c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_actions_ASSET_USD.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "not_null_core__fact_bond_actions_ASSET_USD", "alias": "fact_bond_actions_ASSET_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/not_null_core__fact_bond_actions_ASSET_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.466815, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_actions\nwhere ASSET_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_actions_ASSET_USD", "column_name": "ASSET_USD", "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.f8b3537e11": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_62b178186d74182f8aae68f1e53d729b\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_BOND_ACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_62b178186d74182f8aae68f1e53d729b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_bond_actions_FACT_BOND_ACTIONS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.f8b3537e11", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_62b178186d74182f8aae68f1e53d729b.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "dbt_constraints_primary_key_core__fact_bond_actions_FACT_BOND_ACTIONS_ID", "alias": "fact_bond_actions_FACT_BOND_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/dbt_constraints_primary_key_co_62b178186d74182f8aae68f1e53d729b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_62b178186d74182f8aae68f1e53d729b"}, "created_at": 1665513503.4676359, "compiled_sql": "with validation_errors as (\n    select\n        FACT_BOND_ACTIONS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_bond_actions\n    group by FACT_BOND_ACTIONS_ID\n    having count(*) > 1\n        or FACT_BOND_ACTIONS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_bond_actions_FACT_BOND_ACTIONS_ID", "column_name": null, "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.01d3250232": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_b2a04d0045bcb6b94c53339950854f35\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_actions')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_bond_actions"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_b2a04d0045bcb6b94c53339950854f35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.01d3250232", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_b2a04d0045bcb6b94c53339950854f35.sql", "original_file_path": "models/core/core__fact_bond_actions.yml", "name": "dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_bond_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_bond_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_actions.yml/dbt_constraints_foreign_key_co_b2a04d0045bcb6b94c53339950854f35.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_b2a04d0045bcb6b94c53339950854f35"}, "created_at": 1665513503.470021, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_bond_actions\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_bond_actions_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_bond_actions"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.299741a909": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_53ac0105279a67b827ce69d45e2c6e36\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SWITCH_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_switch_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_switch_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_53ac0105279a67b827ce69d45e2c6e36", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_switch_events_FACT_SWITCH_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.299741a909", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_53ac0105279a67b827ce69d45e2c6e36.sql", "original_file_path": "models/core/core__fact_switch_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_switch_events_FACT_SWITCH_EVENTS_ID", "alias": "fact_switch_events_FACT_SWITCH_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_switch_events.yml/dbt_expectations_expect_column_53ac0105279a67b827ce69d45e2c6e36.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_53ac0105279a67b827ce69d45e2c6e36"}, "created_at": 1665513503.4751098, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SWITCH_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_switch_events_FACT_SWITCH_EVENTS_ID", "column_name": "FACT_SWITCH_EVENTS_ID", "file_key_name": "models.core__fact_switch_events"}, "test.thorchain_models.unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.93082c83ed": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SWITCH_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.93082c83ed", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_switch_events.yml", "name": "unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID", "alias": "fact_switch_events_FACT_SWITCH_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_switch_events.yml/unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.4771671, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SWITCH_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_switch_events\nwhere FACT_SWITCH_EVENTS_ID is not null\ngroup by FACT_SWITCH_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_switch_events_FACT_SWITCH_EVENTS_ID", "column_name": "FACT_SWITCH_EVENTS_ID", "file_key_name": "models.core__fact_switch_events"}, "test.thorchain_models.not_null_core__fact_switch_events_BLOCK_TIMESTAMP.0437ab72e5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_switch_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_switch_events_BLOCK_TIMESTAMP.0437ab72e5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_switch_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_switch_events.yml", "name": "not_null_core__fact_switch_events_BLOCK_TIMESTAMP", "alias": "fact_switch_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_switch_events.yml/not_null_core__fact_switch_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.478666, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_switch_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_switch_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_switch_events"}, "test.thorchain_models.negative_one_core__fact_switch_events_DIM_BLOCK_ID.960a6c0dea": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '24 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_switch_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_switch_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '24 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_switch_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_switch_events_DIM_BLOCK_ID.960a6c0dea", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_switch_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_switch_events.yml", "name": "negative_one_core__fact_switch_events_DIM_BLOCK_ID", "alias": "fact_switch_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_switch_events.yml/negative_one_core__fact_switch_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '24 HOURS')"}, "created_at": 1665513503.479753, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_switch_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '24 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_switch_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_switch_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.3cd83ce9a7": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_7574e42399e85df45dfdb77115467f82\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SWITCH_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_switch_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_switch_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_7574e42399e85df45dfdb77115467f82", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_switch_events_FACT_SWITCH_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.3cd83ce9a7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_7574e42399e85df45dfdb77115467f82.sql", "original_file_path": "models/core/core__fact_switch_events.yml", "name": "dbt_constraints_primary_key_core__fact_switch_events_FACT_SWITCH_EVENTS_ID", "alias": "fact_switch_events_FACT_SWITCH_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_switch_events.yml/dbt_constraints_primary_key_co_7574e42399e85df45dfdb77115467f82.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_7574e42399e85df45dfdb77115467f82"}, "created_at": 1665513503.4818602, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SWITCH_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_switch_events\n    group by FACT_SWITCH_EVENTS_ID\n    having count(*) > 1\n        or FACT_SWITCH_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_switch_events_FACT_SWITCH_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_switch_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.48c70568b9": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_74c70229379d15fbf7491b99ee8090ee\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_switch_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_switch_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_74c70229379d15fbf7491b99ee8090ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.48c70568b9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_74c70229379d15fbf7491b99ee8090ee.sql", "original_file_path": "models/core/core__fact_switch_events.yml", "name": "dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_switch_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_switch_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_switch_events.yml/dbt_constraints_foreign_key_co_74c70229379d15fbf7491b99ee8090ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_74c70229379d15fbf7491b99ee8090ee"}, "created_at": 1665513503.4843829, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_switch_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_switch_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_switch_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a226b8835b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ffc85006952385156ed009d158ba4b3d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ffc85006952385156ed009d158ba4b3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a226b8835b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_ffc85006952385156ed009d158ba4b3d.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "alias": "fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/dbt_expectations_expect_column_ffc85006952385156ed009d158ba4b3d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ffc85006952385156ed009d158ba4b3d"}, "created_at": 1665513503.488514, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.unique_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a9bbb3dffc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_validator_re_f41310871e72a11078117a6c88b77873\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_validator_re_f41310871e72a11078117a6c88b77873", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a9bbb3dffc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_validator_re_f41310871e72a11078117a6c88b77873.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "unique_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "alias": "fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/unique_core__fact_validator_re_f41310871e72a11078117a6c88b77873.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_validator_re_f41310871e72a11078117a6c88b77873"}, "created_at": 1665513503.490526, "compiled_sql": "\n    \n    \n\nselect\n    FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_validator_request_leave_events\nwhere FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID is not null\ngroup by FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.not_null_core__fact_validator_request_leave_events_BLOCK_TIMESTAMP.b70f758672": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\",alias=\"not_null_core__fact_validator__a179e21092dcfbcd9f98c51bee8dee78\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": "not_null_core__fact_validator__a179e21092dcfbcd9f98c51bee8dee78", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_validator_request_leave_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_validator_request_leave_events_BLOCK_TIMESTAMP.b70f758672", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_validator__a179e21092dcfbcd9f98c51bee8dee78.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "not_null_core__fact_validator_request_leave_events_BLOCK_TIMESTAMP", "alias": "fact_validator_request_leave_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/not_null_core__fact_validator__a179e21092dcfbcd9f98c51bee8dee78.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_core__fact_validator__a179e21092dcfbcd9f98c51bee8dee78", "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.49174, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_validator_request_leave_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_validator_request_leave_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.negative_one_core__fact_validator_request_leave_events_DIM_BLOCK_ID.1c5ec06d3b": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_core__fact_valida_e776e921be178a78943cc704bff82160\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": "negative_one_core__fact_valida_e776e921be178a78943cc704bff82160", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_validator_request_leave_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_validator_request_leave_events_DIM_BLOCK_ID.1c5ec06d3b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_valida_e776e921be178a78943cc704bff82160.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "negative_one_core__fact_validator_request_leave_events_DIM_BLOCK_ID", "alias": "fact_validator_request_leave_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/negative_one_core__fact_valida_e776e921be178a78943cc704bff82160.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_core__fact_valida_e776e921be178a78943cc704bff82160"}, "created_at": 1665513503.4928262, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_validator_request_leave_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_validator_request_leave_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.not_null_core__fact_validator_request_leave_events_TX_ID.ee988a79e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_validator_request_leave_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_core__fact_validator_request_leave_events_TX_ID.ee988a79e0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_validator_request_leave_events_TX_ID.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "not_null_core__fact_validator_request_leave_events_TX_ID", "alias": "fact_validator_request_leave_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/not_null_core__fact_validator_request_leave_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.494959, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_validator_request_leave_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_validator_request_leave_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.not_null_core__fact_validator_request_leave_events_FROM_ADDRESS.51d60a71ad": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_validator_request_leave_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_validator_request_leave_events_FROM_ADDRESS.51d60a71ad", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_validator_request_leave_events_FROM_ADDRESS.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "not_null_core__fact_validator_request_leave_events_FROM_ADDRESS", "alias": "fact_validator_request_leave_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/not_null_core__fact_validator_request_leave_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.495768, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_validator_request_leave_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_validator_request_leave_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.not_null_core__fact_validator_request_leave_events_NODE_ADDRESS.62d399b92d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_validator_request_leave_events_NODE_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_validator_request_leave_events_NODE_ADDRESS.62d399b92d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_validator_request_leave_events_NODE_ADDRESS.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "not_null_core__fact_validator_request_leave_events_NODE_ADDRESS", "alias": "fact_validator_request_leave_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/not_null_core__fact_validator_request_leave_events_NODE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.496935, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_validator_request_leave_events\nwhere NODE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_validator_request_leave_events_NODE_ADDRESS", "column_name": "NODE_ADDRESS", "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.f069e268df": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_12f593d1b72a26c6fa35915a3a1362ae\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_12f593d1b72a26c6fa35915a3a1362ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.f069e268df", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_12f593d1b72a26c6fa35915a3a1362ae.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "dbt_constraints_primary_key_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "alias": "fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/dbt_constraints_primary_key_co_12f593d1b72a26c6fa35915a3a1362ae.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_12f593d1b72a26c6fa35915a3a1362ae"}, "created_at": 1665513503.497747, "compiled_sql": "with validation_errors as (\n    select\n        FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_validator_request_leave_events\n    group by FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID\n    having count(*) > 1\n        or FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5f659e000c": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_f4df83fa2c4aa2c5a44fb12002cfdc03\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_validator_request_leave_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_validator_request_leave_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_f4df83fa2c4aa2c5a44fb12002cfdc03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5f659e000c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_f4df83fa2c4aa2c5a44fb12002cfdc03.sql", "original_file_path": "models/core/core__fact_validator_request_leave_events.yml", "name": "dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_validator_request_leave_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_validator_request_leave_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_validator_request_leave_events.yml/dbt_constraints_foreign_key_co_f4df83fa2c4aa2c5a44fb12002cfdc03.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_f4df83fa2c4aa2c5a44fb12002cfdc03"}, "created_at": 1665513503.4998221, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_validator_request_leave_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_validator_request_leave_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_validator_request_leave_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.76e23118ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2c8059384a119cb1c3d4d911a6ddafa6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2c8059384a119cb1c3d4d911a6ddafa6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.76e23118ec", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_2c8059384a119cb1c3d4d911a6ddafa6.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID", "alias": "fact_block_rewards_FACT_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/dbt_expectations_expect_column_2c8059384a119cb1c3d4d911a6ddafa6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2c8059384a119cb1c3d4d911a6ddafa6"}, "created_at": 1665513503.504062, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_BLOCK_REWARDS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_block_rewards_FACT_BLOCK_REWARDS_ID", "column_name": "FACT_BLOCK_REWARDS_ID", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.38bd20da50": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.38bd20da50", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID", "alias": "fact_block_rewards_FACT_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.5062, "compiled_sql": "\n    \n    \n\nselect\n    FACT_BLOCK_REWARDS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere FACT_BLOCK_REWARDS_ID is not null\ngroup by FACT_BLOCK_REWARDS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_block_rewards_FACT_BLOCK_REWARDS_ID", "column_name": "FACT_BLOCK_REWARDS_ID", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.not_null_core__fact_block_rewards_DAY.f3adaa7c0d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_rewards_DAY"], "unique_id": "test.thorchain_models.not_null_core__fact_block_rewards_DAY.f3adaa7c0d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_rewards_DAY.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "not_null_core__fact_block_rewards_DAY", "alias": "fact_block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/not_null_core__fact_block_rewards_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.507008, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_rewards_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.unique_core__fact_block_rewards_DAY.0ccd5bbf19": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_block_rewards_DAY"], "unique_id": "test.thorchain_models.unique_core__fact_block_rewards_DAY.0ccd5bbf19", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_block_rewards_DAY.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "unique_core__fact_block_rewards_DAY", "alias": "fact_block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/unique_core__fact_block_rewards_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.5077848, "compiled_sql": "\n    \n    \n\nselect\n    DAY as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere DAY is not null\ngroup by DAY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_block_rewards_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_rewards_DAY__day__1.17002b354c": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_264f6a574adc32bea4f8f4bc773307f8\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_264f6a574adc32bea4f8f4bc773307f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_rewards_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_rewards_DAY__day__1.17002b354c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_264f6a574adc32bea4f8f4bc773307f8.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_rewards_DAY__day__1", "alias": "fact_block_rewards_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/dbt_expectations_expect_row_va_264f6a574adc32bea4f8f4bc773307f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_264f6a574adc32bea4f8f4bc773307f8"}, "created_at": 1665513503.508708, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.core.fact_block_rewards\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_block_rewards_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_FEE.98923b7b52": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEE", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_rewards_LIQUIDITY_FEE"], "unique_id": "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_FEE.98923b7b52", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_rewards_LIQUIDITY_FEE.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "not_null_core__fact_block_rewards_LIQUIDITY_FEE", "alias": "fact_block_rewards_LIQUIDITY_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/not_null_core__fact_block_rewards_LIQUIDITY_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.511639, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere LIQUIDITY_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_rewards_LIQUIDITY_FEE", "column_name": "LIQUIDITY_FEE", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.not_null_core__fact_block_rewards_BLOCK_REWARDS.5895cca37e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_rewards_BLOCK_REWARDS"], "unique_id": "test.thorchain_models.not_null_core__fact_block_rewards_BLOCK_REWARDS.5895cca37e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_rewards_BLOCK_REWARDS.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "not_null_core__fact_block_rewards_BLOCK_REWARDS", "alias": "fact_block_rewards_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/not_null_core__fact_block_rewards_BLOCK_REWARDS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.5124412, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere BLOCK_REWARDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_rewards_BLOCK_REWARDS", "column_name": "BLOCK_REWARDS", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.not_null_core__fact_block_rewards_EARNINGS.af56926f59": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_rewards_EARNINGS"], "unique_id": "test.thorchain_models.not_null_core__fact_block_rewards_EARNINGS.af56926f59", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_rewards_EARNINGS.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "not_null_core__fact_block_rewards_EARNINGS", "alias": "fact_block_rewards_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/not_null_core__fact_block_rewards_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.51321, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_rewards_EARNINGS", "column_name": "EARNINGS", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.not_null_core__fact_block_rewards_BONDING_EARNINGS.6b00d9f87b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BONDING_EARNINGS", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_rewards_BONDING_EARNINGS"], "unique_id": "test.thorchain_models.not_null_core__fact_block_rewards_BONDING_EARNINGS.6b00d9f87b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_rewards_BONDING_EARNINGS.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "not_null_core__fact_block_rewards_BONDING_EARNINGS", "alias": "fact_block_rewards_BONDING_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/not_null_core__fact_block_rewards_BONDING_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.514107, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere BONDING_EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_rewards_BONDING_EARNINGS", "column_name": "BONDING_EARNINGS", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS.470f463bc6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_EARNINGS", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS"], "unique_id": "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS.470f463bc6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS", "alias": "fact_block_rewards_LIQUIDITY_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.514893, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_rewards\nwhere LIQUIDITY_EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_rewards_LIQUIDITY_EARNINGS", "column_name": "LIQUIDITY_EARNINGS", "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.e333e2b210": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_12be2d7125ecd54bceb0ffc5da84a58d\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('core__fact_block_rewards')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_12be2d7125ecd54bceb0ffc5da84a58d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.e333e2b210", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_12be2d7125ecd54bceb0ffc5da84a58d.sql", "original_file_path": "models/core/core__fact_block_rewards.yml", "name": "dbt_constraints_primary_key_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID", "alias": "fact_block_rewards_FACT_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_rewards.yml/dbt_constraints_primary_key_co_12be2d7125ecd54bceb0ffc5da84a58d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_12be2d7125ecd54bceb0ffc5da84a58d"}, "created_at": 1665513503.515695, "compiled_sql": "with validation_errors as (\n    select\n        FACT_BLOCK_REWARDS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_block_rewards\n    group by FACT_BLOCK_REWARDS_ID\n    having count(*) > 1\n        or FACT_BLOCK_REWARDS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_block_rewards_FACT_BLOCK_REWARDS_ID", "column_name": null, "file_key_name": "models.core__fact_block_rewards"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e63145c998": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16efaeac19dc7a1ca781ec1570a41573\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16efaeac19dc7a1ca781ec1570a41573", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e63145c998", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_16efaeac19dc7a1ca781ec1570a41573.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "alias": "fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/dbt_expectations_expect_column_16efaeac19dc7a1ca781ec1570a41573.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_16efaeac19dc7a1ca781ec1570a41573"}, "created_at": 1665513503.519362, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.unique_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.44d86e956f": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_update_node__d5bef5c33654ab49e556707fbd345c5b\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_update_node__d5bef5c33654ab49e556707fbd345c5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.44d86e956f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_update_node__d5bef5c33654ab49e556707fbd345c5b.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "unique_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "alias": "fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/unique_core__fact_update_node__d5bef5c33654ab49e556707fbd345c5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_update_node__d5bef5c33654ab49e556707fbd345c5b"}, "created_at": 1665513503.5215502, "compiled_sql": "\n    \n    \n\nselect\n    FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_update_node_account_status_events\nwhere FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID is not null\ngroup by FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.not_null_core__fact_update_node_account_status_events_BLOCK_TIMESTAMP.d3ea501c1e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\",alias=\"not_null_core__fact_update_nod_4c93d50ea5be7d885c8476a4b88d6f35\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "not_null_core__fact_update_nod_4c93d50ea5be7d885c8476a4b88d6f35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_update_node_account_status_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_update_node_account_status_events_BLOCK_TIMESTAMP.d3ea501c1e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_update_nod_4c93d50ea5be7d885c8476a4b88d6f35.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "not_null_core__fact_update_node_account_status_events_BLOCK_TIMESTAMP", "alias": "fact_update_node_account_status_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/not_null_core__fact_update_nod_4c93d50ea5be7d885c8476a4b88d6f35.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_core__fact_update_nod_4c93d50ea5be7d885c8476a4b88d6f35", "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.52257, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_update_node_account_status_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_update_node_account_status_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.negative_one_core__fact_update_node_account_status_events_DIM_BLOCK_ID.1b8be0e620": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_core__fact_update_685a9ae46f9951045ad4d433f1822961\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "negative_one_core__fact_update_685a9ae46f9951045ad4d433f1822961", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_update_node_account_status_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_update_node_account_status_events_DIM_BLOCK_ID.1b8be0e620", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_update_685a9ae46f9951045ad4d433f1822961.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "negative_one_core__fact_update_node_account_status_events_DIM_BLOCK_ID", "alias": "fact_update_node_account_status_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/negative_one_core__fact_update_685a9ae46f9951045ad4d433f1822961.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_core__fact_update_685a9ae46f9951045ad4d433f1822961"}, "created_at": 1665513503.523666, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_update_node_account_status_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_update_node_account_status_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.not_null_core__fact_update_node_account_status_events_FORMER_STATUS.542955010b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_update_nod_1f9db582fc54327b73c904a653c25c20\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FORMER_STATUS", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "not_null_core__fact_update_nod_1f9db582fc54327b73c904a653c25c20", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_update_node_account_status_events_FORMER_STATUS"], "unique_id": "test.thorchain_models.not_null_core__fact_update_node_account_status_events_FORMER_STATUS.542955010b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_update_nod_1f9db582fc54327b73c904a653c25c20.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "not_null_core__fact_update_node_account_status_events_FORMER_STATUS", "alias": "fact_update_node_account_status_events_FORMER_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/not_null_core__fact_update_nod_1f9db582fc54327b73c904a653c25c20.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_core__fact_update_nod_1f9db582fc54327b73c904a653c25c20"}, "created_at": 1665513503.525505, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_update_node_account_status_events\nwhere FORMER_STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_update_node_account_status_events_FORMER_STATUS", "column_name": "FORMER_STATUS", "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.not_null_core__fact_update_node_account_status_events_CURRENT_STATUS.56817a94d4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_update_nod_19ee4c257af75239017ed7b064cc0e33\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENT_STATUS", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "not_null_core__fact_update_nod_19ee4c257af75239017ed7b064cc0e33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_update_node_account_status_events_CURRENT_STATUS"], "unique_id": "test.thorchain_models.not_null_core__fact_update_node_account_status_events_CURRENT_STATUS.56817a94d4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_update_nod_19ee4c257af75239017ed7b064cc0e33.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "not_null_core__fact_update_node_account_status_events_CURRENT_STATUS", "alias": "fact_update_node_account_status_events_CURRENT_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/not_null_core__fact_update_nod_19ee4c257af75239017ed7b064cc0e33.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_core__fact_update_nod_19ee4c257af75239017ed7b064cc0e33"}, "created_at": 1665513503.526423, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_update_node_account_status_events\nwhere CURRENT_STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_update_node_account_status_events_CURRENT_STATUS", "column_name": "CURRENT_STATUS", "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.not_null_core__fact_update_node_account_status_events_NODE_ADDRESS.d803773e0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_core__fact_update_nod_198f387dedb2ec41744d7f0848394410\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "not_null_core__fact_update_nod_198f387dedb2ec41744d7f0848394410", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_update_node_account_status_events_NODE_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_update_node_account_status_events_NODE_ADDRESS.d803773e0e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_update_nod_198f387dedb2ec41744d7f0848394410.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "not_null_core__fact_update_node_account_status_events_NODE_ADDRESS", "alias": "fact_update_node_account_status_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/not_null_core__fact_update_nod_198f387dedb2ec41744d7f0848394410.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_core__fact_update_nod_198f387dedb2ec41744d7f0848394410"}, "created_at": 1665513503.5272079, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_update_node_account_status_events\nwhere NODE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_update_node_account_status_events_NODE_ADDRESS", "column_name": "NODE_ADDRESS", "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.d46b96f1c2": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_2f925835f1e113ddcbcd564cbfcb383e\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_2f925835f1e113ddcbcd564cbfcb383e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.d46b96f1c2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_2f925835f1e113ddcbcd564cbfcb383e.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "dbt_constraints_primary_key_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "alias": "fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/dbt_constraints_primary_key_co_2f925835f1e113ddcbcd564cbfcb383e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_2f925835f1e113ddcbcd564cbfcb383e"}, "created_at": 1665513503.528023, "compiled_sql": "with validation_errors as (\n    select\n        FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_update_node_account_status_events\n    group by FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID\n    having count(*) > 1\n        or FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8f291f6f39": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_436ea1cc15850e6695efe23b757c78ad\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_update_node_account_status_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_update_node_account_status_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_436ea1cc15850e6695efe23b757c78ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8f291f6f39", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_436ea1cc15850e6695efe23b757c78ad.sql", "original_file_path": "models/core/core__fact_update_node_account_status_events.yml", "name": "dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_update_node_account_status_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_update_node_account_status_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_update_node_account_status_events.yml/dbt_constraints_foreign_key_co_436ea1cc15850e6695efe23b757c78ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_436ea1cc15850e6695efe23b757c78ad"}, "created_at": 1665513503.53052, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_update_node_account_status_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_update_node_account_status_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_update_node_account_status_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3d763daf51": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0683cd610471ea36cc8b07d9f76ec2ff\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_active_vault_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_active_vault_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0683cd610471ea36cc8b07d9f76ec2ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3d763daf51", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_0683cd610471ea36cc8b07d9f76ec2ff.sql", "original_file_path": "models/core/core__fact_active_vault_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "alias": "fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.yml/dbt_expectations_expect_column_0683cd610471ea36cc8b07d9f76ec2ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0683cd610471ea36cc8b07d9f76ec2ff"}, "created_at": 1665513503.5350149, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_ACTIVE_VAULT_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.core__fact_active_vault_events"}, "test.thorchain_models.unique_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.79697cc3a3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_active_vault_884ee9012c8cfc09da70b35a0bbe5b91\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_active_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_active_vault_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_active_vault_884ee9012c8cfc09da70b35a0bbe5b91", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.79697cc3a3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_active_vault_884ee9012c8cfc09da70b35a0bbe5b91.sql", "original_file_path": "models/core/core__fact_active_vault_events.yml", "name": "unique_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "alias": "fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.yml/unique_core__fact_active_vault_884ee9012c8cfc09da70b35a0bbe5b91.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_active_vault_884ee9012c8cfc09da70b35a0bbe5b91"}, "created_at": 1665513503.537036, "compiled_sql": "\n    \n    \n\nselect\n    FACT_ACTIVE_VAULT_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_active_vault_events\nwhere FACT_ACTIVE_VAULT_EVENTS_ID is not null\ngroup by FACT_ACTIVE_VAULT_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "file_key_name": "models.core__fact_active_vault_events"}, "test.thorchain_models.not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP.1d3fbb0a3b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_active_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_active_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP.1d3fbb0a3b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_active_vault_events.yml", "name": "not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP", "alias": "fact_active_vault_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.yml/not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.5379899, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_active_vault_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_active_vault_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_active_vault_events"}, "test.thorchain_models.negative_one_core__fact_active_vault_events_DIM_BLOCK_ID.722702a8fc": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_active_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_active_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_active_vault_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_active_vault_events_DIM_BLOCK_ID.722702a8fc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_active_vault_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_active_vault_events.yml", "name": "negative_one_core__fact_active_vault_events_DIM_BLOCK_ID", "alias": "fact_active_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.yml/negative_one_core__fact_active_vault_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.539479, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_active_vault_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_active_vault_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_active_vault_events"}, "test.thorchain_models.not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR.125c40e8d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADD_ASGARD_ADDR", "model": "{{ get_where_subquery(ref('core__fact_active_vault_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_active_vault_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR"], "unique_id": "test.thorchain_models.not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR.125c40e8d2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR.sql", "original_file_path": "models/core/core__fact_active_vault_events.yml", "name": "not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR", "alias": "fact_active_vault_events_ADD_ASGARD_ADDR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.yml/not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.5415301, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_active_vault_events\nwhere ADD_ASGARD_ADDR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_active_vault_events_ADD_ASGARD_ADDR", "column_name": "ADD_ASGARD_ADDR", "file_key_name": "models.core__fact_active_vault_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.e8289f48d1": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_73911dc07056f402cf367e32eeb39dfa\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ACTIVE_VAULT_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_active_vault_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_active_vault_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_73911dc07056f402cf367e32eeb39dfa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.e8289f48d1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_73911dc07056f402cf367e32eeb39dfa.sql", "original_file_path": "models/core/core__fact_active_vault_events.yml", "name": "dbt_constraints_primary_key_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "alias": "fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.yml/dbt_constraints_primary_key_co_73911dc07056f402cf367e32eeb39dfa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_73911dc07056f402cf367e32eeb39dfa"}, "created_at": 1665513503.542677, "compiled_sql": "with validation_errors as (\n    select\n        FACT_ACTIVE_VAULT_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_active_vault_events\n    group by FACT_ACTIVE_VAULT_EVENTS_ID\n    having count(*) > 1\n        or FACT_ACTIVE_VAULT_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_active_vault_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b9a88a56b1": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_2a229fc12f8055228689ad7bfda89827\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_active_vault_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_active_vault_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_2a229fc12f8055228689ad7bfda89827", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b9a88a56b1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_2a229fc12f8055228689ad7bfda89827.sql", "original_file_path": "models/core/core__fact_active_vault_events.yml", "name": "dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_active_vault_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_active_vault_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_active_vault_events.yml/dbt_constraints_foreign_key_co_2a229fc12f8055228689ad7bfda89827.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_2a229fc12f8055228689ad7bfda89827"}, "created_at": 1665513503.5446882, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_active_vault_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_active_vault_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_active_vault_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_upgrades_FACT_UPGRADES_ID.9298b1c97b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57d8606b059a803fba15b8592304c25a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_UPGRADES_ID", "model": "{{ get_where_subquery(ref('core__fact_upgrades')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_upgrades"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57d8606b059a803fba15b8592304c25a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_upgrades_FACT_UPGRADES_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_upgrades_FACT_UPGRADES_ID.9298b1c97b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_57d8606b059a803fba15b8592304c25a.sql", "original_file_path": "models/core/core__fact_upgrades.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_upgrades_FACT_UPGRADES_ID", "alias": "fact_upgrades_FACT_UPGRADES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_upgrades.yml/dbt_expectations_expect_column_57d8606b059a803fba15b8592304c25a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57d8606b059a803fba15b8592304c25a"}, "created_at": 1665513503.549525, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_UPGRADES_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_upgrades_FACT_UPGRADES_ID", "column_name": "FACT_UPGRADES_ID", "file_key_name": "models.core__fact_upgrades"}, "test.thorchain_models.unique_core__fact_upgrades_FACT_UPGRADES_ID.a36315e988": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_UPGRADES_ID", "model": "{{ get_where_subquery(ref('core__fact_upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_upgrades_FACT_UPGRADES_ID"], "unique_id": "test.thorchain_models.unique_core__fact_upgrades_FACT_UPGRADES_ID.a36315e988", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_upgrades_FACT_UPGRADES_ID.sql", "original_file_path": "models/core/core__fact_upgrades.yml", "name": "unique_core__fact_upgrades_FACT_UPGRADES_ID", "alias": "fact_upgrades_FACT_UPGRADES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_upgrades.yml/unique_core__fact_upgrades_FACT_UPGRADES_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.552224, "compiled_sql": "\n    \n    \n\nselect\n    FACT_UPGRADES_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_upgrades\nwhere FACT_UPGRADES_ID is not null\ngroup by FACT_UPGRADES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_upgrades_FACT_UPGRADES_ID", "column_name": "FACT_UPGRADES_ID", "file_key_name": "models.core__fact_upgrades"}, "test.thorchain_models.not_null_core__fact_upgrades_BLOCK_TIMESTAMP.f3d7bb5e1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_upgrades_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_upgrades_BLOCK_TIMESTAMP.f3d7bb5e1b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_upgrades_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_upgrades.yml", "name": "not_null_core__fact_upgrades_BLOCK_TIMESTAMP", "alias": "fact_upgrades_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_upgrades.yml/not_null_core__fact_upgrades_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.553319, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_upgrades where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_upgrades_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_upgrades"}, "test.thorchain_models.not_null_core__fact_upgrades_TX_ID.88449dfc60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_upgrades')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_upgrades"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_upgrades_TX_ID"], "unique_id": "test.thorchain_models.not_null_core__fact_upgrades_TX_ID.88449dfc60", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_upgrades_TX_ID.sql", "original_file_path": "models/core/core__fact_upgrades.yml", "name": "not_null_core__fact_upgrades_TX_ID", "alias": "fact_upgrades_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_upgrades.yml/not_null_core__fact_upgrades_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.5541382, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_upgrades\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_upgrades_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_upgrades"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_upgrades_FACT_UPGRADES_ID.2a81ce04d0": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_92f92872490da87c70b8beb74fed25eb\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_UPGRADES_ID", "model": "{{ get_where_subquery(ref('core__fact_upgrades')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_upgrades"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_92f92872490da87c70b8beb74fed25eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_upgrades_FACT_UPGRADES_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_upgrades_FACT_UPGRADES_ID.2a81ce04d0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_92f92872490da87c70b8beb74fed25eb.sql", "original_file_path": "models/core/core__fact_upgrades.yml", "name": "dbt_constraints_primary_key_core__fact_upgrades_FACT_UPGRADES_ID", "alias": "fact_upgrades_FACT_UPGRADES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_upgrades.yml/dbt_constraints_primary_key_co_92f92872490da87c70b8beb74fed25eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_92f92872490da87c70b8beb74fed25eb"}, "created_at": 1665513503.55507, "compiled_sql": "with validation_errors as (\n    select\n        FACT_UPGRADES_ID, count(*)\n    from THORCHAIN_DEV.core.fact_upgrades\n    group by FACT_UPGRADES_ID\n    having count(*) > 1\n        or FACT_UPGRADES_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_upgrades_FACT_UPGRADES_ID", "column_name": null, "file_key_name": "models.core__fact_upgrades"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a7ce140c43": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_077c5a0d4c5071236e6a8fb5abe0cedd\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_upgrades')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_upgrades"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_077c5a0d4c5071236e6a8fb5abe0cedd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a7ce140c43", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_077c5a0d4c5071236e6a8fb5abe0cedd.sql", "original_file_path": "models/core/core__fact_upgrades.yml", "name": "dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_upgrades_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_upgrades"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_upgrades.yml/dbt_constraints_foreign_key_co_077c5a0d4c5071236e6a8fb5abe0cedd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_077c5a0d4c5071236e6a8fb5abe0cedd"}, "created_at": 1665513503.557159, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_upgrades\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_upgrades_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_upgrades"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.89e5ab7b3f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5cb009d655b8d36a4ee3debd344e5ec2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BLOCK_BALANCES_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5cb009d655b8d36a4ee3debd344e5ec2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.89e5ab7b3f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_5cb009d655b8d36a4ee3debd344e5ec2.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "alias": "fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/dbt_expectations_expect_column_5cb009d655b8d36a4ee3debd344e5ec2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5cb009d655b8d36a4ee3debd344e5ec2"}, "created_at": 1665513503.562143, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_POOL_BLOCK_BALANCES_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "column_name": "FACT_POOL_BLOCK_BALANCES_ID", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.unique_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.624eb36d01": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_pool_block_b_07896b0184b19b7c13194c2e2559e744\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BLOCK_BALANCES_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": "unique_core__fact_pool_block_b_07896b0184b19b7c13194c2e2559e744", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID"], "unique_id": "test.thorchain_models.unique_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.624eb36d01", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_pool_block_b_07896b0184b19b7c13194c2e2559e744.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "unique_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "alias": "fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/unique_core__fact_pool_block_b_07896b0184b19b7c13194c2e2559e744.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_pool_block_b_07896b0184b19b7c13194c2e2559e744"}, "created_at": 1665513503.56409, "compiled_sql": "\n    \n    \n\nselect\n    FACT_POOL_BLOCK_BALANCES_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_pool_block_balances\nwhere FACT_POOL_BLOCK_BALANCES_ID is not null\ngroup by FACT_POOL_BLOCK_BALANCES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "column_name": "FACT_POOL_BLOCK_BALANCES_ID", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP.9d11fe9f1e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP.9d11fe9f1e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP", "alias": "fact_pool_block_balances_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.565156, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_pool_block_balances where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_block_balances_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID.f1f87272cb": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID.f1f87272cb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID", "alias": "fact_pool_block_balances_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.5664, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_pool_block_balances where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_pool_block_balances_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.not_null_core__fact_pool_block_balances_POOL_NAME.7349f760b3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_block_balances_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_block_balances_POOL_NAME.7349f760b3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_block_balances_POOL_NAME.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "not_null_core__fact_pool_block_balances_POOL_NAME", "alias": "fact_pool_block_balances_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/not_null_core__fact_pool_block_balances_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.568407, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_pool_block_balances\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_block_balances_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT.6437831137": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_block_balances_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT.6437831137", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_block_balances_RUNE_AMOUNT.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "not_null_core__fact_pool_block_balances_RUNE_AMOUNT", "alias": "fact_pool_block_balances_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/not_null_core__fact_pool_block_balances_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.5695748, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_pool_block_balances\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_block_balances_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD.646a684c15": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD.646a684c15", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD", "alias": "fact_pool_block_balances_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.571033, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_pool_block_balances\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_block_balances_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.not_null_core__fact_pool_block_balances_ASSET_AMOUNT.8e6a6db124": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_block_balances_ASSET_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_block_balances_ASSET_AMOUNT.8e6a6db124", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_block_balances_ASSET_AMOUNT.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "not_null_core__fact_pool_block_balances_ASSET_AMOUNT", "alias": "fact_pool_block_balances_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/not_null_core__fact_pool_block_balances_ASSET_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.571991, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_pool_block_balances\nwhere ASSET_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_block_balances_ASSET_AMOUNT", "column_name": "ASSET_AMOUNT", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.not_null_core__fact_pool_block_balances_SYNTH_AMOUNT.26b33d8c1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_block_balances_SYNTH_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_block_balances_SYNTH_AMOUNT.26b33d8c1b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_block_balances_SYNTH_AMOUNT.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "not_null_core__fact_pool_block_balances_SYNTH_AMOUNT", "alias": "fact_pool_block_balances_SYNTH_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/not_null_core__fact_pool_block_balances_SYNTH_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.572787, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_pool_block_balances\nwhere SYNTH_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_block_balances_SYNTH_AMOUNT", "column_name": "SYNTH_AMOUNT", "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.e0fa300f8a": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_43881d7fd07f6c7c24dabc5e67559928\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BLOCK_BALANCES_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_43881d7fd07f6c7c24dabc5e67559928", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.e0fa300f8a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_43881d7fd07f6c7c24dabc5e67559928.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "dbt_constraints_primary_key_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "alias": "fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/dbt_constraints_primary_key_co_43881d7fd07f6c7c24dabc5e67559928.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_43881d7fd07f6c7c24dabc5e67559928"}, "created_at": 1665513503.573727, "compiled_sql": "with validation_errors as (\n    select\n        FACT_POOL_BLOCK_BALANCES_ID, count(*)\n    from THORCHAIN_DEV.core.fact_pool_block_balances\n    group by FACT_POOL_BLOCK_BALANCES_ID\n    having count(*) > 1\n        or FACT_POOL_BLOCK_BALANCES_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID", "column_name": null, "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a4580f364c": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_373d24b54580df56a9a4e88c931d89ce\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_balances')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pool_block_balances"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_373d24b54580df56a9a4e88c931d89ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a4580f364c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_373d24b54580df56a9a4e88c931d89ce.sql", "original_file_path": "models/core/core__fact_pool_block_balances.yml", "name": "dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_pool_block_balances_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_pool_block_balances"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_balances.yml/dbt_constraints_foreign_key_co_373d24b54580df56a9a4e88c931d89ce.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_373d24b54580df56a9a4e88c931d89ce"}, "created_at": 1665513503.5759249, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_pool_block_balances\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_pool_block_balances_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_pool_block_balances"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.c50105a5a2": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b52cbc9813d06b409cb9a3df332b0bf2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_RESERVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_reserve_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_reserve_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b52cbc9813d06b409cb9a3df332b0bf2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.c50105a5a2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_b52cbc9813d06b409cb9a3df332b0bf2.sql", "original_file_path": "models/core/core__fact_reserve_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID", "alias": "fact_reserve_events_FACT_RESERVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_reserve_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_reserve_events.yml/dbt_expectations_expect_column_b52cbc9813d06b409cb9a3df332b0bf2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b52cbc9813d06b409cb9a3df332b0bf2"}, "created_at": 1665513503.581522, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_RESERVE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_reserve_events_FACT_RESERVE_EVENTS_ID", "column_name": "FACT_RESERVE_EVENTS_ID", "file_key_name": "models.core__fact_reserve_events"}, "test.thorchain_models.unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.2278508729": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_RESERVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_reserve_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_reserve_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.2278508729", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_reserve_events.yml", "name": "unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID", "alias": "fact_reserve_events_FACT_RESERVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_reserve_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_reserve_events.yml/unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.5837178, "compiled_sql": "\n    \n    \n\nselect\n    FACT_RESERVE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_reserve_events\nwhere FACT_RESERVE_EVENTS_ID is not null\ngroup by FACT_RESERVE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_reserve_events_FACT_RESERVE_EVENTS_ID", "column_name": "FACT_RESERVE_EVENTS_ID", "file_key_name": "models.core__fact_reserve_events"}, "test.thorchain_models.not_null_core__fact_reserve_events_BLOCK_TIMESTAMP.9a529f13da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_reserve_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_reserve_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_reserve_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_reserve_events_BLOCK_TIMESTAMP.9a529f13da", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_reserve_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_reserve_events.yml", "name": "not_null_core__fact_reserve_events_BLOCK_TIMESTAMP", "alias": "fact_reserve_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_reserve_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_reserve_events.yml/not_null_core__fact_reserve_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.584704, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_reserve_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_reserve_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_reserve_events"}, "test.thorchain_models.negative_one_core__fact_reserve_events_DIM_BLOCK_ID.2dcdfcd58c": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_reserve_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_reserve_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_reserve_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_reserve_events_DIM_BLOCK_ID.2dcdfcd58c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_reserve_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_reserve_events.yml", "name": "negative_one_core__fact_reserve_events_DIM_BLOCK_ID", "alias": "fact_reserve_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_reserve_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_reserve_events.yml/negative_one_core__fact_reserve_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.585734, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_reserve_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_reserve_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_reserve_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.9f61e9de79": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_72a6ab0d8823e730be733b3393fcd835\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_RESERVE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_reserve_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_reserve_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_72a6ab0d8823e730be733b3393fcd835", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.9f61e9de79", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_72a6ab0d8823e730be733b3393fcd835.sql", "original_file_path": "models/core/core__fact_reserve_events.yml", "name": "dbt_constraints_primary_key_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID", "alias": "fact_reserve_events_FACT_RESERVE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_reserve_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_reserve_events.yml/dbt_constraints_primary_key_co_72a6ab0d8823e730be733b3393fcd835.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_72a6ab0d8823e730be733b3393fcd835"}, "created_at": 1665513503.587679, "compiled_sql": "with validation_errors as (\n    select\n        FACT_RESERVE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_reserve_events\n    group by FACT_RESERVE_EVENTS_ID\n    having count(*) > 1\n        or FACT_RESERVE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_reserve_events_FACT_RESERVE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_reserve_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.becfbe7562": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_0344e936a5ad674d368e0e977b3ff483\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_reserve_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_reserve_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_0344e936a5ad674d368e0e977b3ff483", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.becfbe7562", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_0344e936a5ad674d368e0e977b3ff483.sql", "original_file_path": "models/core/core__fact_reserve_events.yml", "name": "dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_reserve_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_reserve_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_reserve_events.yml/dbt_constraints_foreign_key_co_0344e936a5ad674d368e0e977b3ff483.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_0344e936a5ad674d368e0e977b3ff483"}, "created_at": 1665513503.589819, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_reserve_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_reserve_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_reserve_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_gas_events_FACT_GAS_EVENTS_ID.aeb85cf4be": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d0e6df0ebc9c8f2771d165849de8895\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_GAS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d0e6df0ebc9c8f2771d165849de8895", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_gas_events_FACT_GAS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_gas_events_FACT_GAS_EVENTS_ID.aeb85cf4be", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_0d0e6df0ebc9c8f2771d165849de8895.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_gas_events_FACT_GAS_EVENTS_ID", "alias": "fact_gas_events_FACT_GAS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/dbt_expectations_expect_column_0d0e6df0ebc9c8f2771d165849de8895.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0d0e6df0ebc9c8f2771d165849de8895"}, "created_at": 1665513503.59408, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_GAS_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_gas_events_FACT_GAS_EVENTS_ID", "column_name": "FACT_GAS_EVENTS_ID", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.unique_core__fact_gas_events_FACT_GAS_EVENTS_ID.eb8ed8966c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_GAS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_gas_events_FACT_GAS_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_gas_events_FACT_GAS_EVENTS_ID.eb8ed8966c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_gas_events_FACT_GAS_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "unique_core__fact_gas_events_FACT_GAS_EVENTS_ID", "alias": "fact_gas_events_FACT_GAS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/unique_core__fact_gas_events_FACT_GAS_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.596054, "compiled_sql": "\n    \n    \n\nselect\n    FACT_GAS_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_gas_events\nwhere FACT_GAS_EVENTS_ID is not null\ngroup by FACT_GAS_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_gas_events_FACT_GAS_EVENTS_ID", "column_name": "FACT_GAS_EVENTS_ID", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.not_null_core__fact_gas_events_BLOCK_TIMESTAMP.35593bcc96": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_gas_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_gas_events_BLOCK_TIMESTAMP.35593bcc96", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_gas_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "not_null_core__fact_gas_events_BLOCK_TIMESTAMP", "alias": "fact_gas_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/not_null_core__fact_gas_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.597019, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_gas_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_gas_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.negative_one_core__fact_gas_events_DIM_BLOCK_ID.7f0c9823d6": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_gas_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_gas_events_DIM_BLOCK_ID.7f0c9823d6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_gas_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "negative_one_core__fact_gas_events_DIM_BLOCK_ID", "alias": "fact_gas_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/negative_one_core__fact_gas_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.5983171, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_gas_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_gas_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.not_null_core__fact_gas_events_ASSET.eb1210fc06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_gas_events_ASSET"], "unique_id": "test.thorchain_models.not_null_core__fact_gas_events_ASSET.eb1210fc06", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_gas_events_ASSET.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "not_null_core__fact_gas_events_ASSET", "alias": "fact_gas_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/not_null_core__fact_gas_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.600853, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_gas_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_gas_events_ASSET", "column_name": "ASSET", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.not_null_core__fact_gas_events_ASSET_E8.345e0e92d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_gas_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_gas_events_ASSET_E8.345e0e92d6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_gas_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "not_null_core__fact_gas_events_ASSET_E8", "alias": "fact_gas_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/not_null_core__fact_gas_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.601978, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_gas_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_gas_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.not_null_core__fact_gas_events_RUNE_E8.3d0c674d04": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_gas_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_gas_events_RUNE_E8.3d0c674d04", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_gas_events_RUNE_E8.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "not_null_core__fact_gas_events_RUNE_E8", "alias": "fact_gas_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/not_null_core__fact_gas_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.6029499, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_gas_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_gas_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.not_null_core__fact_gas_events_TX_COUNT.85916d908d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_gas_events_TX_COUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_gas_events_TX_COUNT.85916d908d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_gas_events_TX_COUNT.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "not_null_core__fact_gas_events_TX_COUNT", "alias": "fact_gas_events_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/not_null_core__fact_gas_events_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.603816, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_gas_events\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_gas_events_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_gas_events_FACT_GAS_EVENTS_ID.5f0af93d3d": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_19bfcc3638ccf18fb663d475eb01be7e\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_GAS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_19bfcc3638ccf18fb663d475eb01be7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_gas_events_FACT_GAS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_gas_events_FACT_GAS_EVENTS_ID.5f0af93d3d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_19bfcc3638ccf18fb663d475eb01be7e.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "dbt_constraints_primary_key_core__fact_gas_events_FACT_GAS_EVENTS_ID", "alias": "fact_gas_events_FACT_GAS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/dbt_constraints_primary_key_co_19bfcc3638ccf18fb663d475eb01be7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_19bfcc3638ccf18fb663d475eb01be7e"}, "created_at": 1665513503.604725, "compiled_sql": "with validation_errors as (\n    select\n        FACT_GAS_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_gas_events\n    group by FACT_GAS_EVENTS_ID\n    having count(*) > 1\n        or FACT_GAS_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_gas_events_FACT_GAS_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5dc998f326": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_84aeffcbb6b0a6fc3323a3ceaf786caf\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_gas_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_gas_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_84aeffcbb6b0a6fc3323a3ceaf786caf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5dc998f326", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_84aeffcbb6b0a6fc3323a3ceaf786caf.sql", "original_file_path": "models/core/core__fact_gas_events.yml", "name": "dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_gas_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_gas_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_gas_events.yml/dbt_constraints_foreign_key_co_84aeffcbb6b0a6fc3323a3ceaf786caf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_84aeffcbb6b0a6fc3323a3ceaf786caf"}, "created_at": 1665513503.607104, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_gas_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_gas_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_gas_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.a5f60f6196": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_41ad50cd0f6d52ef3cfd9b69f35a8c48\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_THORNAME_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_thorname_change_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_thorname_change_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_41ad50cd0f6d52ef3cfd9b69f35a8c48", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.a5f60f6196", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_41ad50cd0f6d52ef3cfd9b69f35a8c48.sql", "original_file_path": "models/core/core__fact_thorname_change_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "alias": "fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_thorname_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_thorname_change_events.yml/dbt_expectations_expect_column_41ad50cd0f6d52ef3cfd9b69f35a8c48.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_41ad50cd0f6d52ef3cfd9b69f35a8c48"}, "created_at": 1665513503.612436, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_THORNAME_CHANGE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "column_name": "FACT_THORNAME_CHANGE_EVENTS_ID", "file_key_name": "models.core__fact_thorname_change_events"}, "test.thorchain_models.unique_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.4a216c267b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_thorname_cha_9965300c5daae338ceea608638babd64\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_THORNAME_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_thorname_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_thorname_change_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_thorname_cha_9965300c5daae338ceea608638babd64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.4a216c267b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_thorname_cha_9965300c5daae338ceea608638babd64.sql", "original_file_path": "models/core/core__fact_thorname_change_events.yml", "name": "unique_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "alias": "fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_thorname_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_thorname_change_events.yml/unique_core__fact_thorname_cha_9965300c5daae338ceea608638babd64.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_thorname_cha_9965300c5daae338ceea608638babd64"}, "created_at": 1665513503.61504, "compiled_sql": "\n    \n    \n\nselect\n    FACT_THORNAME_CHANGE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_thorname_change_events\nwhere FACT_THORNAME_CHANGE_EVENTS_ID is not null\ngroup by FACT_THORNAME_CHANGE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "column_name": "FACT_THORNAME_CHANGE_EVENTS_ID", "file_key_name": "models.core__fact_thorname_change_events"}, "test.thorchain_models.not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP.bbcdabc756": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_thorname_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_thorname_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP.bbcdabc756", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_thorname_change_events.yml", "name": "not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP", "alias": "fact_thorname_change_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_thorname_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_thorname_change_events.yml/not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.616122, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_thorname_change_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_thorname_change_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_thorname_change_events"}, "test.thorchain_models.negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID.140d803276": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_thorname_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_thorname_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID.140d803276", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_thorname_change_events.yml", "name": "negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID", "alias": "fact_thorname_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_thorname_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_thorname_change_events.yml/negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.6170921, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_thorname_change_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_thorname_change_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_thorname_change_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.1b4a17651b": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_6ca01be43f97b51a8cf52ed569d3c6af\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_THORNAME_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_thorname_change_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_thorname_change_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_6ca01be43f97b51a8cf52ed569d3c6af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.1b4a17651b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_6ca01be43f97b51a8cf52ed569d3c6af.sql", "original_file_path": "models/core/core__fact_thorname_change_events.yml", "name": "dbt_constraints_primary_key_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "alias": "fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_thorname_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_thorname_change_events.yml/dbt_constraints_primary_key_co_6ca01be43f97b51a8cf52ed569d3c6af.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_6ca01be43f97b51a8cf52ed569d3c6af"}, "created_at": 1665513503.619165, "compiled_sql": "with validation_errors as (\n    select\n        FACT_THORNAME_CHANGE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_thorname_change_events\n    group by FACT_THORNAME_CHANGE_EVENTS_ID\n    having count(*) > 1\n        or FACT_THORNAME_CHANGE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_thorname_change_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1ed6c8a772": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_ee7cdca28259a3e36a24d1b7dc89d253\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_thorname_change_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_thorname_change_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_ee7cdca28259a3e36a24d1b7dc89d253", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1ed6c8a772", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_ee7cdca28259a3e36a24d1b7dc89d253.sql", "original_file_path": "models/core/core__fact_thorname_change_events.yml", "name": "dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_thorname_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_thorname_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_thorname_change_events.yml/dbt_constraints_foreign_key_co_ee7cdca28259a3e36a24d1b7dc89d253.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_ee7cdca28259a3e36a24d1b7dc89d253"}, "created_at": 1665513503.62131, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_thorname_change_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_thorname_change_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_thorname_change_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.fd258fb2a9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f7906a74950d15a60f278a240aad2bba\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f7906a74950d15a60f278a240aad2bba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.fd258fb2a9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_f7906a74950d15a60f278a240aad2bba.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "alias": "fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/dbt_expectations_expect_column_f7906a74950d15a60f278a240aad2bba.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f7906a74950d15a60f278a240aad2bba"}, "created_at": 1665513503.6260061, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TOTAL_BLOCK_REWARDS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.unique_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.35ddebe805": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_total_block__251d4056d2b08fc6c516c415f74fb2c5\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": "unique_core__fact_total_block__251d4056d2b08fc6c516c415f74fb2c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.35ddebe805", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_total_block__251d4056d2b08fc6c516c415f74fb2c5.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "unique_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "alias": "fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/unique_core__fact_total_block__251d4056d2b08fc6c516c415f74fb2c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_total_block__251d4056d2b08fc6c516c415f74fb2c5"}, "created_at": 1665513503.628335, "compiled_sql": "\n    \n    \n\nselect\n    FACT_TOTAL_BLOCK_REWARDS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_total_block_rewards\nwhere FACT_TOTAL_BLOCK_REWARDS_ID is not null\ngroup by FACT_TOTAL_BLOCK_REWARDS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP.b0622419e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP.b0622419e6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP", "alias": "fact_total_block_rewards_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.629338, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_total_block_rewards where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_total_block_rewards_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID.69732a2faa": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID.69732a2faa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID", "alias": "fact_total_block_rewards_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.6304471, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_total_block_rewards where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_total_block_rewards_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.not_null_core__fact_total_block_rewards_REWARD_ENTITY.7590c6a78e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "REWARD_ENTITY", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_total_block_rewards_REWARD_ENTITY"], "unique_id": "test.thorchain_models.not_null_core__fact_total_block_rewards_REWARD_ENTITY.7590c6a78e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_total_block_rewards_REWARD_ENTITY.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "not_null_core__fact_total_block_rewards_REWARD_ENTITY", "alias": "fact_total_block_rewards_REWARD_ENTITY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/not_null_core__fact_total_block_rewards_REWARD_ENTITY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.632308, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_total_block_rewards\nwhere REWARD_ENTITY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_total_block_rewards_REWARD_ENTITY", "column_name": "REWARD_ENTITY", "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.not_null_core__fact_total_block_rewards_RUNE_AMOUNT.e5de0ae4a8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_total_block_rewards_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_total_block_rewards_RUNE_AMOUNT.e5de0ae4a8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_total_block_rewards_RUNE_AMOUNT.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "not_null_core__fact_total_block_rewards_RUNE_AMOUNT", "alias": "fact_total_block_rewards_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/not_null_core__fact_total_block_rewards_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.633396, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_total_block_rewards\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_total_block_rewards_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.448d03892d": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_732e17597183c668dd75a5f49be04b5b\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TOTAL_BLOCK_REWARDS_ID", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_732e17597183c668dd75a5f49be04b5b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.448d03892d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_732e17597183c668dd75a5f49be04b5b.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "dbt_constraints_primary_key_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "alias": "fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/dbt_constraints_primary_key_co_732e17597183c668dd75a5f49be04b5b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_732e17597183c668dd75a5f49be04b5b"}, "created_at": 1665513503.6342242, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TOTAL_BLOCK_REWARDS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_total_block_rewards\n    group by FACT_TOTAL_BLOCK_REWARDS_ID\n    having count(*) > 1\n        or FACT_TOTAL_BLOCK_REWARDS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID", "column_name": null, "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2d656d9d6f": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c0f0844c67b01e978187b1fcf212691c\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_total_block_rewards')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_total_block_rewards"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c0f0844c67b01e978187b1fcf212691c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2d656d9d6f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_c0f0844c67b01e978187b1fcf212691c.sql", "original_file_path": "models/core/core__fact_total_block_rewards.yml", "name": "dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_total_block_rewards_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_total_block_rewards"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_block_rewards.yml/dbt_constraints_foreign_key_co_c0f0844c67b01e978187b1fcf212691c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_c0f0844c67b01e978187b1fcf212691c"}, "created_at": 1665513503.63642, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_total_block_rewards\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_total_block_rewards_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_total_block_rewards"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.a2f2d234e7": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_73244a816f2cb69f0b177ec2cc3b967b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_NEW_NODE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_new_node_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_new_node_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_73244a816f2cb69f0b177ec2cc3b967b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.a2f2d234e7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_73244a816f2cb69f0b177ec2cc3b967b.sql", "original_file_path": "models/core/core__fact_new_node_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "alias": "fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.yml/dbt_expectations_expect_column_73244a816f2cb69f0b177ec2cc3b967b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_73244a816f2cb69f0b177ec2cc3b967b"}, "created_at": 1665513503.640404, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_NEW_NODE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "column_name": "FACT_NEW_NODE_EVENTS_ID", "file_key_name": "models.core__fact_new_node_events"}, "test.thorchain_models.unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f4b183908a": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_NEW_NODE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_new_node_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_new_node_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f4b183908a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_new_node_events.yml", "name": "unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "alias": "fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.yml/unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.642393, "compiled_sql": "\n    \n    \n\nselect\n    FACT_NEW_NODE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_new_node_events\nwhere FACT_NEW_NODE_EVENTS_ID is not null\ngroup by FACT_NEW_NODE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "column_name": "FACT_NEW_NODE_EVENTS_ID", "file_key_name": "models.core__fact_new_node_events"}, "test.thorchain_models.not_null_core__fact_new_node_events_BLOCK_TIMESTAMP.9d461f9b74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_new_node_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_new_node_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_new_node_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_new_node_events_BLOCK_TIMESTAMP.9d461f9b74", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_new_node_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_new_node_events.yml", "name": "not_null_core__fact_new_node_events_BLOCK_TIMESTAMP", "alias": "fact_new_node_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.yml/not_null_core__fact_new_node_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.6438642, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_new_node_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_new_node_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_new_node_events"}, "test.thorchain_models.negative_one_core__fact_new_node_events_DIM_BLOCK_ID.c4f3cf3f10": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_new_node_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_new_node_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_new_node_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_new_node_events_DIM_BLOCK_ID.c4f3cf3f10", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_new_node_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_new_node_events.yml", "name": "negative_one_core__fact_new_node_events_DIM_BLOCK_ID", "alias": "fact_new_node_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.yml/negative_one_core__fact_new_node_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.64495, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_new_node_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_new_node_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_new_node_events"}, "test.thorchain_models.not_null_core__fact_new_node_events_NODE_ADDRESS.3ffbf12d49": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NODE_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_new_node_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_new_node_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_new_node_events_NODE_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_new_node_events_NODE_ADDRESS.3ffbf12d49", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_new_node_events_NODE_ADDRESS.sql", "original_file_path": "models/core/core__fact_new_node_events.yml", "name": "not_null_core__fact_new_node_events_NODE_ADDRESS", "alias": "fact_new_node_events_NODE_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.yml/not_null_core__fact_new_node_events_NODE_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.647545, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_new_node_events\nwhere NODE_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_new_node_events_NODE_ADDRESS", "column_name": "NODE_ADDRESS", "file_key_name": "models.core__fact_new_node_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.e62e52ebfb": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_8b14ffe29e92146167edaaeff29f5f22\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_NEW_NODE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_new_node_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_new_node_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_8b14ffe29e92146167edaaeff29f5f22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.e62e52ebfb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_8b14ffe29e92146167edaaeff29f5f22.sql", "original_file_path": "models/core/core__fact_new_node_events.yml", "name": "dbt_constraints_primary_key_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "alias": "fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.yml/dbt_constraints_primary_key_co_8b14ffe29e92146167edaaeff29f5f22.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_8b14ffe29e92146167edaaeff29f5f22"}, "created_at": 1665513503.648364, "compiled_sql": "with validation_errors as (\n    select\n        FACT_NEW_NODE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_new_node_events\n    group by FACT_NEW_NODE_EVENTS_ID\n    having count(*) > 1\n        or FACT_NEW_NODE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_new_node_events_FACT_NEW_NODE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_new_node_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4de363f5ea": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_44a59d8688d0863cdc5d3dbf37a0d24e\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_new_node_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_new_node_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_44a59d8688d0863cdc5d3dbf37a0d24e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4de363f5ea", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_44a59d8688d0863cdc5d3dbf37a0d24e.sql", "original_file_path": "models/core/core__fact_new_node_events.yml", "name": "dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_new_node_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_new_node_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_new_node_events.yml/dbt_constraints_foreign_key_co_44a59d8688d0863cdc5d3dbf37a0d24e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_44a59d8688d0863cdc5d3dbf37a0d24e"}, "created_at": 1665513503.650456, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_new_node_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_new_node_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_new_node_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.fdbfe95915": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_29e2bac4c5a85f6648db210a5da9f84f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pending_liquidity_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pending_liquidity_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_29e2bac4c5a85f6648db210a5da9f84f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.fdbfe95915", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_29e2bac4c5a85f6648db210a5da9f84f.sql", "original_file_path": "models/core/core__fact_pending_liquidity_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "alias": "fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pending_liquidity_events.yml/dbt_expectations_expect_column_29e2bac4c5a85f6648db210a5da9f84f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_29e2bac4c5a85f6648db210a5da9f84f"}, "created_at": 1665513503.655933, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_PENDING_LIQUIDITY_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "file_key_name": "models.core__fact_pending_liquidity_events"}, "test.thorchain_models.unique_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.2b8ffd9a36": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_pending_liqu_131b76be3cc00d504a5617a7be188c13\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pending_liquidity_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_pending_liqu_131b76be3cc00d504a5617a7be188c13", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.2b8ffd9a36", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_pending_liqu_131b76be3cc00d504a5617a7be188c13.sql", "original_file_path": "models/core/core__fact_pending_liquidity_events.yml", "name": "unique_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "alias": "fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pending_liquidity_events.yml/unique_core__fact_pending_liqu_131b76be3cc00d504a5617a7be188c13.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_pending_liqu_131b76be3cc00d504a5617a7be188c13"}, "created_at": 1665513503.65831, "compiled_sql": "\n    \n    \n\nselect\n    FACT_PENDING_LIQUIDITY_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_pending_liquidity_events\nwhere FACT_PENDING_LIQUIDITY_EVENTS_ID is not null\ngroup by FACT_PENDING_LIQUIDITY_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "file_key_name": "models.core__fact_pending_liquidity_events"}, "test.thorchain_models.not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP.b3a80571a0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP.b3a80571a0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_pending_liquidity_events.yml", "name": "not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP", "alias": "fact_pending_liquidity_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pending_liquidity_events.yml/not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.6593359, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_pending_liquidity_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pending_liquidity_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_pending_liquidity_events"}, "test.thorchain_models.negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID.3a16136f4d": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pending_liquidity_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pending_liquidity_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID.3a16136f4d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_pending_liquidity_events.yml", "name": "negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID", "alias": "fact_pending_liquidity_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pending_liquidity_events.yml/negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.660341, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_pending_liquidity_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_pending_liquidity_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_pending_liquidity_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.300a1fb7f2": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_a99872c1f33fb5e2ce3248818218064f\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_PENDING_LIQUIDITY_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pending_liquidity_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pending_liquidity_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_a99872c1f33fb5e2ce3248818218064f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.300a1fb7f2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_a99872c1f33fb5e2ce3248818218064f.sql", "original_file_path": "models/core/core__fact_pending_liquidity_events.yml", "name": "dbt_constraints_primary_key_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "alias": "fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pending_liquidity_events.yml/dbt_constraints_primary_key_co_a99872c1f33fb5e2ce3248818218064f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_a99872c1f33fb5e2ce3248818218064f"}, "created_at": 1665513503.662327, "compiled_sql": "with validation_errors as (\n    select\n        FACT_PENDING_LIQUIDITY_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_pending_liquidity_events\n    group by FACT_PENDING_LIQUIDITY_EVENTS_ID\n    having count(*) > 1\n        or FACT_PENDING_LIQUIDITY_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_pending_liquidity_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2429920cfb": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_3ae1814c49b45eb8cdcae9fc2a0f0a75\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pending_liquidity_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pending_liquidity_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_3ae1814c49b45eb8cdcae9fc2a0f0a75", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2429920cfb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_3ae1814c49b45eb8cdcae9fc2a0f0a75.sql", "original_file_path": "models/core/core__fact_pending_liquidity_events.yml", "name": "dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_pending_liquidity_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_pending_liquidity_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pending_liquidity_events.yml/dbt_constraints_foreign_key_co_3ae1814c49b45eb8cdcae9fc2a0f0a75.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_3ae1814c49b45eb8cdcae9fc2a0f0a75"}, "created_at": 1665513503.664938, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_pending_liquidity_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_pending_liquidity_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_pending_liquidity_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.f603367883": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e0c4666611a4295b13df107dbf46706\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_OUTBOUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_outbound_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_outbound_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e0c4666611a4295b13df107dbf46706", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.f603367883", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_6e0c4666611a4295b13df107dbf46706.sql", "original_file_path": "models/core/core__fact_outbound_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "alias": "fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_outbound_events.yml/dbt_expectations_expect_column_6e0c4666611a4295b13df107dbf46706.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6e0c4666611a4295b13df107dbf46706"}, "created_at": 1665513503.669906, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_OUTBOUND_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "column_name": "FACT_OUTBOUND_EVENTS_ID", "file_key_name": "models.core__fact_outbound_events"}, "test.thorchain_models.unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.4c4c439442": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_OUTBOUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.4c4c439442", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_outbound_events.yml", "name": "unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "alias": "fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_outbound_events.yml/unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.671763, "compiled_sql": "\n    \n    \n\nselect\n    FACT_OUTBOUND_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_outbound_events\nwhere FACT_OUTBOUND_EVENTS_ID is not null\ngroup by FACT_OUTBOUND_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "column_name": "FACT_OUTBOUND_EVENTS_ID", "file_key_name": "models.core__fact_outbound_events"}, "test.thorchain_models.not_null_core__fact_outbound_events_BLOCK_TIMESTAMP.6055e0ddf8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_outbound_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_outbound_events_BLOCK_TIMESTAMP.6055e0ddf8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_outbound_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_outbound_events.yml", "name": "not_null_core__fact_outbound_events_BLOCK_TIMESTAMP", "alias": "fact_outbound_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_outbound_events.yml/not_null_core__fact_outbound_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.672981, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_outbound_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_outbound_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_outbound_events"}, "test.thorchain_models.negative_one_core__fact_outbound_events_DIM_BLOCK_ID.f5caf0aeb3": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_outbound_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_outbound_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_outbound_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_outbound_events_DIM_BLOCK_ID.f5caf0aeb3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_outbound_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_outbound_events.yml", "name": "negative_one_core__fact_outbound_events_DIM_BLOCK_ID", "alias": "fact_outbound_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_outbound_events.yml/negative_one_core__fact_outbound_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.6743228, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_outbound_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_outbound_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_outbound_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.05c0f9f101": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_66942c7b6280d3ed12cbaba01e821a33\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_OUTBOUND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_outbound_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_outbound_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_66942c7b6280d3ed12cbaba01e821a33", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.05c0f9f101", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_66942c7b6280d3ed12cbaba01e821a33.sql", "original_file_path": "models/core/core__fact_outbound_events.yml", "name": "dbt_constraints_primary_key_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "alias": "fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_outbound_events.yml/dbt_constraints_primary_key_co_66942c7b6280d3ed12cbaba01e821a33.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_66942c7b6280d3ed12cbaba01e821a33"}, "created_at": 1665513503.676512, "compiled_sql": "with validation_errors as (\n    select\n        FACT_OUTBOUND_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_outbound_events\n    group by FACT_OUTBOUND_EVENTS_ID\n    having count(*) > 1\n        or FACT_OUTBOUND_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_outbound_events_FACT_OUTBOUND_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_outbound_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.277332ae7e": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c673aac17869482807786762b803a6af\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_outbound_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_outbound_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c673aac17869482807786762b803a6af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.277332ae7e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_c673aac17869482807786762b803a6af.sql", "original_file_path": "models/core/core__fact_outbound_events.yml", "name": "dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_outbound_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_outbound_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_outbound_events.yml/dbt_constraints_foreign_key_co_c673aac17869482807786762b803a6af.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_c673aac17869482807786762b803a6af"}, "created_at": 1665513503.6786518, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_outbound_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_outbound_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_outbound_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_stake_events_FACT_STAKE_EVENTS_ID.0464a58ac1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b6ab3183f36f3aaa5f8628f1e466ccc4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_STAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b6ab3183f36f3aaa5f8628f1e466ccc4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_stake_events_FACT_STAKE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_stake_events_FACT_STAKE_EVENTS_ID.0464a58ac1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_b6ab3183f36f3aaa5f8628f1e466ccc4.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_stake_events_FACT_STAKE_EVENTS_ID", "alias": "fact_stake_events_FACT_STAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/dbt_expectations_expect_column_b6ab3183f36f3aaa5f8628f1e466ccc4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b6ab3183f36f3aaa5f8628f1e466ccc4"}, "created_at": 1665513503.684469, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_STAKE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_stake_events_FACT_STAKE_EVENTS_ID", "column_name": "FACT_STAKE_EVENTS_ID", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID.52dbe36799": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_STAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID.52dbe36799", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID", "alias": "fact_stake_events_FACT_STAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.686644, "compiled_sql": "\n    \n    \n\nselect\n    FACT_STAKE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_stake_events\nwhere FACT_STAKE_EVENTS_ID is not null\ngroup by FACT_STAKE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_stake_events_FACT_STAKE_EVENTS_ID", "column_name": "FACT_STAKE_EVENTS_ID", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.not_null_core__fact_stake_events_BLOCK_TIMESTAMP.bb23735cef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_stake_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_stake_events_BLOCK_TIMESTAMP.bb23735cef", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_stake_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "not_null_core__fact_stake_events_BLOCK_TIMESTAMP", "alias": "fact_stake_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/not_null_core__fact_stake_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.687655, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_stake_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_stake_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.negative_one_core__fact_stake_events_DIM_BLOCK_ID.c03f6426e6": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_stake_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_stake_events_DIM_BLOCK_ID.c03f6426e6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_stake_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "negative_one_core__fact_stake_events_DIM_BLOCK_ID", "alias": "fact_stake_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/negative_one_core__fact_stake_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.68876, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_stake_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_stake_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.not_null_core__fact_stake_events_POOL_NAME.7488aed911": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_stake_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_core__fact_stake_events_POOL_NAME.7488aed911", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_stake_events_POOL_NAME.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "not_null_core__fact_stake_events_POOL_NAME", "alias": "fact_stake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/not_null_core__fact_stake_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.690594, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_stake_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_stake_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.not_null_core__fact_stake_events_ASSET_E8.2157ab7e87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_stake_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_stake_events_ASSET_E8.2157ab7e87", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_stake_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "not_null_core__fact_stake_events_ASSET_E8", "alias": "fact_stake_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/not_null_core__fact_stake_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.6917288, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_stake_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_stake_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.not_null_core__fact_stake_events_STAKE_UNITS.ee869aff9b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_stake_events_STAKE_UNITS"], "unique_id": "test.thorchain_models.not_null_core__fact_stake_events_STAKE_UNITS.ee869aff9b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_stake_events_STAKE_UNITS.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "not_null_core__fact_stake_events_STAKE_UNITS", "alias": "fact_stake_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/not_null_core__fact_stake_events_STAKE_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.692713, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_stake_events\nwhere STAKE_UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_stake_events_STAKE_UNITS", "column_name": "STAKE_UNITS", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.not_null_core__fact_stake_events_RUNE_E8.5294209fc4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_stake_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_stake_events_RUNE_E8.5294209fc4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_stake_events_RUNE_E8.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "not_null_core__fact_stake_events_RUNE_E8", "alias": "fact_stake_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/not_null_core__fact_stake_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.693693, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_stake_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_stake_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.not_null_core__fact_stake_events__ASSET_IN_RUNE_E8.042c769f0e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_ASSET_IN_RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_stake_events__ASSET_IN_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_stake_events__ASSET_IN_RUNE_E8.042c769f0e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_stake_events__ASSET_IN_RUNE_E8.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "not_null_core__fact_stake_events__ASSET_IN_RUNE_E8", "alias": "fact_stake_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/not_null_core__fact_stake_events__ASSET_IN_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.694612, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_stake_events\nwhere _ASSET_IN_RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_stake_events", "column_name": "_ASSET_IN_RUNE_E8", "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_stake_events_FACT_STAKE_EVENTS_ID.3539c13338": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_1f1d79afd2eafa79b3eb43bf30986e77\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_STAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_1f1d79afd2eafa79b3eb43bf30986e77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_stake_events_FACT_STAKE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_stake_events_FACT_STAKE_EVENTS_ID.3539c13338", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_1f1d79afd2eafa79b3eb43bf30986e77.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "dbt_constraints_primary_key_core__fact_stake_events_FACT_STAKE_EVENTS_ID", "alias": "fact_stake_events_FACT_STAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/dbt_constraints_primary_key_co_1f1d79afd2eafa79b3eb43bf30986e77.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_1f1d79afd2eafa79b3eb43bf30986e77"}, "created_at": 1665513503.696032, "compiled_sql": "with validation_errors as (\n    select\n        FACT_STAKE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_stake_events\n    group by FACT_STAKE_EVENTS_ID\n    having count(*) > 1\n        or FACT_STAKE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_stake_events_FACT_STAKE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.11c16f16f2": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_0e8cfbce8721ab0dc5f3f9a1f279df00\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_stake_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_stake_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_0e8cfbce8721ab0dc5f3f9a1f279df00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.11c16f16f2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_0e8cfbce8721ab0dc5f3f9a1f279df00.sql", "original_file_path": "models/core/core__fact_stake_events.yml", "name": "dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_stake_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_stake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_stake_events.yml/dbt_constraints_foreign_key_co_0e8cfbce8721ab0dc5f3f9a1f279df00.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_0e8cfbce8721ab0dc5f3f9a1f279df00"}, "created_at": 1665513503.698299, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_stake_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_stake_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_stake_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bf1dfcca44": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57fd751359e97dc19b4bf05c150dfaec\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_DAILY_POOL_STATS_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_pool_stats')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_pool_stats"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57fd751359e97dc19b4bf05c150dfaec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bf1dfcca44", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_57fd751359e97dc19b4bf05c150dfaec.sql", "original_file_path": "models/core/core__fact_daily_pool_stats.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "alias": "fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_pool_stats.yml/dbt_expectations_expect_column_57fd751359e97dc19b4bf05c150dfaec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57fd751359e97dc19b4bf05c150dfaec"}, "created_at": 1665513503.707506, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_DAILY_POOL_STATS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "column_name": "FACT_DAILY_POOL_STATS_ID", "file_key_name": "models.core__fact_daily_pool_stats"}, "test.thorchain_models.unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.7da417db6b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_DAILY_POOL_STATS_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.7da417db6b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.sql", "original_file_path": "models/core/core__fact_daily_pool_stats.yml", "name": "unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "alias": "fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_pool_stats.yml/unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.709671, "compiled_sql": "\n    \n    \n\nselect\n    FACT_DAILY_POOL_STATS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_daily_pool_stats\nwhere FACT_DAILY_POOL_STATS_ID is not null\ngroup by FACT_DAILY_POOL_STATS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "column_name": "FACT_DAILY_POOL_STATS_ID", "file_key_name": "models.core__fact_daily_pool_stats"}, "test.thorchain_models.not_null_core__fact_daily_pool_stats_DAY.79d19f9f33": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_daily_pool_stats')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_pool_stats"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_pool_stats_DAY"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_pool_stats_DAY.79d19f9f33", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_pool_stats_DAY.sql", "original_file_path": "models/core/core__fact_daily_pool_stats.yml", "name": "not_null_core__fact_daily_pool_stats_DAY", "alias": "fact_daily_pool_stats_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_pool_stats.yml/not_null_core__fact_daily_pool_stats_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.710624, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_pool_stats\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_pool_stats_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_daily_pool_stats"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.33b4ea9b4d": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_0248535305ad2a5a79b74fb28bf2f8f4\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_DAILY_POOL_STATS_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_pool_stats')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_pool_stats"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_0248535305ad2a5a79b74fb28bf2f8f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.33b4ea9b4d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_0248535305ad2a5a79b74fb28bf2f8f4.sql", "original_file_path": "models/core/core__fact_daily_pool_stats.yml", "name": "dbt_constraints_primary_key_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "alias": "fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_pool_stats"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_pool_stats.yml/dbt_constraints_primary_key_co_0248535305ad2a5a79b74fb28bf2f8f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_0248535305ad2a5a79b74fb28bf2f8f4"}, "created_at": 1665513503.711456, "compiled_sql": "with validation_errors as (\n    select\n        FACT_DAILY_POOL_STATS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_daily_pool_stats\n    group by FACT_DAILY_POOL_STATS_ID\n    having count(*) > 1\n        or FACT_DAILY_POOL_STATS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID", "column_name": null, "file_key_name": "models.core__fact_daily_pool_stats"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_tvl_FACT_DAILY_TVL_ID.d572a2372f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5474d5704a35a32290d2094ce0cbd985\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_DAILY_TVL_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_tvl')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_tvl"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5474d5704a35a32290d2094ce0cbd985", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_daily_tvl_FACT_DAILY_TVL_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_tvl_FACT_DAILY_TVL_ID.d572a2372f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_5474d5704a35a32290d2094ce0cbd985.sql", "original_file_path": "models/core/core__fact_daily_tvl.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_daily_tvl_FACT_DAILY_TVL_ID", "alias": "fact_daily_tvl_FACT_DAILY_TVL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_tvl.yml/dbt_expectations_expect_column_5474d5704a35a32290d2094ce0cbd985.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5474d5704a35a32290d2094ce0cbd985"}, "created_at": 1665513503.715395, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_DAILY_TVL_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_daily_tvl_FACT_DAILY_TVL_ID", "column_name": "FACT_DAILY_TVL_ID", "file_key_name": "models.core__fact_daily_tvl"}, "test.thorchain_models.unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID.2c3cf602d7": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_DAILY_TVL_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID"], "unique_id": "test.thorchain_models.unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID.2c3cf602d7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID.sql", "original_file_path": "models/core/core__fact_daily_tvl.yml", "name": "unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID", "alias": "fact_daily_tvl_FACT_DAILY_TVL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_tvl.yml/unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.71741, "compiled_sql": "\n    \n    \n\nselect\n    FACT_DAILY_TVL_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_daily_tvl\nwhere FACT_DAILY_TVL_ID is not null\ngroup by FACT_DAILY_TVL_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_daily_tvl_FACT_DAILY_TVL_ID", "column_name": "FACT_DAILY_TVL_ID", "file_key_name": "models.core__fact_daily_tvl"}, "test.thorchain_models.not_null_core__fact_daily_tvl_DAY.144013f00d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_daily_tvl')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_tvl"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_tvl_DAY"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_tvl_DAY.144013f00d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_tvl_DAY.sql", "original_file_path": "models/core/core__fact_daily_tvl.yml", "name": "not_null_core__fact_daily_tvl_DAY", "alias": "fact_daily_tvl_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_tvl.yml/not_null_core__fact_daily_tvl_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.718314, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_tvl\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_tvl_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_daily_tvl"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_tvl_FACT_DAILY_TVL_ID.474e025c51": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_adf43ef0213c53a2c6404c5ec3d8950c\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_DAILY_TVL_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_tvl')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_tvl"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_adf43ef0213c53a2c6404c5ec3d8950c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_daily_tvl_FACT_DAILY_TVL_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_tvl_FACT_DAILY_TVL_ID.474e025c51", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_adf43ef0213c53a2c6404c5ec3d8950c.sql", "original_file_path": "models/core/core__fact_daily_tvl.yml", "name": "dbt_constraints_primary_key_core__fact_daily_tvl_FACT_DAILY_TVL_ID", "alias": "fact_daily_tvl_FACT_DAILY_TVL_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_tvl"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_tvl.yml/dbt_constraints_primary_key_co_adf43ef0213c53a2c6404c5ec3d8950c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_adf43ef0213c53a2c6404c5ec3d8950c"}, "created_at": 1665513503.719518, "compiled_sql": "with validation_errors as (\n    select\n        FACT_DAILY_TVL_ID, count(*)\n    from THORCHAIN_DEV.core.fact_daily_tvl\n    group by FACT_DAILY_TVL_ID\n    having count(*) > 1\n        or FACT_DAILY_TVL_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_daily_tvl_FACT_DAILY_TVL_ID", "column_name": null, "file_key_name": "models.core__fact_daily_tvl"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.84c78a0633": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fb48a98fea24a84a75e53ea8c6361ab9\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_event_entries')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_event_entries"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fb48a98fea24a84a75e53ea8c6361ab9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.84c78a0633", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_fb48a98fea24a84a75e53ea8c6361ab9.sql", "original_file_path": "models/core/core__fact_rewards_event_entries.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "alias": "fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_event_entries.yml/dbt_expectations_expect_column_fb48a98fea24a84a75e53ea8c6361ab9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fb48a98fea24a84a75e53ea8c6361ab9"}, "created_at": 1665513503.723119, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_REWARDS_EVENT_ENTRIES_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "file_key_name": "models.core__fact_rewards_event_entries"}, "test.thorchain_models.unique_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.615ad18aed": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_rewards_even_23dfc279c0ddd31e3148f816a4ca1410\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_event_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_event_entries"]}, "config": {"enabled": true, "alias": "unique_core__fact_rewards_even_23dfc279c0ddd31e3148f816a4ca1410", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID"], "unique_id": "test.thorchain_models.unique_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.615ad18aed", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_rewards_even_23dfc279c0ddd31e3148f816a4ca1410.sql", "original_file_path": "models/core/core__fact_rewards_event_entries.yml", "name": "unique_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "alias": "fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_event_entries.yml/unique_core__fact_rewards_even_23dfc279c0ddd31e3148f816a4ca1410.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_rewards_even_23dfc279c0ddd31e3148f816a4ca1410"}, "created_at": 1665513503.725054, "compiled_sql": "\n    \n    \n\nselect\n    FACT_REWARDS_EVENT_ENTRIES_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_rewards_event_entries\nwhere FACT_REWARDS_EVENT_ENTRIES_ID is not null\ngroup by FACT_REWARDS_EVENT_ENTRIES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "file_key_name": "models.core__fact_rewards_event_entries"}, "test.thorchain_models.not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP.dca817feb6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_rewards_event_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_event_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP.dca817feb6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_rewards_event_entries.yml", "name": "not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP", "alias": "fact_rewards_event_entries_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_event_entries.yml/not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.726143, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_rewards_event_entries where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_rewards_event_entries_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_rewards_event_entries"}, "test.thorchain_models.negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID.42b2a0096a": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_event_entries')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_event_entries"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID.42b2a0096a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_rewards_event_entries.yml", "name": "negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID", "alias": "fact_rewards_event_entries_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_event_entries.yml/negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.7271, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_rewards_event_entries where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_rewards_event_entries_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_rewards_event_entries"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.ee30c464f8": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_6014a854a5d07a1f7120003a65aecaa0\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_REWARDS_EVENT_ENTRIES_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_event_entries')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_event_entries"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_6014a854a5d07a1f7120003a65aecaa0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.ee30c464f8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_6014a854a5d07a1f7120003a65aecaa0.sql", "original_file_path": "models/core/core__fact_rewards_event_entries.yml", "name": "dbt_constraints_primary_key_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "alias": "fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_event_entries.yml/dbt_constraints_primary_key_co_6014a854a5d07a1f7120003a65aecaa0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_6014a854a5d07a1f7120003a65aecaa0"}, "created_at": 1665513503.729006, "compiled_sql": "with validation_errors as (\n    select\n        FACT_REWARDS_EVENT_ENTRIES_ID, count(*)\n    from THORCHAIN_DEV.core.fact_rewards_event_entries\n    group by FACT_REWARDS_EVENT_ENTRIES_ID\n    having count(*) > 1\n        or FACT_REWARDS_EVENT_ENTRIES_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID", "column_name": null, "file_key_name": "models.core__fact_rewards_event_entries"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7a477fe9e6": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c0019fa92ee987dcfa618a5036b1ad67\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_event_entries')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_rewards_event_entries"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c0019fa92ee987dcfa618a5036b1ad67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7a477fe9e6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_c0019fa92ee987dcfa618a5036b1ad67.sql", "original_file_path": "models/core/core__fact_rewards_event_entries.yml", "name": "dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_rewards_event_entries_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_rewards_event_entries"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_event_entries.yml/dbt_constraints_foreign_key_co_c0019fa92ee987dcfa618a5036b1ad67.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_c0019fa92ee987dcfa618a5036b1ad67"}, "created_at": 1665513503.7310212, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_rewards_event_entries\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_rewards_event_entries_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_rewards_event_entries"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.8b1a171425": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f729498f6b7565a581d66b4540b92101\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SLASH_AMOUNTS_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_amounts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_amounts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f729498f6b7565a581d66b4540b92101", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.8b1a171425", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_f729498f6b7565a581d66b4540b92101.sql", "original_file_path": "models/core/core__fact_slash_amounts.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "alias": "fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_amounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_amounts.yml/dbt_expectations_expect_column_f729498f6b7565a581d66b4540b92101.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f729498f6b7565a581d66b4540b92101"}, "created_at": 1665513503.7356281, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SLASH_AMOUNTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "column_name": "FACT_SLASH_AMOUNTS_ID", "file_key_name": "models.core__fact_slash_amounts"}, "test.thorchain_models.unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.5c35006c34": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SLASH_AMOUNTS_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_amounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_amounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.5c35006c34", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.sql", "original_file_path": "models/core/core__fact_slash_amounts.yml", "name": "unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "alias": "fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_amounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_amounts.yml/unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.737696, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SLASH_AMOUNTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_slash_amounts\nwhere FACT_SLASH_AMOUNTS_ID is not null\ngroup by FACT_SLASH_AMOUNTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "column_name": "FACT_SLASH_AMOUNTS_ID", "file_key_name": "models.core__fact_slash_amounts"}, "test.thorchain_models.not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP.739ff9d923": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_slash_amounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_amounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP.739ff9d923", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_slash_amounts.yml", "name": "not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP", "alias": "fact_slash_amounts_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_amounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_amounts.yml/not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.738671, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_slash_amounts where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_slash_amounts_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_slash_amounts"}, "test.thorchain_models.negative_one_core__fact_slash_amounts_DIM_BLOCK_ID.6a02ad62ec": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_amounts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_amounts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_slash_amounts_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_slash_amounts_DIM_BLOCK_ID.6a02ad62ec", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_slash_amounts_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_slash_amounts.yml", "name": "negative_one_core__fact_slash_amounts_DIM_BLOCK_ID", "alias": "fact_slash_amounts_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_amounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_amounts.yml/negative_one_core__fact_slash_amounts_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.739634, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_slash_amounts where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_slash_amounts_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_slash_amounts"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.0fd61f628a": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_9d5d3ea2ba31598e668d177754733b21\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SLASH_AMOUNTS_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_amounts')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_amounts"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_9d5d3ea2ba31598e668d177754733b21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.0fd61f628a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_9d5d3ea2ba31598e668d177754733b21.sql", "original_file_path": "models/core/core__fact_slash_amounts.yml", "name": "dbt_constraints_primary_key_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "alias": "fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_amounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_amounts.yml/dbt_constraints_primary_key_co_9d5d3ea2ba31598e668d177754733b21.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_9d5d3ea2ba31598e668d177754733b21"}, "created_at": 1665513503.741559, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SLASH_AMOUNTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_slash_amounts\n    group by FACT_SLASH_AMOUNTS_ID\n    having count(*) > 1\n        or FACT_SLASH_AMOUNTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_slash_amounts_FACT_SLASH_AMOUNTS_ID", "column_name": null, "file_key_name": "models.core__fact_slash_amounts"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.42a2e94cfe": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_3f25048fa12fe8f903d3e5fe498e65b4\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_amounts')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_slash_amounts"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_3f25048fa12fe8f903d3e5fe498e65b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.42a2e94cfe", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_3f25048fa12fe8f903d3e5fe498e65b4.sql", "original_file_path": "models/core/core__fact_slash_amounts.yml", "name": "dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_slash_amounts_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_slash_amounts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_amounts.yml/dbt_constraints_foreign_key_co_3f25048fa12fe8f903d3e5fe498e65b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_3f25048fa12fe8f903d3e5fe498e65b4"}, "created_at": 1665513503.7442482, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_slash_amounts\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_slash_amounts_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_slash_amounts"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.430d9c1e3d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ac1c4e27bf9bfa940b09143994d139f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "model": "{{ get_where_subquery(ref('core__fact_total_value_locked')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_value_locked"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ac1c4e27bf9bfa940b09143994d139f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.430d9c1e3d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_3ac1c4e27bf9bfa940b09143994d139f.sql", "original_file_path": "models/core/core__fact_total_value_locked.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "alias": "fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_value_locked.yml/dbt_expectations_expect_column_3ac1c4e27bf9bfa940b09143994d139f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3ac1c4e27bf9bfa940b09143994d139f"}, "created_at": 1665513503.748353, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TOTAL_VALUE_LOCKED_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "file_key_name": "models.core__fact_total_value_locked"}, "test.thorchain_models.unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.36125ed401": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "model": "{{ get_where_subquery(ref('core__fact_total_value_locked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID"], "unique_id": "test.thorchain_models.unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.36125ed401", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.sql", "original_file_path": "models/core/core__fact_total_value_locked.yml", "name": "unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "alias": "fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_value_locked.yml/unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.750301, "compiled_sql": "\n    \n    \n\nselect\n    FACT_TOTAL_VALUE_LOCKED_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_total_value_locked\nwhere FACT_TOTAL_VALUE_LOCKED_ID is not null\ngroup by FACT_TOTAL_VALUE_LOCKED_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "file_key_name": "models.core__fact_total_value_locked"}, "test.thorchain_models.not_null_core__fact_total_value_locked_DAY.a3c0275ca5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_total_value_locked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_total_value_locked_DAY"], "unique_id": "test.thorchain_models.not_null_core__fact_total_value_locked_DAY.a3c0275ca5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_total_value_locked_DAY.sql", "original_file_path": "models/core/core__fact_total_value_locked.yml", "name": "not_null_core__fact_total_value_locked_DAY", "alias": "fact_total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_value_locked.yml/not_null_core__fact_total_value_locked_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.7511091, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_total_value_locked\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_total_value_locked_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_total_value_locked"}, "test.thorchain_models.unique_core__fact_total_value_locked_DAY.61d685d8a4": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_total_value_locked')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_value_locked"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_total_value_locked_DAY"], "unique_id": "test.thorchain_models.unique_core__fact_total_value_locked_DAY.61d685d8a4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_total_value_locked_DAY.sql", "original_file_path": "models/core/core__fact_total_value_locked.yml", "name": "unique_core__fact_total_value_locked_DAY", "alias": "fact_total_value_locked_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_value_locked.yml/unique_core__fact_total_value_locked_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.751882, "compiled_sql": "\n    \n    \n\nselect\n    DAY as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_total_value_locked\nwhere DAY is not null\ngroup by DAY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_total_value_locked_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_total_value_locked"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.adc40e4d8b": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_aa8a0d064809c8bc0034bb3fa39b5186\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TOTAL_VALUE_LOCKED_ID", "model": "{{ get_where_subquery(ref('core__fact_total_value_locked')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_total_value_locked"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_aa8a0d064809c8bc0034bb3fa39b5186", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.adc40e4d8b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_aa8a0d064809c8bc0034bb3fa39b5186.sql", "original_file_path": "models/core/core__fact_total_value_locked.yml", "name": "dbt_constraints_primary_key_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "alias": "fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_total_value_locked"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_total_value_locked.yml/dbt_constraints_primary_key_co_aa8a0d064809c8bc0034bb3fa39b5186.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_aa8a0d064809c8bc0034bb3fa39b5186"}, "created_at": 1665513503.752778, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TOTAL_VALUE_LOCKED_ID, count(*)\n    from THORCHAIN_DEV.core.fact_total_value_locked\n    group by FACT_TOTAL_VALUE_LOCKED_ID\n    having count(*) > 1\n        or FACT_TOTAL_VALUE_LOCKED_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID", "column_name": null, "file_key_name": "models.core__fact_total_value_locked"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.c7cd9bd890": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_763008dc8932d5fbbb6b0ea334144033\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_LIQUIDITY_ACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_763008dc8932d5fbbb6b0ea334144033", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.c7cd9bd890", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_763008dc8932d5fbbb6b0ea334144033.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "alias": "fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/dbt_expectations_expect_column_763008dc8932d5fbbb6b0ea334144033.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_763008dc8932d5fbbb6b0ea334144033"}, "created_at": 1665513503.758822, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_LIQUIDITY_ACTIONS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "column_name": "FACT_LIQUIDITY_ACTIONS_ID", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.a5ce678100": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_LIQUIDITY_ACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.a5ce678100", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "alias": "fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.760959, "compiled_sql": "\n    \n    \n\nselect\n    FACT_LIQUIDITY_ACTIONS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_liquidity_actions\nwhere FACT_LIQUIDITY_ACTIONS_ID is not null\ngroup by FACT_LIQUIDITY_ACTIONS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "column_name": "FACT_LIQUIDITY_ACTIONS_ID", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP.fcc1d0d04d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP.fcc1d0d04d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP", "alias": "fact_liquidity_actions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.762115, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_liquidity_actions where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_liquidity_actions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID.e9c8df3ac6": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID.e9c8df3ac6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID", "alias": "fact_liquidity_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.763094, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_liquidity_actions where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_liquidity_actions_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.not_null_core__fact_liquidity_actions_LP_ACTION.0f14e22b29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LP_ACTION", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_liquidity_actions_LP_ACTION"], "unique_id": "test.thorchain_models.not_null_core__fact_liquidity_actions_LP_ACTION.0f14e22b29", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_liquidity_actions_LP_ACTION.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "not_null_core__fact_liquidity_actions_LP_ACTION", "alias": "fact_liquidity_actions_LP_ACTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/not_null_core__fact_liquidity_actions_LP_ACTION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.765024, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_liquidity_actions\nwhere LP_ACTION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_liquidity_actions_LP_ACTION", "column_name": "LP_ACTION", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.not_null_core__fact_liquidity_actions_POOL_NAME.0b15bea905": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_liquidity_actions_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_core__fact_liquidity_actions_POOL_NAME.0b15bea905", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_liquidity_actions_POOL_NAME.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "not_null_core__fact_liquidity_actions_POOL_NAME", "alias": "fact_liquidity_actions_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/not_null_core__fact_liquidity_actions_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.7658088, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_liquidity_actions\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_liquidity_actions_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT.62083241ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_liquidity_actions_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT.62083241ea", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_liquidity_actions_RUNE_AMOUNT.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "not_null_core__fact_liquidity_actions_RUNE_AMOUNT", "alias": "fact_liquidity_actions_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/not_null_core__fact_liquidity_actions_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.766627, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_liquidity_actions\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_liquidity_actions_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD.240e9b87a5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD.240e9b87a5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD", "alias": "fact_liquidity_actions_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.767551, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_liquidity_actions\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_liquidity_actions_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.not_null_core__fact_liquidity_actions_ASSET_AMOUNT.fb54932835": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_liquidity_actions_ASSET_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_liquidity_actions_ASSET_AMOUNT.fb54932835", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_liquidity_actions_ASSET_AMOUNT.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "not_null_core__fact_liquidity_actions_ASSET_AMOUNT", "alias": "fact_liquidity_actions_ASSET_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/not_null_core__fact_liquidity_actions_ASSET_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.768321, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_liquidity_actions\nwhere ASSET_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_liquidity_actions_ASSET_AMOUNT", "column_name": "ASSET_AMOUNT", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.not_null_core__fact_liquidity_actions_STAKE_UNITS.c67659b61d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_liquidity_actions_STAKE_UNITS"], "unique_id": "test.thorchain_models.not_null_core__fact_liquidity_actions_STAKE_UNITS.c67659b61d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_liquidity_actions_STAKE_UNITS.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "not_null_core__fact_liquidity_actions_STAKE_UNITS", "alias": "fact_liquidity_actions_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/not_null_core__fact_liquidity_actions_STAKE_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.769086, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_liquidity_actions\nwhere STAKE_UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_liquidity_actions_STAKE_UNITS", "column_name": "STAKE_UNITS", "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.b429402606": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_c5f1d55e040d0d1ef5406ca7074756dd\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_LIQUIDITY_ACTIONS_ID", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_c5f1d55e040d0d1ef5406ca7074756dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.b429402606", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_c5f1d55e040d0d1ef5406ca7074756dd.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "dbt_constraints_primary_key_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "alias": "fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/dbt_constraints_primary_key_co_c5f1d55e040d0d1ef5406ca7074756dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_c5f1d55e040d0d1ef5406ca7074756dd"}, "created_at": 1665513503.7698948, "compiled_sql": "with validation_errors as (\n    select\n        FACT_LIQUIDITY_ACTIONS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_liquidity_actions\n    group by FACT_LIQUIDITY_ACTIONS_ID\n    having count(*) > 1\n        or FACT_LIQUIDITY_ACTIONS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID", "column_name": null, "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cab10fa844": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_3085ce03257502023799adfc2dada185\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_liquidity_actions')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_liquidity_actions"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_3085ce03257502023799adfc2dada185", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cab10fa844", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_3085ce03257502023799adfc2dada185.sql", "original_file_path": "models/core/core__fact_liquidity_actions.yml", "name": "dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_liquidity_actions_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_liquidity_actions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_liquidity_actions.yml/dbt_constraints_foreign_key_co_3085ce03257502023799adfc2dada185.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_3085ce03257502023799adfc2dada185"}, "created_at": 1665513503.7721238, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_liquidity_actions\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_liquidity_actions_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_liquidity_actions"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.76d4b75985": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9bf09f1e27dfd102549d4983051558b5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9bf09f1e27dfd102549d4983051558b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.76d4b75985", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_9bf09f1e27dfd102549d4983051558b5.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "alias": "fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/dbt_expectations_expect_column_9bf09f1e27dfd102549d4983051558b5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9bf09f1e27dfd102549d4983051558b5"}, "created_at": 1665513503.776404, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "column_name": "FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.unique_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.7dc09914ae": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_asgard_fund__08b87afe44bcef1ffa775f732dfb3d4e\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_asgard_fund__08b87afe44bcef1ffa775f732dfb3d4e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.7dc09914ae", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_asgard_fund__08b87afe44bcef1ffa775f732dfb3d4e.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "unique_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "alias": "fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/unique_core__fact_asgard_fund__08b87afe44bcef1ffa775f732dfb3d4e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_asgard_fund__08b87afe44bcef1ffa775f732dfb3d4e"}, "created_at": 1665513503.77825, "compiled_sql": "\n    \n    \n\nselect\n    FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\nwhere FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID is not null\ngroup by FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "column_name": "FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.953acd01a8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\",alias=\"not_null_core__fact_asgard_fun_79a871f99cca09f7e92de77c8c407a3c\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": "not_null_core__fact_asgard_fun_79a871f99cca09f7e92de77c8c407a3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.953acd01a8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_asgard_fun_79a871f99cca09f7e92de77c8c407a3c.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "not_null_core__fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP", "alias": "fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/not_null_core__fact_asgard_fun_79a871f99cca09f7e92de77c8c407a3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "not_null_core__fact_asgard_fun_79a871f99cca09f7e92de77c8c407a3c", "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.7793589, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.negative_one_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID.514a6714b7": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\",alias=\"negative_one_core__fact_asgard_10de419e88ff0ebe56c49af18a26aa63\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": "negative_one_core__fact_asgard_10de419e88ff0ebe56c49af18a26aa63", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID.514a6714b7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_asgard_10de419e88ff0ebe56c49af18a26aa63.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "negative_one_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID", "alias": "fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/negative_one_core__fact_asgard_10de419e88ff0ebe56c49af18a26aa63.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "alias": "negative_one_core__fact_asgard_10de419e88ff0ebe56c49af18a26aa63"}, "created_at": 1665513503.780333, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET.6b2b37418a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_asgard_fund_yggdrasil_events_ASSET"], "unique_id": "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET.6b2b37418a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_asgard_fund_yggdrasil_events_ASSET.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "not_null_core__fact_asgard_fund_yggdrasil_events_ASSET", "alias": "fact_asgard_fund_yggdrasil_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/not_null_core__fact_asgard_fund_yggdrasil_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.782254, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_asgard_fund_yggdrasil_events_ASSET", "column_name": "ASSET", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID.5a02945c6c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID.5a02945c6c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID", "alias": "fact_asgard_fund_yggdrasil_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.783042, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_asgard_fund_yggdrasil_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY.1122e02dde": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VAULT_KEY", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY"], "unique_id": "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY.1122e02dde", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY", "alias": "fact_asgard_fund_yggdrasil_events_VAULT_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.783838, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\nwhere VAULT_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_asgard_fund_yggdrasil_events_VAULT_KEY", "column_name": "VAULT_KEY", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8.77ddd0d9cc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8.77ddd0d9cc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8", "alias": "fact_asgard_fund_yggdrasil_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.784746, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_asgard_fund_yggdrasil_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.a2b34c5de2": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_91de2768836cff11cd26f9169970c687\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_91de2768836cff11cd26f9169970c687", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.a2b34c5de2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_91de2768836cff11cd26f9169970c687.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "dbt_constraints_primary_key_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "alias": "fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/dbt_constraints_primary_key_co_91de2768836cff11cd26f9169970c687.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_91de2768836cff11cd26f9169970c687"}, "created_at": 1665513503.7855182, "compiled_sql": "with validation_errors as (\n    select\n        FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\n    group by FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID\n    having count(*) > 1\n        or FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.131c30ab41": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_dcdfb56e694a4855dab58205fd7306ec\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_asgard_fund_yggdrasil_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_dcdfb56e694a4855dab58205fd7306ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.131c30ab41", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_dcdfb56e694a4855dab58205fd7306ec.sql", "original_file_path": "models/core/core__fact_asgard_fund_yggdrasil_events.yml", "name": "dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_asgard_fund_yggdrasil_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_asgard_fund_yggdrasil_events.yml/dbt_constraints_foreign_key_co_dcdfb56e694a4855dab58205fd7306ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_dcdfb56e694a4855dab58205fd7306ec"}, "created_at": 1665513503.7875772, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_asgard_fund_yggdrasil_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_asgard_fund_yggdrasil_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.a1b466628e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cb674d7f05fa800ba8454f4ad5dea79a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_UNSTAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cb674d7f05fa800ba8454f4ad5dea79a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.a1b466628e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_cb674d7f05fa800ba8454f4ad5dea79a.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "alias": "fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/dbt_expectations_expect_column_cb674d7f05fa800ba8454f4ad5dea79a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cb674d7f05fa800ba8454f4ad5dea79a"}, "created_at": 1665513503.793487, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_UNSTAKE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "column_name": "FACT_UNSTAKE_EVENTS_ID", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.0cc77688fa": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_UNSTAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.0cc77688fa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "alias": "fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.79542, "compiled_sql": "\n    \n    \n\nselect\n    FACT_UNSTAKE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere FACT_UNSTAKE_EVENTS_ID is not null\ngroup by FACT_UNSTAKE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "column_name": "FACT_UNSTAKE_EVENTS_ID", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_BLOCK_TIMESTAMP.8136e6be75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_BLOCK_TIMESTAMP.8136e6be75", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_BLOCK_TIMESTAMP", "alias": "fact_unstake_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.7964091, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_unstake_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.negative_one_core__fact_unstake_events_DIM_BLOCK_ID.b26729596b": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_unstake_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_unstake_events_DIM_BLOCK_ID.b26729596b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_unstake_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "negative_one_core__fact_unstake_events_DIM_BLOCK_ID", "alias": "fact_unstake_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/negative_one_core__fact_unstake_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.797366, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_unstake_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_unstake_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_TX_ID.70178dcbe6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_TX_ID.70178dcbe6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_TX_ID.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_TX_ID", "alias": "fact_unstake_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.799241, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_BLOCKCHAIN.23ab48dc4e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_BLOCKCHAIN.23ab48dc4e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_BLOCKCHAIN.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_BLOCKCHAIN", "alias": "fact_unstake_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8000379, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_FROM_ADDRESS.f36fc22ab1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_FROM_ADDRESS.f36fc22ab1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_FROM_ADDRESS.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_FROM_ADDRESS", "alias": "fact_unstake_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.800819, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_TO_ADDRESS.e270afa919": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_TO_ADDRESS.e270afa919", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_TO_ADDRESS.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_TO_ADDRESS", "alias": "fact_unstake_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.801721, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_ASSET_E8.ec0bbb0520": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_ASSET_E8.ec0bbb0520", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_ASSET_E8", "alias": "fact_unstake_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.80249, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_ASSET_E8.0bb6810b7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_EMIT_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_ASSET_E8.0bb6810b7c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_EMIT_ASSET_E8.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_EMIT_ASSET_E8", "alias": "fact_unstake_events_EMIT_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_EMIT_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.803251, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere EMIT_ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_EMIT_ASSET_E8", "column_name": "EMIT_ASSET_E8", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_RUNE_E8.9f4450744c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EMIT_RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_EMIT_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_RUNE_E8.9f4450744c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_EMIT_RUNE_E8.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_EMIT_RUNE_E8", "alias": "fact_unstake_events_EMIT_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_EMIT_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.804139, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere EMIT_RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_EMIT_RUNE_E8", "column_name": "EMIT_RUNE_E8", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_MEMO.f9a42c16dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_MEMO"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_MEMO.f9a42c16dd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_MEMO.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_MEMO", "alias": "fact_unstake_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_MEMO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.804917, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere MEMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_MEMO", "column_name": "MEMO", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_POOL_NAME.636cd2e3c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_POOL_NAME.636cd2e3c5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_POOL_NAME.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_POOL_NAME", "alias": "fact_unstake_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8056781, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_STAKE_UNITS.7b40a80e8c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STAKE_UNITS", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_STAKE_UNITS"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_STAKE_UNITS.7b40a80e8c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_STAKE_UNITS.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_STAKE_UNITS", "alias": "fact_unstake_events_STAKE_UNITS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_STAKE_UNITS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.806452, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere STAKE_UNITS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_STAKE_UNITS", "column_name": "STAKE_UNITS", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_BASIS_POINTS.d404deb2ce": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BASIS_POINTS", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_BASIS_POINTS"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_BASIS_POINTS.d404deb2ce", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_BASIS_POINTS.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_BASIS_POINTS", "alias": "fact_unstake_events_BASIS_POINTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_BASIS_POINTS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.80732, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere BASIS_POINTS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_BASIS_POINTS", "column_name": "BASIS_POINTS", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_ASYMMETRY.a0a65d3a9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASYMMETRY", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_ASYMMETRY"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_ASYMMETRY.a0a65d3a9f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_ASYMMETRY.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_ASYMMETRY", "alias": "fact_unstake_events_ASYMMETRY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_ASYMMETRY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.808088, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere ASYMMETRY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_ASYMMETRY", "column_name": "ASYMMETRY", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8.9cbcefb510": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IMP_LOSS_PROTECTION_E8", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8.9cbcefb510", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8", "alias": "fact_unstake_events_IMP_LOSS_PROTECTION_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.808853, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere IMP_LOSS_PROTECTION_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events_IMP_LOSS_PROTECTION_E8", "column_name": "IMP_LOSS_PROTECTION_E8", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8.3b40309e5d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_EMIT_ASSET_IN_RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8.3b40309e5d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8", "alias": "fact_unstake_events", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.809611, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_unstake_events\nwhere _EMIT_ASSET_IN_RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_unstake_events", "column_name": "_EMIT_ASSET_IN_RUNE_E8", "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.1a4354b9b5": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_6ab6411d3a372ffedb31d8a1493527a6\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_UNSTAKE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_6ab6411d3a372ffedb31d8a1493527a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.1a4354b9b5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_6ab6411d3a372ffedb31d8a1493527a6.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "dbt_constraints_primary_key_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "alias": "fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/dbt_constraints_primary_key_co_6ab6411d3a372ffedb31d8a1493527a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_6ab6411d3a372ffedb31d8a1493527a6"}, "created_at": 1665513503.810488, "compiled_sql": "with validation_errors as (\n    select\n        FACT_UNSTAKE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_unstake_events\n    group by FACT_UNSTAKE_EVENTS_ID\n    having count(*) > 1\n        or FACT_UNSTAKE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_unstake_events_FACT_UNSTAKE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c5326ea89a": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_b6344e1018c750ea007158efd632605a\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_unstake_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_unstake_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_b6344e1018c750ea007158efd632605a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c5326ea89a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_b6344e1018c750ea007158efd632605a.sql", "original_file_path": "models/core/core__fact_unstake_events.yml", "name": "dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_unstake_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_unstake_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_unstake_events.yml/dbt_constraints_foreign_key_co_b6344e1018c750ea007158efd632605a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_b6344e1018c750ea007158efd632605a"}, "created_at": 1665513503.812438, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_unstake_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_unstake_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_unstake_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_MIMIR_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_mimir_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb.sql", "original_file_path": "models/core/core__fact_set_mimir_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "alias": "fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_mimir_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_mimir_events.yml/dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c18dd502ec242a553432f5af802239eb"}, "created_at": 1665513503.816293, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SET_MIMIR_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "column_name": "FACT_SET_MIMIR_EVENTS_ID", "file_key_name": "models.core__fact_set_mimir_events"}, "test.thorchain_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_MIMIR_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_mimir_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_set_mimir_events.yml", "name": "unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "alias": "fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_mimir_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_mimir_events.yml/unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8182158, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SET_MIMIR_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_set_mimir_events\nwhere FACT_SET_MIMIR_EVENTS_ID is not null\ngroup by FACT_SET_MIMIR_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "column_name": "FACT_SET_MIMIR_EVENTS_ID", "file_key_name": "models.core__fact_set_mimir_events"}, "test.thorchain_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_mimir_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_set_mimir_events.yml", "name": "not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP", "alias": "fact_set_mimir_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_mimir_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_mimir_events.yml/not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.8191721, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_set_mimir_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_set_mimir_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_set_mimir_events"}, "test.thorchain_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_mimir_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_set_mimir_events.yml", "name": "negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID", "alias": "fact_set_mimir_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_mimir_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_mimir_events.yml/negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.820121, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_set_mimir_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_set_mimir_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_set_mimir_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_MIMIR_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_mimir_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60.sql", "original_file_path": "models/core/core__fact_set_mimir_events.yml", "name": "dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "alias": "fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_mimir_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_mimir_events.yml/dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_29c36f43ef79e9701fcfa30f70faee60"}, "created_at": 1665513503.822026, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SET_MIMIR_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_set_mimir_events\n    group by FACT_SET_MIMIR_EVENTS_ID\n    having count(*) > 1\n        or FACT_SET_MIMIR_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_set_mimir_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_mimir_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_mimir_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657.sql", "original_file_path": "models/core/core__fact_set_mimir_events.yml", "name": "dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_set_mimir_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_set_mimir_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_mimir_events.yml/dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_ceea5bbfc0bb0f67adac2e7893c0f657"}, "created_at": 1665513503.8241699, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_set_mimir_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_set_mimir_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_set_mimir_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_events_FACT_BOND_EVENTS_ID.a2630ee98e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1e25cf272cd9051274ae57f8e7512990\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_BOND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1e25cf272cd9051274ae57f8e7512990", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_bond_events_FACT_BOND_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_events_FACT_BOND_EVENTS_ID.a2630ee98e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_1e25cf272cd9051274ae57f8e7512990.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_bond_events_FACT_BOND_EVENTS_ID", "alias": "fact_bond_events_FACT_BOND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/dbt_expectations_expect_column_1e25cf272cd9051274ae57f8e7512990.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1e25cf272cd9051274ae57f8e7512990"}, "created_at": 1665513503.8289611, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_BOND_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_bond_events_FACT_BOND_EVENTS_ID", "column_name": "FACT_BOND_EVENTS_ID", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.unique_core__fact_bond_events_FACT_BOND_EVENTS_ID.78891b0a95": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_BOND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_bond_events_FACT_BOND_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_bond_events_FACT_BOND_EVENTS_ID.78891b0a95", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_bond_events_FACT_BOND_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "unique_core__fact_bond_events_FACT_BOND_EVENTS_ID", "alias": "fact_bond_events_FACT_BOND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/unique_core__fact_bond_events_FACT_BOND_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.830789, "compiled_sql": "\n    \n    \n\nselect\n    FACT_BOND_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere FACT_BOND_EVENTS_ID is not null\ngroup by FACT_BOND_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_bond_events_FACT_BOND_EVENTS_ID", "column_name": "FACT_BOND_EVENTS_ID", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_BLOCK_TIMESTAMP.34d4db86ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_BLOCK_TIMESTAMP.34d4db86ea", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_BLOCK_TIMESTAMP", "alias": "fact_bond_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.8318899, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_bond_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_events_BLOCK_TIMESTAMP__day__4.a0c57cd338": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_611f73267940580b96342fc71a0331f7\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 4, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_611f73267940580b96342fc71a0331f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_events_BLOCK_TIMESTAMP__day__4"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_events_BLOCK_TIMESTAMP__day__4.a0c57cd338", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_611f73267940580b96342fc71a0331f7.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_events_BLOCK_TIMESTAMP__day__4", "alias": "fact_bond_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/dbt_expectations_expect_row_va_611f73267940580b96342fc71a0331f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_611f73267940580b96342fc71a0331f7"}, "created_at": 1665513503.8326988, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.core.fact_bond_events\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -4,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_bond_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.negative_one_core__fact_bond_events_DIM_BLOCK_ID.b9ebee0e49": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_bond_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_bond_events_DIM_BLOCK_ID.b9ebee0e49", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_bond_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "negative_one_core__fact_bond_events_DIM_BLOCK_ID", "alias": "fact_bond_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/negative_one_core__fact_bond_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.835527, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_bond_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_bond_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_TX_ID.7cfaf64395": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_TX_ID.7cfaf64395", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_TX_ID.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_TX_ID", "alias": "fact_bond_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8374112, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_BLOCKCHAIN.b6e16a540a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_BLOCKCHAIN.b6e16a540a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_BLOCKCHAIN.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_BLOCKCHAIN", "alias": "fact_bond_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.838206, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_FROM_ADDRESS.7bd47d477d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_FROM_ADDRESS.7bd47d477d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_FROM_ADDRESS.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_FROM_ADDRESS", "alias": "fact_bond_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.83916, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_TO_ADDRESS.754c40a736": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_TO_ADDRESS.754c40a736", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_TO_ADDRESS.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_TO_ADDRESS", "alias": "fact_bond_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.840168, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_ASSET_E8.c772a5c1a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_ASSET_E8.c772a5c1a6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_ASSET_E8", "alias": "fact_bond_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.840956, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_MEMO.072a694836": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_MEMO"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_MEMO.072a694836", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_MEMO.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_MEMO", "alias": "fact_bond_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_MEMO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8417559, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere MEMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_MEMO", "column_name": "MEMO", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_bond_type.a7351dce4e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "bond_type", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_bond_type"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_bond_type.a7351dce4e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_bond_type.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_bond_type", "alias": "fact_bond_events_bond_type", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_bond_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8426461, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere bond_type is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_bond_type", "column_name": "bond_type", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.not_null_core__fact_bond_events_E8.a6cea49857": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "E8", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_bond_events_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_bond_events_E8.a6cea49857", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_bond_events_E8.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "not_null_core__fact_bond_events_E8", "alias": "fact_bond_events_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/not_null_core__fact_bond_events_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.843411, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_bond_events\nwhere E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_bond_events_E8", "column_name": "E8", "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_events_FACT_BOND_EVENTS_ID.00c70aabf8": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_34a19b3c37af21ed4b6461c7370363c1\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_BOND_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_34a19b3c37af21ed4b6461c7370363c1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_bond_events_FACT_BOND_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_events_FACT_BOND_EVENTS_ID.00c70aabf8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_34a19b3c37af21ed4b6461c7370363c1.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "dbt_constraints_primary_key_core__fact_bond_events_FACT_BOND_EVENTS_ID", "alias": "fact_bond_events_FACT_BOND_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/dbt_constraints_primary_key_co_34a19b3c37af21ed4b6461c7370363c1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_34a19b3c37af21ed4b6461c7370363c1"}, "created_at": 1665513503.844203, "compiled_sql": "with validation_errors as (\n    select\n        FACT_BOND_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_bond_events\n    group by FACT_BOND_EVENTS_ID\n    having count(*) > 1\n        or FACT_BOND_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_bond_events_FACT_BOND_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1892d1fe78": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_47b3bf16c1d806d923cd9c25f66943cf\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_bond_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_bond_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_47b3bf16c1d806d923cd9c25f66943cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1892d1fe78", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_47b3bf16c1d806d923cd9c25f66943cf.sql", "original_file_path": "models/core/core__fact_bond_events.yml", "name": "dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_bond_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_bond_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_bond_events.yml/dbt_constraints_foreign_key_co_47b3bf16c1d806d923cd9c25f66943cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_47b3bf16c1d806d923cd9c25f66943cf"}, "created_at": 1665513503.846369, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_bond_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_bond_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_bond_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID", "alias": "fact_transfers_FACT_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f33033eedca544790d34a7e1504c10b5"}, "created_at": 1665513503.850668, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TRANSFERS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_FACT_TRANSFERS_ID", "column_name": "FACT_TRANSFERS_ID", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_transfers_FACT_TRANSFERS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_transfers_FACT_TRANSFERS_ID.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "unique_core__fact_transfers_FACT_TRANSFERS_ID", "alias": "fact_transfers_FACT_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/unique_core__fact_transfers_FACT_TRANSFERS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8525388, "compiled_sql": "\n    \n    \n\nselect\n    FACT_TRANSFERS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_transfers\nwhere FACT_TRANSFERS_ID is not null\ngroup by FACT_TRANSFERS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_transfers_FACT_TRANSFERS_ID", "column_name": "FACT_TRANSFERS_ID", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_BLOCK_TIMESTAMP", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.8536232, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_transfers where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_transfers_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_transfers_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "negative_one_core__fact_transfers_DIM_BLOCK_ID", "alias": "fact_transfers_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/negative_one_core__fact_transfers_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.854574, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_transfers where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_transfers_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfers_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfers_FROM_ADDRESS.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_FROM_ADDRESS", "alias": "fact_transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.856747, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfers\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfers_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfers_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfers_TO_ADDRESS.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_TO_ADDRESS", "alias": "fact_transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.857558, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfers_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.not_null_core__fact_transfers_ASSET.77d44cdd84": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfers_ASSET"], "unique_id": "test.thorchain_models.not_null_core__fact_transfers_ASSET.77d44cdd84", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfers_ASSET.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_ASSET", "alias": "fact_transfers_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.85833, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfers\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfers_ASSET", "column_name": "ASSET", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT.7e2f8aa5f7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfers_RUNE_AMOUNT"], "unique_id": "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT.7e2f8aa5f7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfers_RUNE_AMOUNT.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_RUNE_AMOUNT", "alias": "fact_transfers_RUNE_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_RUNE_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.859096, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfers\nwhere RUNE_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfers_RUNE_AMOUNT", "column_name": "RUNE_AMOUNT", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT_USD.ff8abbcf19": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_AMOUNT_USD", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfers_RUNE_AMOUNT_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT_USD.ff8abbcf19", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfers_RUNE_AMOUNT_USD.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "not_null_core__fact_transfers_RUNE_AMOUNT_USD", "alias": "fact_transfers_RUNE_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/not_null_core__fact_transfers_RUNE_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.859978, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfers\nwhere RUNE_AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfers_RUNE_AMOUNT_USD", "column_name": "RUNE_AMOUNT_USD", "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSFERS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID", "alias": "fact_transfers_FACT_TRANSFERS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_bdc95aa817aa3fa7e2c463935132fed9"}, "created_at": 1665513503.8607411, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TRANSFERS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_transfers\n    group by FACT_TRANSFERS_ID\n    having count(*) > 1\n        or FACT_TRANSFERS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_transfers_FACT_TRANSFERS_ID", "column_name": null, "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792.sql", "original_file_path": "models/core/core__fact_transfers.yml", "name": "dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_transfers_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfers.yml/dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_98f70b02867a216312d9911c211ad792"}, "created_at": 1665513503.862762, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_transfers\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_transfers_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_transfers"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.702823e109": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_924a4e7e8f79b1017f87d54855caab1d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_balance_change_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_balance_change_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_924a4e7e8f79b1017f87d54855caab1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.702823e109", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_924a4e7e8f79b1017f87d54855caab1d.sql", "original_file_path": "models/core/core__fact_pool_balance_change_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "alias": "fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_balance_change_events.yml/dbt_expectations_expect_column_924a4e7e8f79b1017f87d54855caab1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_924a4e7e8f79b1017f87d54855caab1d"}, "created_at": 1665513503.866942, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_POOL_BALANCE_CHANGE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "file_key_name": "models.core__fact_pool_balance_change_events"}, "test.thorchain_models.unique_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.9782ed2131": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_pool_balance_8e3fc364316887d7a8d41da0bbdc97e3\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_balance_change_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_pool_balance_8e3fc364316887d7a8d41da0bbdc97e3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.9782ed2131", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_pool_balance_8e3fc364316887d7a8d41da0bbdc97e3.sql", "original_file_path": "models/core/core__fact_pool_balance_change_events.yml", "name": "unique_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "alias": "fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_balance_change_events.yml/unique_core__fact_pool_balance_8e3fc364316887d7a8d41da0bbdc97e3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_pool_balance_8e3fc364316887d7a8d41da0bbdc97e3"}, "created_at": 1665513503.868851, "compiled_sql": "\n    \n    \n\nselect\n    FACT_POOL_BALANCE_CHANGE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_pool_balance_change_events\nwhere FACT_POOL_BALANCE_CHANGE_EVENTS_ID is not null\ngroup by FACT_POOL_BALANCE_CHANGE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "file_key_name": "models.core__fact_pool_balance_change_events"}, "test.thorchain_models.not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP.1f2c903cd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP.1f2c903cd3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_pool_balance_change_events.yml", "name": "not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP", "alias": "fact_pool_balance_change_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_balance_change_events.yml/not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.869803, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_pool_balance_change_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_balance_change_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_pool_balance_change_events"}, "test.thorchain_models.negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID.a1549e5fe2": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_balance_change_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_balance_change_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID.a1549e5fe2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_pool_balance_change_events.yml", "name": "negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID", "alias": "fact_pool_balance_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_balance_change_events.yml/negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.8708649, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_pool_balance_change_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_pool_balance_change_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_pool_balance_change_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.7fe3cc4fa9": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_e12312f62783adeac14c8fb5d140d4a2\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_balance_change_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_balance_change_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_e12312f62783adeac14c8fb5d140d4a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.7fe3cc4fa9", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_e12312f62783adeac14c8fb5d140d4a2.sql", "original_file_path": "models/core/core__fact_pool_balance_change_events.yml", "name": "dbt_constraints_primary_key_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "alias": "fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_balance_change_events.yml/dbt_constraints_primary_key_co_e12312f62783adeac14c8fb5d140d4a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_e12312f62783adeac14c8fb5d140d4a2"}, "created_at": 1665513503.87264, "compiled_sql": "with validation_errors as (\n    select\n        FACT_POOL_BALANCE_CHANGE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_pool_balance_change_events\n    group by FACT_POOL_BALANCE_CHANGE_EVENTS_ID\n    having count(*) > 1\n        or FACT_POOL_BALANCE_CHANGE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_pool_balance_change_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.029949114a": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_0fd81be29628a2fd74de4c3bb9bfff2b\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_balance_change_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pool_balance_change_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_0fd81be29628a2fd74de4c3bb9bfff2b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.029949114a", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_0fd81be29628a2fd74de4c3bb9bfff2b.sql", "original_file_path": "models/core/core__fact_pool_balance_change_events.yml", "name": "dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_pool_balance_change_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_pool_balance_change_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_balance_change_events.yml/dbt_constraints_foreign_key_co_0fd81be29628a2fd74de4c3bb9bfff2b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_0fd81be29628a2fd74de4c3bb9bfff2b"}, "created_at": 1665513503.874628, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_pool_balance_change_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_pool_balance_change_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_pool_balance_change_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.d93f22f0e1": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cfbce4d524b8a864eac2ce9bd23eae02\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_REWARDS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cfbce4d524b8a864eac2ce9bd23eae02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.d93f22f0e1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_cfbce4d524b8a864eac2ce9bd23eae02.sql", "original_file_path": "models/core/core__fact_rewards_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID", "alias": "fact_rewards_events_FACT_REWARDS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_events.yml/dbt_expectations_expect_column_cfbce4d524b8a864eac2ce9bd23eae02.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cfbce4d524b8a864eac2ce9bd23eae02"}, "created_at": 1665513503.8781922, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_REWARDS_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_rewards_events_FACT_REWARDS_EVENTS_ID", "column_name": "FACT_REWARDS_EVENTS_ID", "file_key_name": "models.core__fact_rewards_events"}, "test.thorchain_models.unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.ee7cbe3f90": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_REWARDS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.ee7cbe3f90", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_rewards_events.yml", "name": "unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID", "alias": "fact_rewards_events_FACT_REWARDS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_events.yml/unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.880102, "compiled_sql": "\n    \n    \n\nselect\n    FACT_REWARDS_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_rewards_events\nwhere FACT_REWARDS_EVENTS_ID is not null\ngroup by FACT_REWARDS_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_rewards_events_FACT_REWARDS_EVENTS_ID", "column_name": "FACT_REWARDS_EVENTS_ID", "file_key_name": "models.core__fact_rewards_events"}, "test.thorchain_models.not_null_core__fact_rewards_events_BLOCK_TIMESTAMP.03cee88918": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_rewards_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_rewards_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_rewards_events_BLOCK_TIMESTAMP.03cee88918", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_rewards_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_rewards_events.yml", "name": "not_null_core__fact_rewards_events_BLOCK_TIMESTAMP", "alias": "fact_rewards_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_events.yml/not_null_core__fact_rewards_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.8810592, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_rewards_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_rewards_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_rewards_events"}, "test.thorchain_models.negative_one_core__fact_rewards_events_DIM_BLOCK_ID.b4f9cfff33": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_rewards_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_rewards_events_DIM_BLOCK_ID.b4f9cfff33", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_rewards_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_rewards_events.yml", "name": "negative_one_core__fact_rewards_events_DIM_BLOCK_ID", "alias": "fact_rewards_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_events.yml/negative_one_core__fact_rewards_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.8821068, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_rewards_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_rewards_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_rewards_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.9e85913629": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_56a323f47d40c03bac8cfd1f798aaa0e\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_REWARDS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_rewards_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_56a323f47d40c03bac8cfd1f798aaa0e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.9e85913629", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_56a323f47d40c03bac8cfd1f798aaa0e.sql", "original_file_path": "models/core/core__fact_rewards_events.yml", "name": "dbt_constraints_primary_key_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID", "alias": "fact_rewards_events_FACT_REWARDS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_events.yml/dbt_constraints_primary_key_co_56a323f47d40c03bac8cfd1f798aaa0e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_56a323f47d40c03bac8cfd1f798aaa0e"}, "created_at": 1665513503.88385, "compiled_sql": "with validation_errors as (\n    select\n        FACT_REWARDS_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_rewards_events\n    group by FACT_REWARDS_EVENTS_ID\n    having count(*) > 1\n        or FACT_REWARDS_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_rewards_events_FACT_REWARDS_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_rewards_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dd0a168223": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_a4fc4cecf39637f6145fb5f1f17572a6\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_rewards_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_rewards_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_a4fc4cecf39637f6145fb5f1f17572a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dd0a168223", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_a4fc4cecf39637f6145fb5f1f17572a6.sql", "original_file_path": "models/core/core__fact_rewards_events.yml", "name": "dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_rewards_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_rewards_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_rewards_events.yml/dbt_constraints_foreign_key_co_a4fc4cecf39637f6145fb5f1f17572a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_a4fc4cecf39637f6145fb5f1f17572a6"}, "created_at": 1665513503.8858292, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_rewards_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_rewards_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_rewards_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.41ac1e170c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad23bce47d2595be991e710c781a3b28\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ERRATA_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad23bce47d2595be991e710c781a3b28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_errata_events_FACT_ERRATA_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.41ac1e170c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_ad23bce47d2595be991e710c781a3b28.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_errata_events_FACT_ERRATA_EVENTS_ID", "alias": "fact_errata_events_FACT_ERRATA_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/dbt_expectations_expect_column_ad23bce47d2595be991e710c781a3b28.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ad23bce47d2595be991e710c781a3b28"}, "created_at": 1665513503.8902102, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_ERRATA_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_errata_events_FACT_ERRATA_EVENTS_ID", "column_name": "FACT_ERRATA_EVENTS_ID", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.ff84352521": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_ERRATA_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.ff84352521", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID", "alias": "fact_errata_events_FACT_ERRATA_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8920052, "compiled_sql": "\n    \n    \n\nselect\n    FACT_ERRATA_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_errata_events\nwhere FACT_ERRATA_EVENTS_ID is not null\ngroup by FACT_ERRATA_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_errata_events_FACT_ERRATA_EVENTS_ID", "column_name": "FACT_ERRATA_EVENTS_ID", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.not_null_core__fact_errata_events_BLOCK_TIMESTAMP.c97100b28e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_errata_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_errata_events_BLOCK_TIMESTAMP.c97100b28e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_errata_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "not_null_core__fact_errata_events_BLOCK_TIMESTAMP", "alias": "fact_errata_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/not_null_core__fact_errata_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.8930602, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_errata_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_errata_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.negative_one_core__fact_errata_events_DIM_BLOCK_ID.1e68f739d7": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_errata_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_errata_events_DIM_BLOCK_ID.1e68f739d7", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_errata_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "negative_one_core__fact_errata_events_DIM_BLOCK_ID", "alias": "fact_errata_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/negative_one_core__fact_errata_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.893994, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_errata_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_errata_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.not_null_core__fact_errata_events_ASSET_E8.9b5c938453": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_errata_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_errata_events_ASSET_E8.9b5c938453", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_errata_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "not_null_core__fact_errata_events_ASSET_E8", "alias": "fact_errata_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/not_null_core__fact_errata_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.895827, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_errata_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_errata_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.not_null_core__fact_errata_events_RUNE_E8.54a56fbeaf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_errata_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_errata_events_RUNE_E8.54a56fbeaf", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_errata_events_RUNE_E8.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "not_null_core__fact_errata_events_RUNE_E8", "alias": "fact_errata_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/not_null_core__fact_errata_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.8966138, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_errata_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_errata_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.not_null_core__fact_errata_events_IN_TX.477080ebba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IN_TX", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_errata_events_IN_TX"], "unique_id": "test.thorchain_models.not_null_core__fact_errata_events_IN_TX.477080ebba", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_errata_events_IN_TX.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "not_null_core__fact_errata_events_IN_TX", "alias": "fact_errata_events_IN_TX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/not_null_core__fact_errata_events_IN_TX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.897385, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_errata_events\nwhere IN_TX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_errata_events_IN_TX", "column_name": "IN_TX", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.not_null_core__fact_errata_events_ASSET.b77634e45d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_errata_events_ASSET"], "unique_id": "test.thorchain_models.not_null_core__fact_errata_events_ASSET.b77634e45d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_errata_events_ASSET.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "not_null_core__fact_errata_events_ASSET", "alias": "fact_errata_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/not_null_core__fact_errata_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.898258, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_errata_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_errata_events_ASSET", "column_name": "ASSET", "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.e707c17e80": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_11399b0606b1481f337e9755aa2aedb6\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ERRATA_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_11399b0606b1481f337e9755aa2aedb6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_errata_events_FACT_ERRATA_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.e707c17e80", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_11399b0606b1481f337e9755aa2aedb6.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "dbt_constraints_primary_key_core__fact_errata_events_FACT_ERRATA_EVENTS_ID", "alias": "fact_errata_events_FACT_ERRATA_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/dbt_constraints_primary_key_co_11399b0606b1481f337e9755aa2aedb6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_11399b0606b1481f337e9755aa2aedb6"}, "created_at": 1665513503.899034, "compiled_sql": "with validation_errors as (\n    select\n        FACT_ERRATA_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_errata_events\n    group by FACT_ERRATA_EVENTS_ID\n    having count(*) > 1\n        or FACT_ERRATA_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_errata_events_FACT_ERRATA_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2036706b9e": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_a05abb6ee43a8553ebc82947fb0bed5f\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_errata_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_errata_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_a05abb6ee43a8553ebc82947fb0bed5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2036706b9e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_a05abb6ee43a8553ebc82947fb0bed5f.sql", "original_file_path": "models/core/core__fact_errata_events.yml", "name": "dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_errata_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_errata_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_errata_events.yml/dbt_constraints_foreign_key_co_a05abb6ee43a8553ebc82947fb0bed5f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_a05abb6ee43a8553ebc82947fb0bed5f"}, "created_at": 1665513503.901015, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_errata_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_errata_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_errata_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_add_events_FACT_ADD_EVENTS_ID.de606e1315": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eeee467c01da13935161d9059e06b5db\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_ADD_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eeee467c01da13935161d9059e06b5db", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_add_events_FACT_ADD_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_add_events_FACT_ADD_EVENTS_ID.de606e1315", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_eeee467c01da13935161d9059e06b5db.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_add_events_FACT_ADD_EVENTS_ID", "alias": "fact_add_events_FACT_ADD_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/dbt_expectations_expect_column_eeee467c01da13935161d9059e06b5db.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_eeee467c01da13935161d9059e06b5db"}, "created_at": 1665513503.905348, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_ADD_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_add_events_FACT_ADD_EVENTS_ID", "column_name": "FACT_ADD_EVENTS_ID", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.unique_core__fact_add_events_FACT_ADD_EVENTS_ID.8d1a660963": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_ADD_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_add_events_FACT_ADD_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_add_events_FACT_ADD_EVENTS_ID.8d1a660963", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_add_events_FACT_ADD_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "unique_core__fact_add_events_FACT_ADD_EVENTS_ID", "alias": "fact_add_events_FACT_ADD_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/unique_core__fact_add_events_FACT_ADD_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.907252, "compiled_sql": "\n    \n    \n\nselect\n    FACT_ADD_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere FACT_ADD_EVENTS_ID is not null\ngroup by FACT_ADD_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_add_events_FACT_ADD_EVENTS_ID", "column_name": "FACT_ADD_EVENTS_ID", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_BLOCK_TIMESTAMP.317eaa7011": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_BLOCK_TIMESTAMP.317eaa7011", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_BLOCK_TIMESTAMP", "alias": "fact_add_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.90819, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_add_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.negative_one_core__fact_add_events_DIM_BLOCK_ID.bb11c4e182": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_add_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_add_events_DIM_BLOCK_ID.bb11c4e182", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_add_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "negative_one_core__fact_add_events_DIM_BLOCK_ID", "alias": "fact_add_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/negative_one_core__fact_add_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.909257, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_add_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_add_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_RUNE_E8.aaf3acc2cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_RUNE_E8.aaf3acc2cd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_RUNE_E8.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_RUNE_E8", "alias": "fact_add_events_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9110148, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_BLOCKCHAIN.7481d9c56f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_BLOCKCHAIN"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_BLOCKCHAIN.7481d9c56f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_BLOCKCHAIN.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_BLOCKCHAIN", "alias": "fact_add_events_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9119308, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_ASSET_E8.9f929cee48": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_ASSET_E8.9f929cee48", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_ASSET_E8", "alias": "fact_add_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.912698, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_POOL_NAME.b5011ead86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_POOL_NAME.b5011ead86", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_POOL_NAME.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_POOL_NAME", "alias": "fact_add_events_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.913462, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_MEMO.addbd52004": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MEMO", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_MEMO"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_MEMO.addbd52004", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_MEMO.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_MEMO", "alias": "fact_add_events_MEMO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_MEMO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.914338, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere MEMO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_MEMO", "column_name": "MEMO", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_TO_ADDRESS.f50de208a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_TO_ADDRESS.f50de208a1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_TO_ADDRESS.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_TO_ADDRESS", "alias": "fact_add_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.915112, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.not_null_core__fact_add_events_FROM_ADDRESS.63f6b7ffe8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_add_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_add_events_FROM_ADDRESS.63f6b7ffe8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_add_events_FROM_ADDRESS.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "not_null_core__fact_add_events_FROM_ADDRESS", "alias": "fact_add_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/not_null_core__fact_add_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.915873, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_add_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_add_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_add_events_FACT_ADD_EVENTS_ID.7afacbf523": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_7436591a6d4020b4663a76d218fa3cfc\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_ADD_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_7436591a6d4020b4663a76d218fa3cfc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_add_events_FACT_ADD_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_add_events_FACT_ADD_EVENTS_ID.7afacbf523", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_7436591a6d4020b4663a76d218fa3cfc.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "dbt_constraints_primary_key_core__fact_add_events_FACT_ADD_EVENTS_ID", "alias": "fact_add_events_FACT_ADD_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/dbt_constraints_primary_key_co_7436591a6d4020b4663a76d218fa3cfc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_7436591a6d4020b4663a76d218fa3cfc"}, "created_at": 1665513503.916644, "compiled_sql": "with validation_errors as (\n    select\n        FACT_ADD_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_add_events\n    group by FACT_ADD_EVENTS_ID\n    having count(*) > 1\n        or FACT_ADD_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_add_events_FACT_ADD_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38dcabe04d": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c82ce846b9813749356b0710770f8333\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_add_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_add_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c82ce846b9813749356b0710770f8333", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38dcabe04d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_c82ce846b9813749356b0710770f8333.sql", "original_file_path": "models/core/core__fact_add_events.yml", "name": "dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_add_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_add_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_add_events.yml/dbt_constraints_foreign_key_co_c82ce846b9813749356b0710770f8333.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_c82ce846b9813749356b0710770f8333"}, "created_at": 1665513503.918638, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_add_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_add_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_add_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_TRANSFER_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "alias": "fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3f78b096af622f5460bee906bf38ec62"}, "created_at": 1665513503.9229598, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_TRANSFER_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "column_name": "FACT_TRANSFER_EVENTS_ID", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_TRANSFER_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "alias": "fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.924762, "compiled_sql": "\n    \n    \n\nselect\n    FACT_TRANSFER_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_transfer_events\nwhere FACT_TRANSFER_EVENTS_ID is not null\ngroup by FACT_TRANSFER_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "column_name": "FACT_TRANSFER_EVENTS_ID", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfer_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "not_null_core__fact_transfer_events_BLOCK_TIMESTAMP", "alias": "fact_transfer_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.925832, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_transfer_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfer_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_transfer_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_transfer_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "negative_one_core__fact_transfer_events_DIM_BLOCK_ID", "alias": "fact_transfer_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/negative_one_core__fact_transfer_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.92697, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_transfer_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_transfer_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfer_events_FROM_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfer_events_FROM_ADDRESS.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "not_null_core__fact_transfer_events_FROM_ADDRESS", "alias": "fact_transfer_events_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/not_null_core__fact_transfer_events_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.928988, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfer_events\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfer_events_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfer_events_TO_ADDRESS"], "unique_id": "test.thorchain_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfer_events_TO_ADDRESS.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "not_null_core__fact_transfer_events_TO_ADDRESS", "alias": "fact_transfer_events_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/not_null_core__fact_transfer_events_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.929775, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfer_events\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfer_events_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfer_events_ASSET"], "unique_id": "test.thorchain_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfer_events_ASSET.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "not_null_core__fact_transfer_events_ASSET", "alias": "fact_transfer_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/not_null_core__fact_transfer_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.930552, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfer_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfer_events_ASSET", "column_name": "ASSET", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_E8", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_transfer_events_AMOUNT_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_transfer_events_AMOUNT_E8.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "not_null_core__fact_transfer_events_AMOUNT_E8", "alias": "fact_transfer_events_AMOUNT_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/not_null_core__fact_transfer_events_AMOUNT_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.931445, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_transfer_events\nwhere AMOUNT_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_transfer_events_AMOUNT_E8", "column_name": "AMOUNT_E8", "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_TRANSFER_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "alias": "fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_f0b3f2440defbbd4fb9d4a0788c734c7"}, "created_at": 1665513503.93223, "compiled_sql": "with validation_errors as (\n    select\n        FACT_TRANSFER_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_transfer_events\n    group by FACT_TRANSFER_EVENTS_ID\n    having count(*) > 1\n        or FACT_TRANSFER_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_transfer_events_FACT_TRANSFER_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfer_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_transfer_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e.sql", "original_file_path": "models/core/core__fact_transfer_events.yml", "name": "dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_transfer_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_transfer_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_transfer_events.yml/dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_3bc56d9ad76543581ca71391b151908e"}, "created_at": 1665513503.934282, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_transfer_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_transfer_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_transfer_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.02c2019ac8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a0859f1ef6fc1c717af9037fd64d728\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_DAILY_EARNINGS_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a0859f1ef6fc1c717af9037fd64d728", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.02c2019ac8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_9a0859f1ef6fc1c717af9037fd64d728.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "alias": "fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/dbt_expectations_expect_column_9a0859f1ef6fc1c717af9037fd64d728.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a0859f1ef6fc1c717af9037fd64d728"}, "created_at": 1665513503.9393458, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_DAILY_EARNINGS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "column_name": "FACT_DAILY_EARNINGS_ID", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.a33aeba570": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_DAILY_EARNINGS_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.a33aeba570", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "alias": "fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.941289, "compiled_sql": "\n    \n    \n\nselect\n    FACT_DAILY_EARNINGS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere FACT_DAILY_EARNINGS_ID is not null\ngroup by FACT_DAILY_EARNINGS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "column_name": "FACT_DAILY_EARNINGS_ID", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_DAY.0056ff032e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_DAY"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_DAY.0056ff032e", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_DAY.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_DAY", "alias": "fact_daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9420679, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.unique_core__fact_daily_earnings_DAY.d8c8059f12": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_daily_earnings_DAY"], "unique_id": "test.thorchain_models.unique_core__fact_daily_earnings_DAY.d8c8059f12", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_daily_earnings_DAY.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "unique_core__fact_daily_earnings_DAY", "alias": "fact_daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/unique_core__fact_daily_earnings_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9429572, "compiled_sql": "\n    \n    \n\nselect\n    DAY as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere DAY is not null\ngroup by DAY\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_daily_earnings_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_daily_earnings_DAY__day__1.739a7d6fc2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e32822cbdd8b48fdf23d1c279466198f\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e32822cbdd8b48fdf23d1c279466198f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_daily_earnings_DAY__day__1"], "unique_id": "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_daily_earnings_DAY__day__1.739a7d6fc2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_row_va_e32822cbdd8b48fdf23d1c279466198f.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__fact_daily_earnings_DAY__day__1", "alias": "fact_daily_earnings_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/dbt_expectations_expect_row_va_e32822cbdd8b48fdf23d1c279466198f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_e32822cbdd8b48fdf23d1c279466198f"}, "created_at": 1665513503.943736, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(DAY as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        THORCHAIN_DEV.core.fact_daily_earnings\n    where\n        -- to exclude erroneous future dates\n        cast(DAY as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_row_values_to_have_recent_data_core.fact_daily_earnings_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES.61a2f7741f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_LIQUIDITY_FEES"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES.61a2f7741f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_LIQUIDITY_FEES.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_LIQUIDITY_FEES", "alias": "fact_daily_earnings_LIQUIDITY_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_LIQUIDITY_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.946382, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere LIQUIDITY_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_LIQUIDITY_FEES", "column_name": "LIQUIDITY_FEES", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD.f6e86bf715": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LIQUIDITY_FEES_USD", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD.f6e86bf715", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD", "alias": "fact_daily_earnings_LIQUIDITY_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.947694, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere LIQUIDITY_FEES_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_LIQUIDITY_FEES_USD", "column_name": "LIQUIDITY_FEES_USD", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS.32f4ba94aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_BLOCK_REWARDS"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS.32f4ba94aa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_BLOCK_REWARDS.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_BLOCK_REWARDS", "alias": "fact_daily_earnings_BLOCK_REWARDS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_BLOCK_REWARDS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9488142, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere BLOCK_REWARDS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_BLOCK_REWARDS", "column_name": "BLOCK_REWARDS", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD.620692e3c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_REWARDS_USD", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD.620692e3c8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD", "alias": "fact_daily_earnings_BLOCK_REWARDS_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.949638, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere BLOCK_REWARDS_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_BLOCK_REWARDS_USD", "column_name": "BLOCK_REWARDS_USD", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS.3465760a09": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_TOTAL_EARNINGS"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS.3465760a09", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_TOTAL_EARNINGS.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_TOTAL_EARNINGS", "alias": "fact_daily_earnings_TOTAL_EARNINGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_TOTAL_EARNINGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.95043, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere TOTAL_EARNINGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_TOTAL_EARNINGS", "column_name": "TOTAL_EARNINGS", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD.13a1973622": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_EARNINGS_USD", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD.13a1973622", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD", "alias": "fact_daily_earnings_TOTAL_EARNINGS_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.951226, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere TOTAL_EARNINGS_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_TOTAL_EARNINGS_USD", "column_name": "TOTAL_EARNINGS_USD", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES.31b30b49fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_EARNINGS_TO_NODES"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES.31b30b49fc", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_EARNINGS_TO_NODES.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_EARNINGS_TO_NODES", "alias": "fact_daily_earnings_EARNINGS_TO_NODES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_EARNINGS_TO_NODES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9521122, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere EARNINGS_TO_NODES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_EARNINGS_TO_NODES", "column_name": "EARNINGS_TO_NODES", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD.06c8d3544c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_NODES_USD", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD.06c8d3544c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD", "alias": "fact_daily_earnings_EARNINGS_TO_NODES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9530182, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere EARNINGS_TO_NODES_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_EARNINGS_TO_NODES_USD", "column_name": "EARNINGS_TO_NODES_USD", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS.802ba2933d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS.802ba2933d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS", "alias": "fact_daily_earnings_EARNINGS_TO_POOLS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9539142, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere EARNINGS_TO_POOLS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_EARNINGS_TO_POOLS", "column_name": "EARNINGS_TO_POOLS", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD.d78b69a4e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EARNINGS_TO_POOLS_USD", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD"], "unique_id": "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD.d78b69a4e2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD", "alias": "fact_daily_earnings_EARNINGS_TO_POOLS_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.954885, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_daily_earnings\nwhere EARNINGS_TO_POOLS_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_daily_earnings_EARNINGS_TO_POOLS_USD", "column_name": "EARNINGS_TO_POOLS_USD", "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.3813cadda2": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_32d85cccb8b218cdabe76523ba046402\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_DAILY_EARNINGS_ID", "model": "{{ get_where_subquery(ref('core__fact_daily_earnings')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_daily_earnings"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_32d85cccb8b218cdabe76523ba046402", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.3813cadda2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_32d85cccb8b218cdabe76523ba046402.sql", "original_file_path": "models/core/core__fact_daily_earnings.yml", "name": "dbt_constraints_primary_key_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "alias": "fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_daily_earnings"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_daily_earnings.yml/dbt_constraints_primary_key_co_32d85cccb8b218cdabe76523ba046402.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_32d85cccb8b218cdabe76523ba046402"}, "created_at": 1665513503.9556859, "compiled_sql": "with validation_errors as (\n    select\n        FACT_DAILY_EARNINGS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_daily_earnings\n    group by FACT_DAILY_EARNINGS_ID\n    having count(*) > 1\n        or FACT_DAILY_EARNINGS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_daily_earnings_FACT_DAILY_EARNINGS_ID", "column_name": null, "file_key_name": "models.core__fact_daily_earnings"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_fee_events_FACT_FEE_EVENTS_ID.09084d41ad": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_08b0e2b06f7566f2428a65ab2a14ed1e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_FEE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_08b0e2b06f7566f2428a65ab2a14ed1e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_fee_events_FACT_FEE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_fee_events_FACT_FEE_EVENTS_ID.09084d41ad", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_08b0e2b06f7566f2428a65ab2a14ed1e.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_fee_events_FACT_FEE_EVENTS_ID", "alias": "fact_fee_events_FACT_FEE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/dbt_expectations_expect_column_08b0e2b06f7566f2428a65ab2a14ed1e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_08b0e2b06f7566f2428a65ab2a14ed1e"}, "created_at": 1665513503.960085, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_FEE_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_fee_events_FACT_FEE_EVENTS_ID", "column_name": "FACT_FEE_EVENTS_ID", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.unique_core__fact_fee_events_FACT_FEE_EVENTS_ID.af07c861bb": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_FEE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_fee_events_FACT_FEE_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_fee_events_FACT_FEE_EVENTS_ID.af07c861bb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_fee_events_FACT_FEE_EVENTS_ID.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "unique_core__fact_fee_events_FACT_FEE_EVENTS_ID", "alias": "fact_fee_events_FACT_FEE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/unique_core__fact_fee_events_FACT_FEE_EVENTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.962345, "compiled_sql": "\n    \n    \n\nselect\n    FACT_FEE_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_fee_events\nwhere FACT_FEE_EVENTS_ID is not null\ngroup by FACT_FEE_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_fee_events_FACT_FEE_EVENTS_ID", "column_name": "FACT_FEE_EVENTS_ID", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.not_null_core__fact_fee_events_BLOCK_TIMESTAMP.39a1b9fbcb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_fee_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_fee_events_BLOCK_TIMESTAMP.39a1b9fbcb", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_fee_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "not_null_core__fact_fee_events_BLOCK_TIMESTAMP", "alias": "fact_fee_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/not_null_core__fact_fee_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.963349, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_fee_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_fee_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.negative_one_core__fact_fee_events_DIM_BLOCK_ID.6bea825589": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_fee_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_fee_events_DIM_BLOCK_ID.6bea825589", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_fee_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "negative_one_core__fact_fee_events_DIM_BLOCK_ID", "alias": "fact_fee_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/negative_one_core__fact_fee_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.964293, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_fee_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_fee_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.not_null_core__fact_fee_events_TX_ID.363b10abc6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_fee_events_TX_ID"], "unique_id": "test.thorchain_models.not_null_core__fact_fee_events_TX_ID.363b10abc6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_fee_events_TX_ID.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "not_null_core__fact_fee_events_TX_ID", "alias": "fact_fee_events_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/not_null_core__fact_fee_events_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.966275, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_fee_events\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_fee_events_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.not_null_core__fact_fee_events_ASSET.07dd767dd5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_fee_events_ASSET"], "unique_id": "test.thorchain_models.not_null_core__fact_fee_events_ASSET.07dd767dd5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_fee_events_ASSET.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "not_null_core__fact_fee_events_ASSET", "alias": "fact_fee_events_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/not_null_core__fact_fee_events_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.967059, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_fee_events\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_fee_events_ASSET", "column_name": "ASSET", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.not_null_core__fact_fee_events_POOL_DEDUCT.083ce34ede": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_DEDUCT", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_fee_events_POOL_DEDUCT"], "unique_id": "test.thorchain_models.not_null_core__fact_fee_events_POOL_DEDUCT.083ce34ede", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_fee_events_POOL_DEDUCT.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "not_null_core__fact_fee_events_POOL_DEDUCT", "alias": "fact_fee_events_POOL_DEDUCT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/not_null_core__fact_fee_events_POOL_DEDUCT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.968077, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_fee_events\nwhere POOL_DEDUCT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_fee_events_POOL_DEDUCT", "column_name": "POOL_DEDUCT", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.not_null_core__fact_fee_events_ASSET_E8.6d72b49c41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_fee_events_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_fee_events_ASSET_E8.6d72b49c41", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_fee_events_ASSET_E8.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "not_null_core__fact_fee_events_ASSET_E8", "alias": "fact_fee_events_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/not_null_core__fact_fee_events_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.969228, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_fee_events\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_fee_events_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_fee_events_FACT_FEE_EVENTS_ID.11388d90d4": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_14004f3117ec7f2f01c2bf705cc9c046\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_FEE_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_14004f3117ec7f2f01c2bf705cc9c046", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_fee_events_FACT_FEE_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_fee_events_FACT_FEE_EVENTS_ID.11388d90d4", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_14004f3117ec7f2f01c2bf705cc9c046.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "dbt_constraints_primary_key_core__fact_fee_events_FACT_FEE_EVENTS_ID", "alias": "fact_fee_events_FACT_FEE_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/dbt_constraints_primary_key_co_14004f3117ec7f2f01c2bf705cc9c046.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_14004f3117ec7f2f01c2bf705cc9c046"}, "created_at": 1665513503.9701061, "compiled_sql": "with validation_errors as (\n    select\n        FACT_FEE_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_fee_events\n    group by FACT_FEE_EVENTS_ID\n    having count(*) > 1\n        or FACT_FEE_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_fee_events_FACT_FEE_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.524d327517": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_978262d27f9ee9b24beda19fd47de148\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_fee_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_fee_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_978262d27f9ee9b24beda19fd47de148", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.524d327517", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_978262d27f9ee9b24beda19fd47de148.sql", "original_file_path": "models/core/core__fact_fee_events.yml", "name": "dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_fee_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_fee_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_fee_events.yml/dbt_constraints_foreign_key_co_978262d27f9ee9b24beda19fd47de148.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_978262d27f9ee9b24beda19fd47de148"}, "created_at": 1665513503.972693, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_fee_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_fee_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_fee_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.34835f54a3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fc7350fb3bbeea3d7f32b7c5be98cc9b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_node_keys_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_node_keys_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fc7350fb3bbeea3d7f32b7c5be98cc9b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.34835f54a3", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_fc7350fb3bbeea3d7f32b7c5be98cc9b.sql", "original_file_path": "models/core/core__fact_set_node_keys_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "alias": "fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_node_keys_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_node_keys_events.yml/dbt_expectations_expect_column_fc7350fb3bbeea3d7f32b7c5be98cc9b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fc7350fb3bbeea3d7f32b7c5be98cc9b"}, "created_at": 1665513503.977081, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SET_NODE_KEYS_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "file_key_name": "models.core__fact_set_node_keys_events"}, "test.thorchain_models.unique_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.dda9f81b60": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_set_node_key_ae5b55eaafc78346a05e9a0ac8b47f11\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_node_keys_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_node_keys_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_set_node_key_ae5b55eaafc78346a05e9a0ac8b47f11", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.dda9f81b60", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_set_node_key_ae5b55eaafc78346a05e9a0ac8b47f11.sql", "original_file_path": "models/core/core__fact_set_node_keys_events.yml", "name": "unique_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "alias": "fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_node_keys_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_node_keys_events.yml/unique_core__fact_set_node_key_ae5b55eaafc78346a05e9a0ac8b47f11.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_set_node_key_ae5b55eaafc78346a05e9a0ac8b47f11"}, "created_at": 1665513503.9793322, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SET_NODE_KEYS_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_set_node_keys_events\nwhere FACT_SET_NODE_KEYS_EVENTS_ID is not null\ngroup by FACT_SET_NODE_KEYS_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "file_key_name": "models.core__fact_set_node_keys_events"}, "test.thorchain_models.not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP.41f9b1a5da": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_set_node_keys_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_node_keys_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP.41f9b1a5da", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_set_node_keys_events.yml", "name": "not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP", "alias": "fact_set_node_keys_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_node_keys_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_node_keys_events.yml/not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.980326, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_set_node_keys_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_set_node_keys_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_set_node_keys_events"}, "test.thorchain_models.negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID.639cd7330f": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_node_keys_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_node_keys_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID.639cd7330f", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_set_node_keys_events.yml", "name": "negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID", "alias": "fact_set_node_keys_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_node_keys_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_node_keys_events.yml/negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.9814231, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_set_node_keys_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_set_node_keys_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_set_node_keys_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5ac2675faa": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_e1af9ef7086ef6049bb5162e6f665c53\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_NODE_KEYS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_node_keys_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_node_keys_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_e1af9ef7086ef6049bb5162e6f665c53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5ac2675faa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_e1af9ef7086ef6049bb5162e6f665c53.sql", "original_file_path": "models/core/core__fact_set_node_keys_events.yml", "name": "dbt_constraints_primary_key_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "alias": "fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_node_keys_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_node_keys_events.yml/dbt_constraints_primary_key_co_e1af9ef7086ef6049bb5162e6f665c53.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_e1af9ef7086ef6049bb5162e6f665c53"}, "created_at": 1665513503.983246, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SET_NODE_KEYS_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_set_node_keys_events\n    group by FACT_SET_NODE_KEYS_EVENTS_ID\n    having count(*) > 1\n        or FACT_SET_NODE_KEYS_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_set_node_keys_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fd9fdc9f41": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_06daec35ea8e012711a387962ebc0fc1\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_node_keys_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_node_keys_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_06daec35ea8e012711a387962ebc0fc1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fd9fdc9f41", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_06daec35ea8e012711a387962ebc0fc1.sql", "original_file_path": "models/core/core__fact_set_node_keys_events.yml", "name": "dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_set_node_keys_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_set_node_keys_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_node_keys_events.yml/dbt_constraints_foreign_key_co_06daec35ea8e012711a387962ebc0fc1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_06daec35ea8e012711a387962ebc0fc1"}, "created_at": 1665513503.9852428, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_set_node_keys_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_set_node_keys_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_set_node_keys_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.9dd9587001": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80635cc02ebf2fc6162081958fc84109\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_DEPTHS_ID", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80635cc02ebf2fc6162081958fc84109", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.9dd9587001", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_80635cc02ebf2fc6162081958fc84109.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "alias": "fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/dbt_expectations_expect_column_80635cc02ebf2fc6162081958fc84109.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_80635cc02ebf2fc6162081958fc84109"}, "created_at": 1665513503.9899268, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_POOL_DEPTHS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "column_name": "FACT_POOL_DEPTHS_ID", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.94c0227c24": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_DEPTHS_ID", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.94c0227c24", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "alias": "fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.99228, "compiled_sql": "\n    \n    \n\nselect\n    FACT_POOL_DEPTHS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_block_pool_depths\nwhere FACT_POOL_DEPTHS_ID is not null\ngroup by FACT_POOL_DEPTHS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "column_name": "FACT_POOL_DEPTHS_ID", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP.3ea533bce0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP.3ea533bce0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP", "alias": "fact_block_pool_depths_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513503.993495, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_block_pool_depths where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_pool_depths_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID.f4fc2ff338": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID.f4fc2ff338", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID", "alias": "fact_block_pool_depths_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513503.994459, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_block_pool_depths where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_block_pool_depths_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.not_null_core__fact_block_pool_depths_RUNE_E8.3234bc76fa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RUNE_E8", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_pool_depths_RUNE_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_block_pool_depths_RUNE_E8.3234bc76fa", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_pool_depths_RUNE_E8.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "not_null_core__fact_block_pool_depths_RUNE_E8", "alias": "fact_block_pool_depths_RUNE_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/not_null_core__fact_block_pool_depths_RUNE_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9967659, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_pool_depths\nwhere RUNE_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_pool_depths_RUNE_E8", "column_name": "RUNE_E8", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.not_null_core__fact_block_pool_depths_ASSET_E8.0dc043e0cd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET_E8", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_pool_depths_ASSET_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_block_pool_depths_ASSET_E8.0dc043e0cd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_pool_depths_ASSET_E8.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "not_null_core__fact_block_pool_depths_ASSET_E8", "alias": "fact_block_pool_depths_ASSET_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/not_null_core__fact_block_pool_depths_ASSET_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.997563, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_pool_depths\nwhere ASSET_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_pool_depths_ASSET_E8", "column_name": "ASSET_E8", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.not_null_core__fact_block_pool_depths_SYNTH_E8.ff0f94fbc2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SYNTH_E8", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_pool_depths_SYNTH_E8"], "unique_id": "test.thorchain_models.not_null_core__fact_block_pool_depths_SYNTH_E8.ff0f94fbc2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_pool_depths_SYNTH_E8.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "not_null_core__fact_block_pool_depths_SYNTH_E8", "alias": "fact_block_pool_depths_SYNTH_E8", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/not_null_core__fact_block_pool_depths_SYNTH_E8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9984808, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_pool_depths\nwhere SYNTH_E8 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_pool_depths_SYNTH_E8", "column_name": "SYNTH_E8", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.not_null_core__fact_block_pool_depths_POOL_NAME.5d37c16f5d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POOL_NAME", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_block_pool_depths_POOL_NAME"], "unique_id": "test.thorchain_models.not_null_core__fact_block_pool_depths_POOL_NAME.5d37c16f5d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_block_pool_depths_POOL_NAME.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "not_null_core__fact_block_pool_depths_POOL_NAME", "alias": "fact_block_pool_depths_POOL_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/not_null_core__fact_block_pool_depths_POOL_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513503.9994, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_block_pool_depths\nwhere POOL_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_block_pool_depths_POOL_NAME", "column_name": "POOL_NAME", "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.dfe5457eaf": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_a6d8f6682114c4bd1f81de18539f72f3\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_DEPTHS_ID", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_a6d8f6682114c4bd1f81de18539f72f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.dfe5457eaf", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_a6d8f6682114c4bd1f81de18539f72f3.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "dbt_constraints_primary_key_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "alias": "fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/dbt_constraints_primary_key_co_a6d8f6682114c4bd1f81de18539f72f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_a6d8f6682114c4bd1f81de18539f72f3"}, "created_at": 1665513504.00018, "compiled_sql": "with validation_errors as (\n    select\n        FACT_POOL_DEPTHS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_block_pool_depths\n    group by FACT_POOL_DEPTHS_ID\n    having count(*) > 1\n        or FACT_POOL_DEPTHS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_block_pool_depths_FACT_POOL_DEPTHS_ID", "column_name": null, "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.14b49fcf71": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_47a73678c99f385e98dbb4699c69951f\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_block_pool_depths')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_block_pool_depths"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_47a73678c99f385e98dbb4699c69951f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.14b49fcf71", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_47a73678c99f385e98dbb4699c69951f.sql", "original_file_path": "models/core/core__fact_block_pool_depths.yml", "name": "dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_block_pool_depths_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_block_pool_depths"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_block_pool_depths.yml/dbt_constraints_foreign_key_co_47a73678c99f385e98dbb4699c69951f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_47a73678c99f385e98dbb4699c69951f"}, "created_at": 1665513504.002333, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_block_pool_depths\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_block_pool_depths_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_block_pool_depths"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_prices_FACT_PRICES_ID.435e0f2c3d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_63db56b72352c1c8838ae4e6b5b6a619\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_PRICES_ID", "model": "{{ get_where_subquery(ref('core__fact_prices')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_prices"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_63db56b72352c1c8838ae4e6b5b6a619", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_prices_FACT_PRICES_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_prices_FACT_PRICES_ID.435e0f2c3d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_63db56b72352c1c8838ae4e6b5b6a619.sql", "original_file_path": "models/core/core__fact_prices.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_prices_FACT_PRICES_ID", "alias": "fact_prices_FACT_PRICES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_prices.yml/dbt_expectations_expect_column_63db56b72352c1c8838ae4e6b5b6a619.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_63db56b72352c1c8838ae4e6b5b6a619"}, "created_at": 1665513504.006668, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_PRICES_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_prices_FACT_PRICES_ID", "column_name": "FACT_PRICES_ID", "file_key_name": "models.core__fact_prices"}, "test.thorchain_models.unique_core__fact_prices_FACT_PRICES_ID.003cb27459": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_PRICES_ID", "model": "{{ get_where_subquery(ref('core__fact_prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_prices_FACT_PRICES_ID"], "unique_id": "test.thorchain_models.unique_core__fact_prices_FACT_PRICES_ID.003cb27459", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_prices_FACT_PRICES_ID.sql", "original_file_path": "models/core/core__fact_prices.yml", "name": "unique_core__fact_prices_FACT_PRICES_ID", "alias": "fact_prices_FACT_PRICES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_prices.yml/unique_core__fact_prices_FACT_PRICES_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513504.009151, "compiled_sql": "\n    \n    \n\nselect\n    FACT_PRICES_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_prices\nwhere FACT_PRICES_ID is not null\ngroup by FACT_PRICES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_prices_FACT_PRICES_ID", "column_name": "FACT_PRICES_ID", "file_key_name": "models.core__fact_prices"}, "test.thorchain_models.not_null_core__fact_prices_BLOCK_TIMESTAMP.441625422b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_prices_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_prices_BLOCK_TIMESTAMP.441625422b", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_prices_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_prices.yml", "name": "not_null_core__fact_prices_BLOCK_TIMESTAMP", "alias": "fact_prices_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_prices.yml/not_null_core__fact_prices_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513504.0103302, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_prices where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_prices_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_prices"}, "test.thorchain_models.negative_one_core__fact_prices_DIM_BLOCK_ID.d29550f238": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_prices')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_prices_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_prices_DIM_BLOCK_ID.d29550f238", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_prices_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_prices.yml", "name": "negative_one_core__fact_prices_DIM_BLOCK_ID", "alias": "fact_prices_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_prices.yml/negative_one_core__fact_prices_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513504.011661, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_prices where BLOCK_TIMESTAMP <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_prices_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_prices"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID.fc15617ea8": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_PRICES_ID", "model": "{{ get_where_subquery(ref('core__fact_prices')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_prices"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID.fc15617ea8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID.sql", "original_file_path": "models/core/core__fact_prices.yml", "name": "dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID", "alias": "fact_prices_FACT_PRICES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_prices.yml/dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513504.013572, "compiled_sql": "with validation_errors as (\n    select\n        FACT_PRICES_ID, count(*)\n    from THORCHAIN_DEV.core.fact_prices\n    group by FACT_PRICES_ID\n    having count(*) > 1\n        or FACT_PRICES_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_prices_FACT_PRICES_ID", "column_name": null, "file_key_name": "models.core__fact_prices"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38e7c4700c": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_1eb87f3fb4fd7cc9f8b1ae72e86bfc31\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_prices')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_prices"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_1eb87f3fb4fd7cc9f8b1ae72e86bfc31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38e7c4700c", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_1eb87f3fb4fd7cc9f8b1ae72e86bfc31.sql", "original_file_path": "models/core/core__fact_prices.yml", "name": "dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_prices_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_prices"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_prices.yml/dbt_constraints_foreign_key_co_1eb87f3fb4fd7cc9f8b1ae72e86bfc31.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_1eb87f3fb4fd7cc9f8b1ae72e86bfc31"}, "created_at": 1665513504.01564, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_prices\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_prices_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_prices"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.94cd2b4126": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0be880c408735614848f492631d7ab9e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_ip_address_events')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_ip_address_events"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0be880c408735614848f492631d7ab9e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.94cd2b4126", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_0be880c408735614848f492631d7ab9e.sql", "original_file_path": "models/core/core__fact_set_ip_address_events.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "alias": "fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_ip_address_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_ip_address_events.yml/dbt_expectations_expect_column_0be880c408735614848f492631d7ab9e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0be880c408735614848f492631d7ab9e"}, "created_at": 1665513504.020224, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SET_IP_ADDRESS_EVENTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "file_key_name": "models.core__fact_set_ip_address_events"}, "test.thorchain_models.unique_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2a2aa5cfae": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_core__fact_set_ip_addre_e9db826e66cd2325524fe5cc0d12139c\") }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_ip_address_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_ip_address_events"]}, "config": {"enabled": true, "alias": "unique_core__fact_set_ip_addre_e9db826e66cd2325524fe5cc0d12139c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2a2aa5cfae", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_set_ip_addre_e9db826e66cd2325524fe5cc0d12139c.sql", "original_file_path": "models/core/core__fact_set_ip_address_events.yml", "name": "unique_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "alias": "fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_ip_address_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_ip_address_events.yml/unique_core__fact_set_ip_addre_e9db826e66cd2325524fe5cc0d12139c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "unique_core__fact_set_ip_addre_e9db826e66cd2325524fe5cc0d12139c"}, "created_at": 1665513504.022742, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SET_IP_ADDRESS_EVENTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_set_ip_address_events\nwhere FACT_SET_IP_ADDRESS_EVENTS_ID is not null\ngroup by FACT_SET_IP_ADDRESS_EVENTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "file_key_name": "models.core__fact_set_ip_address_events"}, "test.thorchain_models.not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP.5ba0c58a75": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_set_ip_address_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_ip_address_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP.5ba0c58a75", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_set_ip_address_events.yml", "name": "not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP", "alias": "fact_set_ip_address_events_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_ip_address_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_ip_address_events.yml/not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513504.023794, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_set_ip_address_events where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_set_ip_address_events_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_set_ip_address_events"}, "test.thorchain_models.negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID.2cce9fb3dd": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_ip_address_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_ip_address_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID.2cce9fb3dd", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_set_ip_address_events.yml", "name": "negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID", "alias": "fact_set_ip_address_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_ip_address_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_ip_address_events.yml/negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513504.024925, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_set_ip_address_events where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_set_ip_address_events_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_set_ip_address_events"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.cb9aaa02f0": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_b225401e711179f6ec7913ec3996beb3\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SET_IP_ADDRESS_EVENTS_ID", "model": "{{ get_where_subquery(ref('core__fact_set_ip_address_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_set_ip_address_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_b225401e711179f6ec7913ec3996beb3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.cb9aaa02f0", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_b225401e711179f6ec7913ec3996beb3.sql", "original_file_path": "models/core/core__fact_set_ip_address_events.yml", "name": "dbt_constraints_primary_key_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "alias": "fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_set_ip_address_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_ip_address_events.yml/dbt_constraints_primary_key_co_b225401e711179f6ec7913ec3996beb3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_b225401e711179f6ec7913ec3996beb3"}, "created_at": 1665513504.0268009, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SET_IP_ADDRESS_EVENTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_set_ip_address_events\n    group by FACT_SET_IP_ADDRESS_EVENTS_ID\n    having count(*) > 1\n        or FACT_SET_IP_ADDRESS_EVENTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID", "column_name": null, "file_key_name": "models.core__fact_set_ip_address_events"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc626285f1": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_c259b84f9286e1280015b6733bd9208b\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_set_ip_address_events')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_ip_address_events"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_c259b84f9286e1280015b6733bd9208b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc626285f1", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_c259b84f9286e1280015b6733bd9208b.sql", "original_file_path": "models/core/core__fact_set_ip_address_events.yml", "name": "dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_set_ip_address_events_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_set_ip_address_events"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_set_ip_address_events.yml/dbt_constraints_foreign_key_co_c259b84f9286e1280015b6733bd9208b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_c259b84f9286e1280015b6733bd9208b"}, "created_at": 1665513504.029294, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_set_ip_address_events\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_set_ip_address_events_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_set_ip_address_events"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.8f8165383d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5863b1f985c38f5505ce0e250bc03dfd\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_POOL_BLOCK_FEES_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_fees')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_fees"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5863b1f985c38f5505ce0e250bc03dfd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.8f8165383d", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_5863b1f985c38f5505ce0e250bc03dfd.sql", "original_file_path": "models/core/core__fact_pool_block_fees.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "alias": "fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_fees.yml/dbt_expectations_expect_column_5863b1f985c38f5505ce0e250bc03dfd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5863b1f985c38f5505ce0e250bc03dfd"}, "created_at": 1665513504.0340962, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_POOL_BLOCK_FEES_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "column_name": "FACT_POOL_BLOCK_FEES_ID", "file_key_name": "models.core__fact_pool_block_fees"}, "test.thorchain_models.unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.4771f271d5": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_POOL_BLOCK_FEES_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID"], "unique_id": "test.thorchain_models.unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.4771f271d5", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.sql", "original_file_path": "models/core/core__fact_pool_block_fees.yml", "name": "unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "alias": "fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_fees.yml/unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513504.035973, "compiled_sql": "\n    \n    \n\nselect\n    FACT_POOL_BLOCK_FEES_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_pool_block_fees\nwhere FACT_POOL_BLOCK_FEES_ID is not null\ngroup by FACT_POOL_BLOCK_FEES_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "column_name": "FACT_POOL_BLOCK_FEES_ID", "file_key_name": "models.core__fact_pool_block_fees"}, "test.thorchain_models.not_null_core__fact_pool_block_fees_DAY.b3a2546784": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DAY", "model": "{{ get_where_subquery(ref('core__fact_pool_block_fees')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_fees"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_pool_block_fees_DAY"], "unique_id": "test.thorchain_models.not_null_core__fact_pool_block_fees_DAY.b3a2546784", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_pool_block_fees_DAY.sql", "original_file_path": "models/core/core__fact_pool_block_fees.yml", "name": "not_null_core__fact_pool_block_fees_DAY", "alias": "fact_pool_block_fees_DAY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_fees.yml/not_null_core__fact_pool_block_fees_DAY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513504.036865, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom THORCHAIN_DEV.core.fact_pool_block_fees\nwhere DAY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_pool_block_fees_DAY", "column_name": "DAY", "file_key_name": "models.core__fact_pool_block_fees"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.a85fc1c290": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_0f92faa836a4ac667cca0f21a006b9b8\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_POOL_BLOCK_FEES_ID", "model": "{{ get_where_subquery(ref('core__fact_pool_block_fees')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_pool_block_fees"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_0f92faa836a4ac667cca0f21a006b9b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.a85fc1c290", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_0f92faa836a4ac667cca0f21a006b9b8.sql", "original_file_path": "models/core/core__fact_pool_block_fees.yml", "name": "dbt_constraints_primary_key_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "alias": "fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_pool_block_fees"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_pool_block_fees.yml/dbt_constraints_primary_key_co_0f92faa836a4ac667cca0f21a006b9b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_0f92faa836a4ac667cca0f21a006b9b8"}, "created_at": 1665513504.037649, "compiled_sql": "with validation_errors as (\n    select\n        FACT_POOL_BLOCK_FEES_ID, count(*)\n    from THORCHAIN_DEV.core.fact_pool_block_fees\n    group by FACT_POOL_BLOCK_FEES_ID\n    having count(*) > 1\n        or FACT_POOL_BLOCK_FEES_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID", "column_name": null, "file_key_name": "models.core__fact_pool_block_fees"}, "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_points_FACT_SLASH_POINTS_ID.33a34df512": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccb7ae029175e5ba5823958b56c932d8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "FACT_SLASH_POINTS_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_points')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_points"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccb7ae029175e5ba5823958b56c932d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["thorchain_models", "core", "dbt_expectations_expect_column_to_exist_core__fact_slash_points_FACT_SLASH_POINTS_ID"], "unique_id": "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_points_FACT_SLASH_POINTS_ID.33a34df512", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_expectations_expect_column_ccb7ae029175e5ba5823958b56c932d8.sql", "original_file_path": "models/core/core__fact_slash_points.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_slash_points_FACT_SLASH_POINTS_ID", "alias": "fact_slash_points_FACT_SLASH_POINTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_points"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_points.yml/dbt_expectations_expect_column_ccb7ae029175e5ba5823958b56c932d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ccb7ae029175e5ba5823958b56c932d8"}, "created_at": 1665513504.040899, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('FACT_SLASH_POINTS_ID' as \n    varchar\n) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_expectations_expect_column_to_exist_core.fact_slash_points_FACT_SLASH_POINTS_ID", "column_name": "FACT_SLASH_POINTS_ID", "file_key_name": "models.core__fact_slash_points"}, "test.thorchain_models.unique_core__fact_slash_points_FACT_SLASH_POINTS_ID.f7b5ab10d6": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "FACT_SLASH_POINTS_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_points')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_points"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "unique_core", "fqn": ["thorchain_models", "core", "unique_core__fact_slash_points_FACT_SLASH_POINTS_ID"], "unique_id": "test.thorchain_models.unique_core__fact_slash_points_FACT_SLASH_POINTS_ID.f7b5ab10d6", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "unique_core__fact_slash_points_FACT_SLASH_POINTS_ID.sql", "original_file_path": "models/core/core__fact_slash_points.yml", "name": "unique_core__fact_slash_points_FACT_SLASH_POINTS_ID", "alias": "fact_slash_points_FACT_SLASH_POINTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_points"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_points.yml/unique_core__fact_slash_points_FACT_SLASH_POINTS_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1665513504.042836, "compiled_sql": "\n    \n    \n\nselect\n    FACT_SLASH_POINTS_ID as unique_field,\n    count(*) as n_records\n\nfrom THORCHAIN_DEV.core.fact_slash_points\nwhere FACT_SLASH_POINTS_ID is not null\ngroup by FACT_SLASH_POINTS_ID\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.unique_core.fact_slash_points_FACT_SLASH_POINTS_ID", "column_name": "FACT_SLASH_POINTS_ID", "file_key_name": "models.core__fact_slash_points"}, "test.thorchain_models.not_null_core__fact_slash_points_BLOCK_TIMESTAMP.a7b4964341": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"DIM_BLOCK_ID not in ('-1','-2')\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_slash_points')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_points"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "not_null_core", "fqn": ["thorchain_models", "core", "not_null_core__fact_slash_points_BLOCK_TIMESTAMP"], "unique_id": "test.thorchain_models.not_null_core__fact_slash_points_BLOCK_TIMESTAMP.a7b4964341", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "not_null_core__fact_slash_points_BLOCK_TIMESTAMP.sql", "original_file_path": "models/core/core__fact_slash_points.yml", "name": "not_null_core__fact_slash_points_BLOCK_TIMESTAMP", "alias": "fact_slash_points_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_points"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_points.yml/not_null_core__fact_slash_points_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "DIM_BLOCK_ID not in ('-1','-2')"}, "created_at": 1665513504.0437891, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from THORCHAIN_DEV.core.fact_slash_points where DIM_BLOCK_ID not in ('-1','-2')) dbt_subquery\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.not_null_core.fact_slash_points_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_slash_points"}, "test.thorchain_models.negative_one_core__fact_slash_points_DIM_BLOCK_ID.e5523fb231": {"raw_sql": "{{ test_negative_one(**_dbt_generic_test_kwargs) }}{{ config(where=\"_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')\") }}", "test_metadata": {"name": "negative_one", "kwargs": {"column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_points')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.thorchain_models.test_negative_one", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_points"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "negative_one_core", "fqn": ["thorchain_models", "core", "negative_one_core__fact_slash_points_DIM_BLOCK_ID"], "unique_id": "test.thorchain_models.negative_one_core__fact_slash_points_DIM_BLOCK_ID.e5523fb231", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "negative_one_core__fact_slash_points_DIM_BLOCK_ID.sql", "original_file_path": "models/core/core__fact_slash_points.yml", "name": "negative_one_core__fact_slash_points_DIM_BLOCK_ID", "alias": "fact_slash_points_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_points"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_points.yml/negative_one_core__fact_slash_points_DIM_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "_inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')"}, "created_at": 1665513504.0448651, "compiled_sql": "\nSELECT\n    *\nFROM\n    (select * from THORCHAIN_DEV.core.fact_slash_points where _inserted_timestamp <  (CURRENT_TIMESTAMP - INTERVAL '8 HOURS')) dbt_subquery\nWHERE\n    DIM_BLOCK_ID = '-1' ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.negative_one_core.fact_slash_points_DIM_BLOCK_ID", "column_name": "DIM_BLOCK_ID", "file_key_name": "models.core__fact_slash_points"}, "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_points_FACT_SLASH_POINTS_ID.c20584f187": {"raw_sql": "{{ dbt_constraints.test_primary_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_primary_key_co_c2e24a3c91c419af8e48faf48f69a8b8\") }}", "test_metadata": {"name": "primary_key", "kwargs": {"column_name": "FACT_SLASH_POINTS_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_points')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_primary_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__fact_slash_points"]}, "config": {"enabled": true, "alias": "dbt_constraints_primary_key_co_c2e24a3c91c419af8e48faf48f69a8b8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_primary_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_primary_key_core__fact_slash_points_FACT_SLASH_POINTS_ID"], "unique_id": "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_points_FACT_SLASH_POINTS_ID.c20584f187", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_primary_key_co_c2e24a3c91c419af8e48faf48f69a8b8.sql", "original_file_path": "models/core/core__fact_slash_points.yml", "name": "dbt_constraints_primary_key_core__fact_slash_points_FACT_SLASH_POINTS_ID", "alias": "fact_slash_points_FACT_SLASH_POINTS_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_slash_points"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_points.yml/dbt_constraints_primary_key_co_c2e24a3c91c419af8e48faf48f69a8b8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_primary_key_co_c2e24a3c91c419af8e48faf48f69a8b8"}, "created_at": 1665513504.046626, "compiled_sql": "with validation_errors as (\n    select\n        FACT_SLASH_POINTS_ID, count(*)\n    from THORCHAIN_DEV.core.fact_slash_points\n    group by FACT_SLASH_POINTS_ID\n    having count(*) > 1\n        or FACT_SLASH_POINTS_ID is null\n        \n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_primary_key_core.fact_slash_points_FACT_SLASH_POINTS_ID", "column_name": null, "file_key_name": "models.core__fact_slash_points"}, "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.eb3f0e7ae8": {"raw_sql": "{{ dbt_constraints.test_foreign_key(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_constraints_foreign_key_co_7c1baac3881b75fd68b9957469c0b2a2\") }}", "test_metadata": {"name": "foreign_key", "kwargs": {"fk_column_name": "DIM_BLOCK_ID", "pk_table_name": "ref('core__dim_block')", "pk_column_name": "DIM_BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_slash_points')) }}"}, "namespace": "dbt_constraints"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_constraints.test_foreign_key", "macro.dbt.get_where_subquery"], "nodes": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_slash_points"]}, "config": {"enabled": true, "alias": "dbt_constraints_foreign_key_co_7c1baac3881b75fd68b9957469c0b2a2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "THORCHAIN_DEV", "schema": "dbt_constraints_foreign_key_core", "fqn": ["thorchain_models", "core", "dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_"], "unique_id": "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.eb3f0e7ae8", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "dbt_constraints_foreign_key_co_7c1baac3881b75fd68b9957469c0b2a2.sql", "original_file_path": "models/core/core__fact_slash_points.yml", "name": "dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_", "alias": "fact_slash_points_DIM_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_block"], ["core__fact_slash_points"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/thorchain_models/models/core/core__fact_slash_points.yml/dbt_constraints_foreign_key_co_7c1baac3881b75fd68b9957469c0b2a2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_constraints_foreign_key_co_7c1baac3881b75fd68b9957469c0b2a2"}, "created_at": 1665513504.048961, "compiled_sql": "\nwith child as (\n  select\n    DIM_BLOCK_ID\n  from THORCHAIN_DEV.core.fact_slash_points\n  where 1=1\n        and DIM_BLOCK_ID is not null\n        \n),\n\nparent as (\n    select\n        DIM_BLOCK_ID\n    from THORCHAIN_DEV.core.dim_block\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on parent.DIM_BLOCK_ID = child.DIM_BLOCK_ID\n\n    where parent.DIM_BLOCK_ID is null\n)\n\nselect *\nfrom validation_errors", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "THORCHAIN_DEV.dbt_constraints_foreign_key_core.fact_slash_points_DIM_BLOCK_ID", "column_name": null, "file_key_name": "models.core__fact_slash_points"}}, "sources": {"source.thorchain_models.shared.prices_v2": {"fqn": ["thorchain_models", "shared", "prices_v2"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.thorchain_models.shared.prices_v2", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prices_v2", "source_name": "shared", "source_description": "", "loader": "", "identifier": "prices_v2", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.prices_v2", "created_at": 1665176151.918207}, "source.thorchain_models.thorchain_midgard.midgard_active_vault_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_active_vault_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_active_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_active_vault_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_active_vault_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_active_vault_events", "created_at": 1665176151.918278}, "source.thorchain_models.thorchain_midgard.midgard_add_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_add_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_add_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_add_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_add_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_add_events", "created_at": 1665176151.918328}, "source.thorchain_models.thorchain_midgard.midgard_asgard_fund_yggdrasil_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_asgard_fund_yggdrasil_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_asgard_fund_yggdrasil_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_asgard_fund_yggdrasil_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_asgard_fund_yggdrasil_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_asgard_fund_yggdrasil_events", "created_at": 1665176151.918376}, "source.thorchain_models.thorchain_midgard.midgard_block_log": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_block_log"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_block_log", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_block_log", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_block_log", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_block_log", "created_at": 1665176151.918422}, "source.thorchain_models.thorchain_midgard.midgard_block_pool_depths": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_block_pool_depths"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_block_pool_depths", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_block_pool_depths", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_block_pool_depths", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_block_pool_depths", "created_at": 1665176151.918468}, "source.thorchain_models.thorchain_midgard.midgard_bond_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_bond_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_bond_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_bond_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_bond_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_bond_events", "created_at": 1665176151.918512}, "source.thorchain_models.thorchain_midgard.bond_events_pk_count": {"fqn": ["thorchain_models", "thorchain_midgard", "bond_events_pk_count"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.bond_events_pk_count", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "bond_events_pk_count", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "bond_events_pk_count", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.bond_events_pk_count", "created_at": 1665176151.918558}, "source.thorchain_models.thorchain_midgard.midgard_constants": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_constants"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_constants", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_constants", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_constants", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_constants", "created_at": 1665176151.918675}, "source.thorchain_models.thorchain_midgard.midgard_errata_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_errata_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_errata_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_errata_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_errata_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_errata_events", "created_at": 1665176151.9187222}, "source.thorchain_models.thorchain_midgard.midgard_fee_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_fee_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_fee_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_fee_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_fee_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_fee_events", "created_at": 1665176151.9187682}, "source.thorchain_models.thorchain_midgard.fee_events_pk_count": {"fqn": ["thorchain_models", "thorchain_midgard", "fee_events_pk_count"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.fee_events_pk_count", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "fee_events_pk_count", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "fee_events_pk_count", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.fee_events_pk_count", "created_at": 1665176151.918815}, "source.thorchain_models.thorchain_midgard.midgard_gas_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_gas_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_gas_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_gas_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_gas_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_gas_events", "created_at": 1665176151.91886}, "source.thorchain_models.thorchain_midgard.midgard_inactive_vault_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_inactive_vault_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_inactive_vault_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_inactive_vault_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_inactive_vault_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_inactive_vault_events", "created_at": 1665176151.918904}, "source.thorchain_models.thorchain_midgard.midgard_message_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_message_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_message_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_message_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_message_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_message_events", "created_at": 1665176151.9189482}, "source.thorchain_models.thorchain_midgard.midgard_new_node_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_new_node_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_new_node_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_new_node_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_new_node_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_new_node_events", "created_at": 1665176151.9189918}, "source.thorchain_models.thorchain_midgard.midgard_outbound_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_outbound_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_outbound_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_outbound_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_outbound_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_outbound_events", "created_at": 1665176151.919035}, "source.thorchain_models.thorchain_midgard.midgard_pending_liquidity_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_pending_liquidity_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_pending_liquidity_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_pending_liquidity_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_pending_liquidity_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_pending_liquidity_events", "created_at": 1665176151.91908}, "source.thorchain_models.thorchain_midgard.midgard_pool_balance_change_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_pool_balance_change_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_pool_balance_change_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_pool_balance_change_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_pool_balance_change_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_pool_balance_change_events", "created_at": 1665176151.919124}, "source.thorchain_models.thorchain_midgard.midgard_pool_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_pool_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_pool_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_pool_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_pool_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_pool_events", "created_at": 1665176151.919167}, "source.thorchain_models.thorchain_midgard.midgard_refund_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_refund_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_refund_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_refund_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_refund_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_refund_events", "created_at": 1665176151.91921}, "source.thorchain_models.thorchain_midgard.midgard_reserve_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_reserve_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_reserve_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_reserve_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_reserve_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_reserve_events", "created_at": 1665176151.919252}, "source.thorchain_models.thorchain_midgard.midgard_rewards_event_entries": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_rewards_event_entries"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_rewards_event_entries", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_rewards_event_entries", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_rewards_event_entries", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_rewards_event_entries", "created_at": 1665176151.919295}, "source.thorchain_models.thorchain_midgard.midgard_rewards_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_rewards_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_rewards_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_rewards_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_rewards_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_rewards_events", "created_at": 1665176151.919337}, "source.thorchain_models.thorchain_midgard.midgard_set_ip_address_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_set_ip_address_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_set_ip_address_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_set_ip_address_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_ip_address_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_ip_address_events", "created_at": 1665176151.919379}, "source.thorchain_models.thorchain_midgard.midgard_set_mimir_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_set_mimir_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_set_mimir_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_set_mimir_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_mimir_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_mimir_events", "created_at": 1665176151.919422}, "source.thorchain_models.thorchain_midgard.midgard_set_node_keys_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_set_node_keys_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_set_node_keys_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_set_node_keys_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_node_keys_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_node_keys_events", "created_at": 1665176151.919466}, "source.thorchain_models.thorchain_midgard.midgard_set_version_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_set_version_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_set_version_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_set_version_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_set_version_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_set_version_events", "created_at": 1665176151.919509}, "source.thorchain_models.thorchain_midgard.midgard_slash_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_slash_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_slash_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_slash_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_slash_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_slash_events", "created_at": 1665176151.919552}, "source.thorchain_models.thorchain_midgard.midgard_slash_points_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_slash_points_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_slash_points_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_slash_points_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_slash_points_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_slash_points_events", "created_at": 1665176151.919594}, "source.thorchain_models.thorchain_midgard.midgard_stake_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_stake_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_stake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_stake_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_stake_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_stake_events", "created_at": 1665176151.919638}, "source.thorchain_models.thorchain_midgard.midgard_swap_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_swap_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_swap_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_swap_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_swap_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_swap_events", "created_at": 1665176151.91968}, "source.thorchain_models.thorchain_midgard.midgard_switch_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_switch_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_switch_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_switch_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_switch_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_switch_events", "created_at": 1665176151.919723}, "source.thorchain_models.thorchain_midgard.switch_events_pk_count": {"fqn": ["thorchain_models", "thorchain_midgard", "switch_events_pk_count"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.switch_events_pk_count", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "switch_events_pk_count", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "switch_events_pk_count", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.switch_events_pk_count", "created_at": 1665176151.919765}, "source.thorchain_models.thorchain_midgard.midgard_thorname_change_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_thorname_change_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_thorname_change_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_thorname_change_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_thorname_change_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_thorname_change_events", "created_at": 1665176151.919807}, "source.thorchain_models.thorchain_midgard.midgard_transfer_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_transfer_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_transfer_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_transfer_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_transfer_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_transfer_events", "created_at": 1665176151.919851}, "source.thorchain_models.thorchain_midgard.midgard_unstake_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_unstake_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_unstake_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_unstake_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_unstake_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_unstake_events", "created_at": 1665176151.9198961}, "source.thorchain_models.thorchain_midgard.midgard_update_node_account_status_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_update_node_account_status_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_update_node_account_status_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_update_node_account_status_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_update_node_account_status_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_update_node_account_status_events", "created_at": 1665176151.919942}, "source.thorchain_models.thorchain_midgard.midgard_validator_request_leave_events": {"fqn": ["thorchain_models", "thorchain_midgard", "midgard_validator_request_leave_events"], "database": "flipside_prod_db", "schema": "BRONZE_MIDGARD_2_9_0_20220724", "unique_id": "source.thorchain_models.thorchain_midgard.midgard_validator_request_leave_events", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "midgard_validator_request_leave_events", "source_name": "thorchain_midgard", "source_description": "", "loader": "", "identifier": "midgard_validator_request_leave_events", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.BRONZE_MIDGARD_2_9_0_20220724.midgard_validator_request_leave_events", "created_at": 1665176151.919986}, "source.thorchain_models.crosschain.address_labels": {"fqn": ["thorchain_models", "crosschain", "address_labels"], "database": "flipside_prod_db", "schema": "silver_crosschain", "unique_id": "source.thorchain_models.crosschain.address_labels", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_crosschain.address_labels", "created_at": 1665176151.9200299}}, "macros": {"macro.thorchain_models.create_sps": {"unique_id": "macro.thorchain_models.create_sps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'ALGORAND' %}\n        CREATE schema IF NOT EXISTS _internal;\n{{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.thorchain_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.436867}, "macro.thorchain_models.generate_schema_name": {"unique_id": "macro.thorchain_models.generate_schema_name", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(\n        custom_schema_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.437393}, "macro.thorchain_models.generate_alias_name": {"unique_id": "macro.thorchain_models.generate_alias_name", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(\n        custom_alias_name = none,\n        node = none\n    ) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name [1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.437675}, "macro.thorchain_models.run_sp_create_prod_clone": {"unique_id": "macro.thorchain_models.run_sp_create_prod_clone", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call thorchain._internal.create_prod_clone(\n        'thorchain',\n        'thorchain_dev',\n        'internal_dev'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.437981}, "macro.thorchain_models.create_udfs": {"unique_id": "macro.thorchain_models.create_udfs", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% set sql %}\n    {{ create_algorand_udf_bulk_get_tx_info() }};\n{{ create_algorand_udf_bulk_get_tx_info() }};\n{% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.438335}, "macro.thorchain_models.sp_create_prod_clone": {"unique_id": "macro.thorchain_models.sp_create_prod_clone", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE|BOOLEAN'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\n\n        while (existing_functions.next()) {\n            var schema = existing_functions.getColumnValue(1)\n            var function_name = existing_functions.getColumnValue(2)\n            var argument_signature = existing_functions.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE|BOOLEAN'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\n\n        while (existing_procedures.next()) {\n            var schema = existing_procedures.getColumnValue(1)\n            var procedure_name = existing_procedures.getColumnValue(2)\n            var argument_signature = existing_procedures.getColumnValue(3)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_tasks = snowflake.execute({sqlText: `SHOW TASKS IN DATABASE ${DESTINATION_DB_NAME};`});\n\n        while (existing_tasks.next()) {\n            var schema = existing_tasks.getColumnValue(5)\n            var task_name = existing_tasks.getColumnValue(2)\n            snowflake.execute({sqlText: `ALTER TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} SUSPEND;`})\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.439146}, "macro.thorchain_models.sequence_distinct_gaps_dim_block_id": {"unique_id": "macro.thorchain_models.sequence_distinct_gaps_dim_block_id", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/tests/sequence_distinct_gaps_dim_block_id.sql", "original_file_path": "macros/tests/sequence_distinct_gaps_dim_block_id.sql", "name": "sequence_distinct_gaps_dim_block_id", "macro_sql": "{% macro sequence_distinct_gaps_dim_block_id(\n        table,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            (\n                SELECT\n                    DISTINCT {{ column }}\n                FROM\n                    {{ table }} A\n                    JOIN {{ ref('core__dim_block') }}\n                    b\n                    ON A.dim_block_id = b.dim_block_id\n                WHERE\n                    A.dim_block_id <> '-1'\n                    AND b.block_timestamp :: DATE < CURRENT_DATE\n            )\n    )\nSELECT\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.440505}, "macro.thorchain_models.sequence_gaps_buffered_look_back": {"unique_id": "macro.thorchain_models.sequence_gaps_buffered_look_back", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/tests/sequence_gaps_buffered_look_back.sql", "original_file_path": "macros/tests/sequence_gaps_buffered_look_back.sql", "name": "sequence_gaps_buffered_look_back", "macro_sql": "{% macro sequence_gaps_buffered_look_back(\n        table,\n        partition_by,\n        column,\n        delayed_column,\n        delayed_period\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }},\n            LAG(\n                {{ delayed_column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ delayed_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nAND \n    {{ delayed_column }} < (\n        SELECT\n            MAX(\n                {{ delayed_column }}\n            )\n        FROM\n            {{ this }}\n    ) - INTERVAL '{{ delayed_period }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4423711}, "macro.thorchain_models.sequence_gaps": {"unique_id": "macro.thorchain_models.sequence_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "sequence_gaps", "macro_sql": "{% macro sequence_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.44348}, "macro.thorchain_models.test_negative_one": {"unique_id": "macro.thorchain_models.test_negative_one", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/tests/negative_one.sql", "original_file_path": "macros/tests/negative_one.sql", "name": "test_negative_one", "macro_sql": "{% test negative_one(\n    model,\n    column_name\n) %}\nSELECT\n    *\nFROM\n    {{ model }}\nWHERE\n    {{ column_name }} = '-1' {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.443718}, "macro.thorchain_models.sequence_distinct_gaps": {"unique_id": "macro.thorchain_models.sequence_distinct_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/tests/sequence_distinct_gaps.sql", "original_file_path": "macros/tests/sequence_distinct_gaps.sql", "name": "sequence_distinct_gaps", "macro_sql": "{% macro sequence_distinct_gaps(\n        table,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM (\n            SELECT DISTINCT {{ column }} FROM {{ table }}\n        )\n           \n    )\nSELECT\n    {{ previous_column }},\n    {{ column }},\n    {{ column }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.444662}, "macro.thorchain_models.date_gaps": {"unique_id": "macro.thorchain_models.date_gaps", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "macros/tests/date_gaps.sql", "original_file_path": "macros/tests/date_gaps.sql", "name": "date_gaps", "macro_sql": "{% macro date_gaps(\n        table,\n        partition_by,\n        column\n    ) %}\n    {%- set partition_sql = partition_by | join(\", \") -%}\n    {%- set previous_column = \"prev_\" ~ column -%}\n    WITH source AS (\n        SELECT\n            {{ partition_sql + \",\" if partition_sql }}\n            {{ column }},\n            LAG(\n                {{ column }},\n                1\n            ) over (\n                {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n                ORDER BY\n                    {{ column }} ASC\n            ) AS {{ previous_column }}\n        FROM\n            {{ table }}\n    )\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column }},\n    DATEDIFF(\n        days,\n        {{ previous_column }},\n        {{ column }}\n    ) - 1 AS gap\nFROM\n    source\n    {% if varargs -%}\nLEFT JOIN (\n        {% for x in varargs %}\n            (\n            {{ dbt_utils.date_spine(\n                datepart = \"day\",\n                start_date = x.start_date,\n                end_date = x.end_date\n            ) }}\n            )\n            {{- \"UNION ALL\" if not loop.last -}}\n        {% endfor %}\n) exclude\n    ON source.day = exclude.date_day\n    {%- endif %}\nWHERE\n    DATEDIFF(\n        days,\n        {{ previous_column }},\n        {{ column }}\n    ) > 1 \n    {{ \"AND source.day != exclude.date_day\" if varargs }}\nORDER BY\n    gap DESC\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4464152}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4473228}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4595468}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.460284}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.460554}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.461281}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.462021}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.462553}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.46304}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.463357}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.463431}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.463598}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.463695}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.463872}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.464114}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.464313}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.464813}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.46499}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4651442}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4656022}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4657779}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4662452}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.467042}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.467249}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.467477}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.467665}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.46777}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.468972}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.469248}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4694998}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.471562}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.471848}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.472424}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4740832}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.475462}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4759848}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.478237}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4786408}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.478879}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4791539}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.479369}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.479554}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4806132}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4808042}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.480941}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.481075}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.481208}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.481604}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.481896}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.482189}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4826481}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.482908}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.486197}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.486358}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.486572}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4867141}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.486808}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.487499}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.487658}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.487823}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.489161}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4904692}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4940329}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.494312}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.494472}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.494553}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4946911}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.4947991}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.494996}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.495832}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.496017}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.496258}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.496681}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.502485}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5044749}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.504956}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.505255}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5056589}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.506026}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.506832}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.507359}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5079548}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.512645}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.514092}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.514379}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5150988}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.515361}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5159721}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5166342}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.520868}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.525128}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5263119}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.527473}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5281742}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.530644}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.531106}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.531289}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.531484}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.531884}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.534334}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5346718}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.534891}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.536373}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5367732}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.536928}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.537108}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5373561}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5405009}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.544829}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.545701}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.545928}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.546392}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5465758}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5467038}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.546838}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5469499}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.547105}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.547215}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5476701}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.547848}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.549074}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.549491}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.549712}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.550247}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.550499}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.550773}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.551199}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.551445}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.551829}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.552165}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.552453}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.553042}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.554133}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.554694}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.554982}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.556654}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.557873}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.558593}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.55882}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.559097}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.559169}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.559534}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.559693}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.559983}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5601}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5603971}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.560496}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.56087}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5610251}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.561296}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.561365}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.561667}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.561802}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.562132}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.562264}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5628958}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5633512}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.563721}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.563879}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.564207}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.564343}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.564646}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5647979}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.565085}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.565234}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.565526}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5656252}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5659578}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.566088}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.566369}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5664692}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.567316}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.567461}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.567617}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.567764}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.567976}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5681229}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5682728}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.568445}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.568597}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5687392}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.56889}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.569029}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.569324}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.569424}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.569802}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.570061}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.570202}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.570737}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.570896}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.571111}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.571431}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.571553}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5719512}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5721269}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5722828}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.57252}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.572993}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.573123}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5732749}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.57366}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.576596}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.576766}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.576978}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.57726}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5774982}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.577804}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.577984}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.578187}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.578358}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.578515}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.578708}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5789802}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.579221}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.579812}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.580035}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.58017}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5803552}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5808342}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5809731}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.581197}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.581604}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.583185}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5832949}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.583454}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5835578}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.583885}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.584065}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.584159}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5843751}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.584557}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.584775}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.584956}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.585176}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.585883}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5860648}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5862951}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.586515}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.587623}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.588307}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5884721}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5886688}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.588829}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5890958}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.589567}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.590942}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.591188}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.591363}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.591511}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5916831}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.591916}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.592114}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5924008}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.59258}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.592731}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5942929}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.594508}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.594812}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.594989}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.595315}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.595538}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.596123}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.596372}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.597139}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5976682}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5978901}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.598173}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.598442}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5987399}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.598809}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.5988748}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.599244}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.599404}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.599694}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.599811}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.600491}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6005602}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.600796}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.600863}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.600929}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6010828}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.60115}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.601216}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.601279}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.601432}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6014998}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.601563}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.601713}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.60178}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.601844}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.601995}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6020632}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.602127}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.602277}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.602344}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.602408}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.602891}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6033201}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.603519}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ dbt_utils.type_string() }}){%- endset -%}\n    {{ dbt_utils.replace(dbt_utils.replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6038132}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.603948}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6040452}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.604383}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6044831}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.604577}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.605143}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.605302}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.605453}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6056042}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.60579}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.606081}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.606153}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.606218}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.606583}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.606724}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6068559}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6069891}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.607542}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6076741}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.607888}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.608043}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.610185}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.61057}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.610841}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.611213}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6121302}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.614547}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6147058}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.614857}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.616566}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.616766}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.617167}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.617305}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.617426}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.617545}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6178718}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.618006}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6181319}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.618496}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.618631}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6187499}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.61991}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.620028}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.620136}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.638108}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6382232}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.638336}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6388228}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.638973}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.639117}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6395268}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6396391}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6402712}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.64039}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.640466}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.640539}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6407099}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.64083}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6409862}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6411068}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.641249}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.642786}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6432881}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.643789}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.643994}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.644449}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.644589}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.644726}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.644866}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6452749}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.645387}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6455622}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.645667}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.646283}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.646563}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.646715}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.647128}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.647309}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.648798}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6489651}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6491961}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.649536}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.649878}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.650244}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.650646}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.65078}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.650913}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.651492}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.651742}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.65188}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.652021}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.652159}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.653088}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.653502}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.653634}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6538198}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.654003}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.659575}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6600761}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.660388}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.660865}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.665806}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.666236}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.666707}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.667242}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6678798}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.668243}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6685498}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.669107}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.669328}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6697521}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.670043}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6707132}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6710432}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.671482}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.671801}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.67216}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6723268}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.672941}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.673455}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.67402}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6743839}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.674825}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.674987}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6753511}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.675522}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6761448}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6767628}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.677345}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.677674}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6781719}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.678456}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6789088}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.679413}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6800792}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6807308}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.681171}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.681335}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.682077}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.682938}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.685859}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6872902}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.687606}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6877692}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.68809}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.688282}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6885781}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6887438}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.689249}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.689947}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6905239}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.69075}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.691095}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.691446}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.6918368}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.692519}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.693353}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.694162}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.694568}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.69475}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.695254}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.695932}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.696762}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.697206}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.697493}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.69819}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.699139}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.70085}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.70296}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.705409}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.708329}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.708677}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.708916}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.711244}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7114549}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.711647}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7118342}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.711989}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7121532}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.712749}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7136588}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.71408}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.71435}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.71472}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.715046}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.716505}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7167711}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.717535}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.718032}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.719112}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7205818}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.721628}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.722455}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.722949}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.72366}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.724082}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7246609}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7251499}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7252312}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.725312}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.725387}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.726397}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.726672}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.727236}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7280939}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.735915}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.738136}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.740459}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7414458}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.742186}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7428532}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7444701}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.745026}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.745936}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.746206}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.746439}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.746738}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.746968}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7475882}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.747787}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.747981}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7481751}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.748379}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.748721}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.748859}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.74899}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.749085}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.749436}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7499368}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.750078}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.750365}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.750623}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.751136}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.751286}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.751421}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.751553}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.751688}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.752138}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.752372}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.752623}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.752924}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.753144}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7533681}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.753717}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.753858}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.753995}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7541718}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.755363}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7556229}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.755877}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7563362}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.756713}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.757131}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.757469}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7575989}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7577229}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.758123}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.758382}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7585542}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.758819}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7604392}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7607198}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.76111}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7613828}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.761798}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.762208}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.762691}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.762897}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.763028}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7631612}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.763573}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.764064}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.764263}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7644532}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7646441}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.764837}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7651389}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.765586}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.765762}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.765901}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.767033}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.767358}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.76751}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.767667}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.768044}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.768231}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.768627}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.769183}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.769366}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.769501}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.769632}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7697752}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7702599}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7703922}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7705889}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7707782}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.771059}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.771337}, "macro.dbt_constraints.postgres__create_primary_key": {"unique_id": "macro.dbt_constraints.postgres__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_primary_key", "macro_sql": "\n{%- macro postgres__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7765498}, "macro.dbt_constraints.postgres__create_unique_key": {"unique_id": "macro.dbt_constraints.postgres__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_unique_key", "macro_sql": "\n{%- macro postgres__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7778509}, "macro.dbt_constraints.postgres__create_not_null": {"unique_id": "macro.dbt_constraints.postgres__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_not_null", "macro_sql": "\n{%- macro postgres__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"ALTER COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- call statement('add_nn', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{table_relation}} {{ modify_statement_csv }};\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7788}, "macro.dbt_constraints.postgres__create_foreign_key": {"unique_id": "macro.dbt_constraints.postgres__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__create_foreign_key", "macro_sql": "\n{%- macro postgres__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 63 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7804759}, "macro.dbt_constraints.postgres__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.postgres__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__unique_constraint_exists", "macro_sql": "\n{%- macro postgres__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    select c.oid as constraint_name\n        , upper(col.attname) as column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('p', 'u')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7814012}, "macro.dbt_constraints.postgres__foreign_key_exists": {"unique_id": "macro.dbt_constraints.postgres__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__foreign_key_exists", "macro_sql": "\n{%- macro postgres__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    select c.oid as fk_name\n        , upper(col.attname) as fk_column_name\n    from pg_constraint c\n    cross join lateral unnest(c.conkey) as con(conkey)\n    join pg_class tbl on tbl.oid = c.conrelid\n    join pg_namespace ns on ns.oid = tbl.relnamespace\n    join pg_attribute col on (col.attrelid = tbl.oid\n                            and col.attnum = con.conkey)\n    where c.contype in ('f')\n    and ns.nspname ilike '{{table_relation.schema}}'\n    and tbl.relname ilike '{{table_relation.identifier}}'\n    order by fk_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.782298}, "macro.dbt_constraints.postgres__have_references_priv": {"unique_id": "macro.dbt_constraints.postgres__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__have_references_priv", "macro_sql": "{%- macro postgres__have_references_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7829041}, "macro.dbt_constraints.postgres__have_ownership_priv": {"unique_id": "macro.dbt_constraints.postgres__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__have_ownership_priv", "macro_sql": "{%- macro postgres__have_ownership_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7835038}, "macro.dbt_constraints.postgres__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.postgres__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__drop_referential_constraints", "macro_sql": "{% macro postgres__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT IF EXISTS \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7840981}, "macro.dbt_constraints.postgres__truncate_relation": {"unique_id": "macro.dbt_constraints.postgres__truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__truncate_relation", "macro_sql": "{% macro postgres__truncate_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.784317}, "macro.dbt_constraints.postgres__drop_relation": {"unique_id": "macro.dbt_constraints.postgres__drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/postgres__create_constraints.sql", "original_file_path": "macros/postgres__create_constraints.sql", "name": "postgres__drop_relation", "macro_sql": "{% macro postgres__drop_relation(relation) -%}\n    {{ postgres__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.postgres__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.784533}, "macro.dbt_constraints.default__test_primary_key": {"unique_id": "macro.dbt_constraints.default__test_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_primary_key", "macro_sql": "\n{%- macro default__test_primary_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"primary key\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns. In\n    addition, if the unique constraint was defined with PRIMARY KEY,\n    then it requires that none of the values in the specified column or\n    columns be the null value.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return for any duplicates and if any of the key columns is null -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}, count(*)\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n        {% for column in column_names -%}\n        or {{column}} is null\n        {% endfor %}\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.78589}, "macro.dbt_constraints.default__test_unique_key": {"unique_id": "macro.dbt_constraints.default__test_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_unique_key", "macro_sql": "\n{%- macro default__test_unique_key(model, column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"unique constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A unique constraint is satisfied if and only if no two rows in\n    a table have the same non-null values in the unique columns.\"\n#}\n\n{%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) %}\n\n{#- This test will return any duplicates -#}\nwith validation_errors as (\n    select\n        {{columns_csv}}\n    from {{model}}\n    group by {{columns_csv}}\n    having count(*) > 1\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.786155}, "macro.dbt_constraints.default__test_foreign_key": {"unique_id": "macro.dbt_constraints.default__test_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "default__test_foreign_key", "macro_sql": "\n{%- macro default__test_foreign_key(model, fk_column_names, pk_table_name, pk_column_names, quote_columns=false) -%}\n{#\nNOTE: This test is designed to implement the \"referential constraint\" as specified in ANSI SQL 92 which states the following:\n   \"A referential constraint is satisfied if one of the following con-\n    ditions is true, depending on the <match option> specified in the\n    <referential constraint definition>:\n\n    -  If no <match type> was specified then, for each row R1 of the\n        referencing table, either at least one of the values of the\n        referencing columns in R1 shall be a null value, or the value of\n        each referencing column in R1 shall be equal to the value of the\n        corresponding referenced column in some row of the referenced\n        table.\"\n\nThe implications of this standard is that if one column is NULL in a compound foreign key, the other column\ndoes NOT need to match a row in a referenced unique key. This is implemented by first excluding any\nrows from the test that have a NULL value in any of the columns.\n#}\n\n{%- set fk_columns_list=dbt_constraints.get_quoted_column_list(fk_column_names, quote_columns) %}\n{%- set pk_columns_list=dbt_constraints.get_quoted_column_list(pk_column_names, quote_columns) %}\n{%- set fk_columns_csv=dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) %}\n{%- set pk_columns_csv=dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) %}\n{%- set join_conditions = [] -%}\n{%- for x in range(fk_columns_list|count) -%}\n    {%- set join_conditions = join_conditions.append( 'parent.' ~ pk_columns_list[x] ~ ' = child.' ~ fk_columns_list[x] ) -%}\n{%- endfor -%}\n\n{#- This test will return if all the columns are not null\n    and the values are not found in the referenced PK table #}\nwith child as (\n  select\n    {{fk_columns_csv}}\n  from {{model}}\n  where 1=1\n        {% for column in fk_columns_list -%}\n        and {{column}} is not null\n        {% endfor %}\n),\n\nparent as (\n    select\n        {{pk_columns_csv}}\n    from {{pk_table_name}}\n),\n\nvalidation_errors as (\n    select\n        child.*\n    from child\n    left join parent\n        on {{join_conditions | join(' and ')}}\n\n    where parent.{{pk_columns_list | first}} is null\n)\n\nselect *\nfrom validation_errors\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.get_quoted_column_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.787083}, "macro.dbt_constraints.get_quoted_column_list": {"unique_id": "macro.dbt_constraints.get_quoted_column_list", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "get_quoted_column_list", "macro_sql": "{%- macro get_quoted_column_list(column_array, quote_columns=false) -%}\n\n    {%- if not quote_columns -%}\n        {%- set column_list=column_array -%}\n    {%- elif quote_columns -%}\n        {%- set column_list=[] -%}\n        {%- for column in column_array -%}\n            {%- set column_list = column_list.append( adapter.quote(column) ) -%}\n        {%- endfor -%}\n    {%- else -%}\n        {{ exceptions.raise_compiler_error(\n            \"`quote_columns` argument must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n        ) }}\n    {%- endif -%}\n\n    {{ return(column_list) }}\n\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.787575}, "macro.dbt_constraints.get_quoted_column_csv": {"unique_id": "macro.dbt_constraints.get_quoted_column_csv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/default__test_constraints.sql", "original_file_path": "macros/default__test_constraints.sql", "name": "get_quoted_column_csv", "macro_sql": "{%- macro get_quoted_column_csv(column_array, quote_columns=false) -%}\n\n    {%- set column_list = dbt_constraints.get_quoted_column_list(column_array, quote_columns) -%}\n    {%- set columns_csv=column_list | join(', ') -%}\n    {{ return(columns_csv) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7878542}, "macro.dbt_constraints.test_primary_key": {"unique_id": "macro.dbt_constraints.test_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_primary_key", "macro_sql": "\n\n{%- test primary_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_primary_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_primary_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.7932758}, "macro.dbt_constraints.test_unique_key": {"unique_id": "macro.dbt_constraints.test_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_unique_key", "macro_sql": "{%- test unique_key(model,\n        column_name=none, column_names=[],\n        quote_columns=false) -%}\n\n    {%- if column_names|count == 0 and column_name -%}\n        {%- do column_names.append(column_name) -%}\n    {%- endif -%}\n\n    {{ return(adapter.dispatch('test_unique_key', 'dbt_constraints')(model, column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_unique_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.793668}, "macro.dbt_constraints.test_foreign_key": {"unique_id": "macro.dbt_constraints.test_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "test_foreign_key", "macro_sql": "{%- test foreign_key(model,\n        column_name=none, fk_column_name=none, fk_column_names=[],\n        pk_table_name=none, to=none,\n        pk_column_name=none, pk_column_names=[], field=none,\n        quote_columns=false) -%}\n\n    {%- if pk_column_names|count == 0 and (pk_column_name or field) -%}\n        {%- do pk_column_names.append( (pk_column_name or field) ) -%}\n    {%- endif -%}\n    {%- if fk_column_names|count == 0 and (fk_column_name or column_name) -%}\n        {%- do fk_column_names.append( (fk_column_name or column_name) ) -%}\n    {%- endif -%}\n    {%- set pk_table_name = pk_table_name or to -%}\n\n    {{ return(adapter.dispatch('test_foreign_key', 'dbt_constraints')(model, fk_column_names, pk_table_name, pk_column_names, quote_columns)) }}\n\n{%- endtest -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.default__test_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.79448}, "macro.dbt_constraints.create_primary_key": {"unique_id": "macro.dbt_constraints.create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_primary_key", "macro_sql": "\n\n{%- macro create_primary_key(table_model, column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_primary_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_primary_key"]}, "description": "Calls the adapter-specific version of the macro to create a primary key", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1665176151.914162}, "macro.dbt_constraints.create_unique_key": {"unique_id": "macro.dbt_constraints.create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_unique_key", "macro_sql": "{%- macro create_unique_key(table_model, column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_unique_key', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_unique_key"]}, "description": "Calls the adapter-specific version of the macro to create a unique key", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1665176151.915088}, "macro.dbt_constraints.create_foreign_key": {"unique_id": "macro.dbt_constraints.create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_foreign_key", "macro_sql": "{%- macro create_foreign_key(pk_model, pk_column_names, fk_model, fk_column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_foreign_key', 'dbt_constraints')(pk_model, pk_column_names, fk_model, fk_column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_foreign_key"]}, "description": "Calls the adapter-specific version of the macro to create a foreign key", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "test_model", "type": "results node", "description": "Accepts the result node of the test related to this constraint"}, {"name": "pk_model", "type": "graph node", "description": "Accepts the graph node of the parent table that has a PK or UK"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names to include in the FK reference"}, {"name": "fk_model", "type": "graph node", "description": "Accepts the graph node of the table that will have the constraint"}, {"name": "fk_column_names", "type": "array of column names", "description": "An array of text column names to include in the constraint"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1665176151.916777}, "macro.dbt_constraints.create_not_null": {"unique_id": "macro.dbt_constraints.create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_not_null", "macro_sql": "{%- macro create_not_null(table_model, column_names, verify_permissions, quote_columns=false) -%}\n    {{ return(adapter.dispatch('create_not_null', 'dbt_constraints')(table_model, column_names, verify_permissions, quote_columns)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__create_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.79553}, "macro.dbt_constraints.unique_constraint_exists": {"unique_id": "macro.dbt_constraints.unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "unique_constraint_exists", "macro_sql": "\n\n{%- macro unique_constraint_exists(table_relation, column_names) -%}\n    {{ return(adapter.dispatch('unique_constraint_exists', 'dbt_constraints')(table_relation, column_names) ) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__unique_constraint_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a PK or UK already exists", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1665176151.917452}, "macro.dbt_constraints.foreign_key_exists": {"unique_id": "macro.dbt_constraints.foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "foreign_key_exists", "macro_sql": "{%- macro foreign_key_exists(table_relation, column_names) -%}\n    {{ return(adapter.dispatch('foreign_key_exists', 'dbt_constraints')(table_relation, column_names)) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__foreign_key_exists"]}, "description": "Calls the adapter-specific version of the macro to check if a foreign key already exists", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "table_relation", "type": "relation", "description": "Accepts the relation of the table to check"}, {"name": "column_names", "type": "array of column names", "description": "An array of text column names the constraint must contain"}], "created_at": 1665176151.918116}, "macro.dbt_constraints.have_references_priv": {"unique_id": "macro.dbt_constraints.have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "have_references_priv", "macro_sql": "\n\n{%- macro have_references_priv(table_relation, verify_permissions) -%}\n    {{ return(adapter.dispatch('have_references_priv', 'dbt_constraints')(table_relation, verify_permissions) ) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.796114}, "macro.dbt_constraints.have_ownership_priv": {"unique_id": "macro.dbt_constraints.have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "have_ownership_priv", "macro_sql": "{%- macro have_ownership_priv(table_relation, verify_permissions) -%}\n    {{ return(adapter.dispatch('have_ownership_priv', 'dbt_constraints')(table_relation, verify_permissions)) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.snowflake__have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.796309}, "macro.dbt_constraints.truncate_relation": {"unique_id": "macro.dbt_constraints.truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.796543}, "macro.dbt_constraints.drop_relation": {"unique_id": "macro.dbt_constraints.drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.796704}, "macro.dbt_constraints.create_constraints": {"unique_id": "macro.dbt_constraints.create_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_constraints", "macro_sql": "\n{%- macro create_constraints(\n        constraint_types=[\n            'primary_key',\n            'unique_key',\n            'unique_combination_of_columns',\n            'unique',\n            'foreign_key',\n            'relationships',\n            'not_null'],\n        quote_columns=false) -%}\n    {%- if execute and var('dbt_constraints_enabled', false) -%}\n        {%- do log(\"Running dbt Constraints\", info=true) -%}\n\n        {%- if 'not_null' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['not_null'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'primary_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['primary_key'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'unique_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_key'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'unique_combination_of_columns' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique_combination_of_columns'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'unique' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['unique'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'foreign_key' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['foreign_key'], quote_columns) -%}\n        {%- endif -%}\n        {%- if 'relationships' in constraint_types -%}\n            {%- do dbt_constraints.create_constraints_by_type(['relationships'], quote_columns) -%}\n        {%- endif -%}\n\n        {%- do log(\"Finished dbt Constraints\", info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.create_constraints_by_type"]}, "description": "Primary macro automatically called `on-run-end` to generate primary keys, unique keys, and foreign keys. The `dbt_constraints_enabled` variable can be set to `false` in your project to disable this macro.", "meta": {}, "docs": {"show": true}, "patch_path": "dbt_constraints://macros/macros.yml", "arguments": [{"name": "constraint_types", "type": "array of constraint types", "description": "Accepts a list of tests to consider for constraint creation and whether columns should be quoted. By default it will create all the constraint types. Valid values are ['primary_key', 'unique_key', 'unique_combination_of_columns', 'unique', 'foreign_key', 'relationships']"}, {"name": "quote_columns", "type": "boolean", "description": "Whether to wrap column names in double quotes. By default this is set to false."}], "created_at": 1665176151.913193}, "macro.dbt_constraints.create_constraints_by_type": {"unique_id": "macro.dbt_constraints.create_constraints_by_type", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "create_constraints_by_type", "macro_sql": "\n{%- macro create_constraints_by_type(constraint_types, quote_columns) -%}\n\n    {#- Loop through the results and find all tests that passed and match the constraint_types -#}\n    {#- Issue #2: added condition that the where config must be empty -#}\n    {%- for res in results\n        if res.status == \"pass\"\n            and res.node.config.materialized == \"test\"\n            and res.node.test_metadata\n            and res.node.test_metadata.name is in( constraint_types )\n            and res.node.config.where is none -%}\n\n        {%- set test_model = res.node -%}\n        {%- set test_parameters = test_model.test_metadata.kwargs -%}\n        {% set ns = namespace(verify_permissions=false) %}\n\n        {#- Find the table models that are referenced by this test.\n            These models must be physical tables and cannot be sources -#}\n        {%- set table_models = [] -%}\n        {%- for node in graph.nodes.values() | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes)\n                if node.resource_type in ( ( \"model\", \"snapshot\") )\n                    if node.config.materialized in( (\"table\", \"incremental\", \"snapshot\") ) -%}\n\n                        {#- Append to our list of models &or snapshots for this test -#}\n                        {%- do table_models.append(node) -%}\n\n        {% endfor %}\n\n        {#- Check if we allow constraints on sources overall and for this specific type of constraint -#}\n        {%- if var('dbt_constraints_sources_enabled', false) and (\n                ( var('dbt_constraints_sources_pk_enabled', false) and test_model.test_metadata.name in(\"primary_key\") )\n             or ( var('dbt_constraints_sources_uk_enabled', false) and test_model.test_metadata.name in(\"unique_key\", \"unique_combination_of_columns\", \"unique\") )\n             or ( var('dbt_constraints_sources_fk_enabled', false) and test_model.test_metadata.name in(\"foreign_key\", \"relationships\") )\n             or ( var('dbt_constraints_sources_nn_enabled', false) and test_model.test_metadata.name in(\"not_null\") )\n            ) -%}\n            {%- for node in graph.sources.values()\n                | selectattr(\"resource_type\", \"equalto\", \"source\")\n                | selectattr(\"unique_id\", \"in\", test_model.depends_on.nodes) -%}\n\n                    {%- do node.update({'alias': node.alias or node.name }) -%}\n                    {#- Append to our list of models for this test -#}\n                    {%- do table_models.append(node) -%}\n                    {#- If we are using a sources, we will need to verify permissions -#}\n                    {%- set ns.verify_permissions = true -%}\n\n            {%- endfor -%}\n        {%- endif -%}\n\n\n        {#- We only create PK/UK if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- if 1 == table_models|count\n            and test_model.test_metadata.name in(\"primary_key\", \"unique_key\", \"unique_combination_of_columns\", \"unique\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for primary/unique key constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names) -%}\n                {%- if test_model.test_metadata.name == \"primary_key\" -%}\n                    {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n                    {%- do dbt_constraints.create_primary_key(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_unique_key(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping primary/unique key because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create FK if there are two models referenced by the test\n            and if all the columns exist as physical columns on the tables -#}\n        {%- elif 2 == table_models|count\n            and test_model.test_metadata.name in( \"foreign_key\", \"relationships\") -%}\n\n            {%- set fk_model = none -%}\n            {%- set pk_model = none -%}\n            {%- set fk_model_names = modules.re.findall( \"models\\W+(\\w+)\" , test_model.file_key_name)  -%}\n            {%- set fk_source_names = modules.re.findall( \"source\\W+(\\w+)\\W+(\\w+)\" , test_parameters.model)  -%}\n\n            {%- if 1 == fk_model_names | count -%}\n                {%- set fk_model = table_models | selectattr(\"name\", \"equalto\", fk_model_names[0]) | first -%}\n                {%- set pk_model = table_models | rejectattr(\"name\", \"equalto\", fk_model_names[0]) | first -%}\n            {%- elif 1 == fk_source_names | count  -%}\n                {%- if table_models[0].source_name == fk_source_names[0][0] and table_models[0].name == fk_source_names[0][1] -%}\n                    {%- set fk_model = table_models[0] -%}\n                    {%- set pk_model = table_models[1] -%}\n                {%- else  -%}\n                    {%- set fk_model = table_models[1] -%}\n                    {%- set pk_model = table_models[0] -%}\n                {%- endif -%}\n            {%- endif -%}\n            {# {%- set fk_model_name = test_model.file_key_name |replace(\"models.\", \"\") -%} #}\n\n            {%- if fk_model and pk_model -%}\n\n                {%- set fk_table_relation = api.Relation.create(\n                    database=fk_model.database,\n                    schema=fk_model.schema,\n                    identifier=fk_model.alias) -%}\n\n                {%- set pk_table_relation = api.Relation.create(\n                    database=pk_model.database,\n                    schema=pk_model.schema,\n                    identifier=pk_model.alias) -%}\n\n                {# Attempt to identify parameters we can use for the column names #}\n                {%- set pk_column_names = [] -%}\n                {%- if  test_parameters.pk_column_names -%}\n                    {%- set pk_column_names = test_parameters.pk_column_names -%}\n                {%- elif  test_parameters.field -%}\n                    {%- set pk_column_names = [test_parameters.field] -%}\n                {%- elif test_parameters.pk_column_name -%}\n                    {%- set pk_column_names = [test_parameters.pk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`pk_column_names`, `pk_column_name`, or `field` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- set fk_column_names = [] -%}\n                {%- if  test_parameters.fk_column_names -%}\n                    {%- set fk_column_names = test_parameters.fk_column_names -%}\n                {%- elif test_parameters.column_name -%}\n                    {%- set fk_column_names = [test_parameters.column_name] -%}\n                {%- elif test_parameters.fk_column_name -%}\n                    {%- set fk_column_names = [test_parameters.fk_column_name] -%}\n                {%- else -%}\n                    {{ exceptions.raise_compiler_error(\n                    \"`fk_column_names`, `fk_column_name`, or `column_name` parameter missing for foreign key constraint on table: '\" ~ fk_model.name ~ \" \" ~ test_parameters\n                    ) }}\n                {%- endif -%}\n\n                {%- if not dbt_constraints.table_columns_all_exist(pk_table_relation, pk_column_names) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the pk table: \" ~ pk_model.name ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- elif not dbt_constraints.table_columns_all_exist(fk_table_relation, fk_column_names) -%}\n                    {%- do log(\"Skipping foreign key because a physical column was not found on the fk table: \" ~ fk_model.name ~ \" \" ~ fk_column_names, info=true) -%}\n                {%- else  -%}\n                    {%- do dbt_constraints.create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, ns.verify_permissions, quote_columns) -%}\n                {%- endif -%}\n            {%- else  -%}\n                {%- do log(\"Skipping foreign key because a we couldn't find the child table: model=\" ~ fk_model_names ~ \" or source=\" ~ fk_source_names, info=true) -%}\n            {%- endif -%}\n\n        {#- We only create NN if there is one model referenced by the test\n            and if all the columns exist as physical columns on the table -#}\n        {%- elif 1 == table_models|count\n            and test_model.test_metadata.name in(\"not_null\") -%}\n\n            {# Attempt to identify a parameter we can use for the column names #}\n            {%- set column_names = [] -%}\n            {%- if  test_parameters.column_names -%}\n                {%- set column_names =  test_parameters.column_names -%}\n            {%- elif  test_parameters.combination_of_columns -%}\n                {%- set column_names =  test_parameters.combination_of_columns -%}\n            {%- elif  test_parameters.column_name -%}\n                {%- set column_names =  [test_parameters.column_name] -%}\n            {%- else  -%}\n                {{ exceptions.raise_compiler_error(\n                \"`column_names` or `column_name` parameter missing for not null constraint on table: '\" ~ table_models[0].name\n                ) }}\n            {%- endif -%}\n\n            {%- set table_relation = api.Relation.create(\n                database=table_models[0].database,\n                schema=table_models[0].schema,\n                identifier=table_models[0].alias ) -%}\n\n            {%- if dbt_constraints.table_columns_all_exist(table_relation, column_names) -%}\n                {%- do dbt_constraints.create_not_null(table_relation, column_names, ns.verify_permissions, quote_columns) -%}\n            {%- else  -%}\n                {%- do log(\"Skipping not null constraint because a physical column name was not found on the table: \" ~ table_models[0].name ~ \" \" ~ column_names, info=true) -%}\n            {%- endif -%}\n\n        {%- endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.table_columns_all_exist", "macro.dbt_constraints.create_not_null", "macro.dbt_constraints.create_primary_key", "macro.dbt_constraints.create_unique_key", "macro.dbt_constraints.create_foreign_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.806773}, "macro.dbt_constraints.table_columns_all_exist": {"unique_id": "macro.dbt_constraints.table_columns_all_exist", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "table_columns_all_exist", "macro_sql": "\n{%- macro table_columns_all_exist(table_relation, column_list) -%}\n    {%- set tab_Columns = adapter.get_columns_in_relation(table_relation) -%}\n\n    {%- set tab_column_list = [] -%}\n    {%- for column in tab_Columns -%}\n        {{ tab_column_list.append(column.name|upper) }}\n    {%- endfor -%}\n\n    {%- for column in column_list|map('upper') if column not in tab_column_list -%}\n        {{ return(false) }}\n    {%- endfor -%}\n    {{ return(true) }}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.80729}, "macro.dbt_constraints.column_list_matches": {"unique_id": "macro.dbt_constraints.column_list_matches", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/create_constraints.sql", "original_file_path": "macros/create_constraints.sql", "name": "column_list_matches", "macro_sql": "\n{%- macro column_list_matches(listA, listB) -%}\n    {# Test if A is empty or the lists are not the same size #}\n    {%- if listA | count > 0 and listA | count == listB | count  -%}\n        {# Fail if there are any columns in A that are not in B #}\n        {%- for valueFromA in listA|map('upper') -%}\n            {%- if valueFromA|upper not in listB| map('upper')  -%}\n                {{ return(false) }}\n            {%- endif -%}\n        {% endfor %}\n        {# Since we know the count is the same, A must equal B #}\n        {{ return(true) }}\n    {%- else -%}\n        {{ return(false) }}\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.807808}, "macro.dbt_constraints.snowflake__create_primary_key": {"unique_id": "macro.dbt_constraints.snowflake__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_primary_key", "macro_sql": "\n{%- macro snowflake__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.811928}, "macro.dbt_constraints.snowflake__create_unique_key": {"unique_id": "macro.dbt_constraints.snowflake__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_unique_key", "macro_sql": "\n{%- macro snowflake__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} ) RELY\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.812842}, "macro.dbt_constraints.snowflake__create_foreign_key": {"unique_id": "macro.dbt_constraints.snowflake__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_foreign_key", "macro_sql": "\n{%- macro snowflake__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) RELY\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.814197}, "macro.dbt_constraints.snowflake__create_not_null": {"unique_id": "macro.dbt_constraints.snowflake__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__create_not_null", "macro_sql": "\n{%- macro snowflake__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( \"COLUMN \" ~ column ~ \" SET NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\n                ALTER TABLE {{table_relation}} MODIFY {{ modify_statement_csv }};\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8150852}, "macro.dbt_constraints.snowflake__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.snowflake__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__unique_constraint_exists", "macro_sql": "\n{%- macro snowflake__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SHOW UNIQUE KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {%- set lookup_query -%}\n    SHOW PRIMARY KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8165429}, "macro.dbt_constraints.snowflake__foreign_key_exists": {"unique_id": "macro.dbt_constraints.snowflake__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__foreign_key_exists", "macro_sql": "\n{%- macro snowflake__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SHOW IMPORTED KEYS IN TABLE {{table_relation}}\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.817387}, "macro.dbt_constraints.snowflake__have_references_priv": {"unique_id": "macro.dbt_constraints.snowflake__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__have_references_priv", "macro_sql": "{%- macro snowflake__have_references_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n            and t.privilege_type = 'REFERENCES'\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8180008}, "macro.dbt_constraints.snowflake__have_ownership_priv": {"unique_id": "macro.dbt_constraints.snowflake__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/snowflake__create_constraints.sql", "original_file_path": "macros/snowflake__create_constraints.sql", "name": "snowflake__have_ownership_priv", "macro_sql": "{%- macro snowflake__have_ownership_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from {{table_relation.database}}.information_schema.tables t\n        join {{table_relation.database}}.information_schema.enabled_roles er on t.table_owner = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.818659}, "macro.dbt_constraints.redshift__create_primary_key": {"unique_id": "macro.dbt_constraints.redshift__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_primary_key", "macro_sql": "\n{%- macro redshift__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'PK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_pk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.823606}, "macro.dbt_constraints.redshift__create_unique_key": {"unique_id": "macro.dbt_constraints.redshift__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_unique_key", "macro_sql": "\n{%- macro redshift__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- call statement('add_uk', fetch_result=False, auto_begin=True) -%}\n            ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )\n            {%- endcall -%}\n            {{ adapter.commit() }}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.824911}, "macro.dbt_constraints.redshift__create_not_null": {"unique_id": "macro.dbt_constraints.redshift__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_not_null", "macro_sql": "\n{%- macro redshift__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because ALTER COLUMN SET NOT NULL is not supported\", info=true) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8252401}, "macro.dbt_constraints.redshift__create_foreign_key": {"unique_id": "macro.dbt_constraints.redshift__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__create_foreign_key", "macro_sql": "\n{%- macro redshift__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 127 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || md5( '{{ constraint_name }}' )::varchar as \"constraint_name\"\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- call statement('add_fk', fetch_result=False, auto_begin=True) -%}\n                --Note: ON DELETE not supported in Redshift\n                ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} ) --ON DELETE NO ACTION DEFERRABLE INITIALLY DEFERRED\n                {%- endcall -%}\n                {{ adapter.commit() }}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.826914}, "macro.dbt_constraints.redshift__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.redshift__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__unique_constraint_exists", "macro_sql": "\n{%- macro redshift__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name\n        , lower(kc.column_name) as column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type in ('PRIMARY KEY', 'UNIQUE')\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.82782}, "macro.dbt_constraints.redshift__foreign_key_exists": {"unique_id": "macro.dbt_constraints.redshift__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__foreign_key_exists", "macro_sql": "\n{%- macro redshift__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\n    SELECT\n        kc.constraint_name fk_name\n        , lower(kc.column_name) as fk_column_name\n    FROM information_schema.key_column_usage kc\n        JOIN information_schema.table_constraints tc\n            ON kc.table_name = tc.table_name\n                AND kc.table_schema = tc.table_schema\n                AND kc.constraint_name = tc.constraint_name\n    WHERE tc.constraint_type='FOREIGN KEY'\n        AND kc.table_schema ilike '{{table_relation.schema}}'\n        AND kc.table_name ilike '{{table_relation.identifier}}'\n    order by kc.constraint_name\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.828706}, "macro.dbt_constraints.redshift__have_references_priv": {"unique_id": "macro.dbt_constraints.redshift__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__have_references_priv", "macro_sql": "{%- macro redshift__have_references_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_references\"\n        from information_schema.table_privileges t\n        join information_schema.enabled_roles er on t.grantee = er.role_name\n        where upper(t.table_schema) = upper('{{table_relation.schema}}')\n            and upper(t.table_name) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_references\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.829314}, "macro.dbt_constraints.redshift__have_ownership_priv": {"unique_id": "macro.dbt_constraints.redshift__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__have_ownership_priv", "macro_sql": "{%- macro redshift__have_ownership_priv(table_relation, verify_permissions) -%}\n    {%- if verify_permissions is sameas true -%}\n\n        {%- set lookup_query -%}\n        select case when count(*) > 0 then 'y' else 'n' end as \"have_ownership\"\n        from pg_catalog.pg_tables t\n        join information_schema.enabled_roles er on t.tableowner = er.role_name\n        where upper(t.schemaname) = upper('{{table_relation.schema}}')\n        and upper(t.tablename) = upper('{{table_relation.identifier}}')\n        {%- endset -%}\n        {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n        {%- set results = run_query(lookup_query) -%}\n        {%- if \"y\" in( results.columns[\"have_ownership\"].values() ) -%}\n            {{ return(true) }}\n        {%- endif -%}\n\n        {{ return(false) }}\n    {%- else -%}\n        {{ return(true) }}\n    {%- endif -%}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.829922}, "macro.dbt_constraints.redshift__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.redshift__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__drop_referential_constraints", "macro_sql": "{% macro redshift__drop_referential_constraints(relation) -%}\n    {%- set lookup_query -%}\n    select constraint_name\n    from information_schema.table_constraints\n    where table_schema = '{{relation.schema}}'\n    and table_name='{{relation.identifier}}'\n    and constraint_type in ('FOREIGN KEY', 'PRIMARY KEY', 'UNIQUE')\n    {%- endset -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n\n    {%- for constraint_name in constraint_list.columns[\"constraint_name\"].values() -%}\n        {%- do log(\"Dropping constraint: \" ~ constraint_name ~ \" from table \" ~ relation, info=false) -%}\n        {%- call statement('drop_constraint_cascade', fetch_result=False, auto_begin=True) -%}\n        ALTER TABLE {{relation}} DROP CONSTRAINT \"{{constraint_name}}\" CASCADE\n        {%- endcall -%}\n        {{ adapter.commit() }}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.830518}, "macro.dbt_constraints.redshift__truncate_relation": {"unique_id": "macro.dbt_constraints.redshift__truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__truncate_relation", "macro_sql": "{% macro redshift__truncate_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.830736}, "macro.dbt_constraints.redshift__drop_relation": {"unique_id": "macro.dbt_constraints.redshift__drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/redshift__create_constraints.sql", "original_file_path": "macros/redshift__create_constraints.sql", "name": "redshift__drop_relation", "macro_sql": "{% macro redshift__drop_relation(relation) -%}\n    {{ redshift__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.redshift__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.830952}, "macro.dbt_constraints.oracle__create_primary_key": {"unique_id": "macro.dbt_constraints.oracle__create_primary_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_primary_key", "macro_sql": "\n{%- macro oracle__create_primary_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_PK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'PK_' ||  ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} PRIMARY KEY ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating primary key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8352342}, "macro.dbt_constraints.oracle__create_unique_key": {"unique_id": "macro.dbt_constraints.oracle__create_unique_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_unique_key", "macro_sql": "\n{%- macro oracle__create_unique_key(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set constraint_name = (table_relation.identifier ~ \"_\" ~ column_names|join('_') ~ \"_UK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'UK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set columns_csv = dbt_constraints.get_quoted_column_csv(column_names, quote_columns) -%}\n\n    {#- Check that the table does not already have this PK/UK -#}\n    {%- if not dbt_constraints.unique_constraint_exists(table_relation, column_names) -%}\n\n        {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} ADD CONSTRAINT {{constraint_name}} UNIQUE ( {{columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating unique key: \" ~ constraint_name, info=true) -%}\n            {%- do run_query(query) -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ table_relation, info=false) -%}\n        {%- endif -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because PK/UK already exists: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.have_ownership_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.836513}, "macro.dbt_constraints.oracle__create_foreign_key": {"unique_id": "macro.dbt_constraints.oracle__create_foreign_key", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_foreign_key", "macro_sql": "\n{%- macro oracle__create_foreign_key(pk_table_relation, pk_column_names, fk_table_relation, fk_column_names, verify_permissions, quote_columns=true) -%}\n    {%- set constraint_name = (fk_table_relation.identifier ~ \"_\" ~ fk_column_names|join('_') ~ \"_FK\") | upper -%}\n\n    {%- if constraint_name|length > 30 %}\n        {%- set constraint_name_query %}\n        select  'FK_' || ora_hash( '{{ constraint_name }}' ) as \"constraint_name\" from dual\n        {%- endset -%}\n        {%- set results = run_query(constraint_name_query) -%}\n        {%- set constraint_name = results.columns[0].values()[0] -%}\n    {% endif %}\n\n    {%- set fk_columns_csv = dbt_constraints.get_quoted_column_csv(fk_column_names, quote_columns) -%}\n    {%- set pk_columns_csv = dbt_constraints.get_quoted_column_csv(pk_column_names, quote_columns) -%}\n    {#- Check that the PK table has a PK or UK -#}\n    {%- if dbt_constraints.unique_constraint_exists(pk_table_relation, pk_column_names) -%}\n        {#- Check if the table already has this foreign key -#}\n        {%- if not dbt_constraints.foreign_key_exists(fk_table_relation, fk_column_names) -%}\n\n            {%- if dbt_constraints.have_ownership_priv(fk_table_relation, verify_permissions) and dbt_constraints.have_references_priv(pk_table_relation, verify_permissions) -%}\n\n                {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{fk_table_relation}} ADD CONSTRAINT {{constraint_name}} FOREIGN KEY ( {{fk_columns_csv}} ) REFERENCES {{pk_table_relation}} ( {{pk_columns_csv}} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n                {%- endset -%}\n                {%- do log(\"Creating foreign key: \" ~ constraint_name ~ \" referencing \" ~ pk_table_relation.identifier ~ \" \" ~ pk_column_names, info=true) -%}\n                {%- do run_query(query) -%}\n\n            {%- else -%}\n                {%- do log(\"Skipping \" ~ constraint_name ~ \" because of insufficient privileges: \" ~ fk_table_relation ~ \" referencing \" ~ pk_table_relation, info=true) -%}\n            {%- endif -%}\n\n        {%- else -%}\n            {%- do log(\"Skipping \" ~ constraint_name ~ \" because FK already exists: \" ~ fk_table_relation ~ \" \" ~ fk_column_names, info=false) -%}\n        {%- endif -%}\n    {%- else -%}\n        {%- do log(\"Skipping \" ~ constraint_name ~ \" because a PK/UK was not found on the PK table: \" ~ pk_table_relation ~ \" \" ~ pk_column_names, info=true) -%}\n    {%- endif -%}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_constraints.get_quoted_column_csv", "macro.dbt_constraints.unique_constraint_exists", "macro.dbt_constraints.foreign_key_exists", "macro.dbt_constraints.have_ownership_priv", "macro.dbt_constraints.have_references_priv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.838159}, "macro.dbt_constraints.oracle__create_not_null": {"unique_id": "macro.dbt_constraints.oracle__create_not_null", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__create_not_null", "macro_sql": "\n{%- macro oracle__create_not_null(table_relation, column_names, verify_permissions, quote_columns=false) -%}\n    {%- set columns_list = dbt_constraints.get_quoted_column_list(column_names, quote_columns) -%}\n\n    {%- if dbt_constraints.have_ownership_priv(table_relation, verify_permissions) -%}\n\n            {%- set modify_statements= [] -%}\n            {%- for column in columns_list -%}\n                {%- set modify_statements = modify_statements.append( column ~ \" NOT NULL\" ) -%}\n            {%- endfor -%}\n            {%- set modify_statement_csv = modify_statements | join(\", \") -%}\n            {%- set query -%}\nBEGIN\n    EXECUTE IMMEDIATE 'ALTER TABLE {{table_relation}} MODIFY ( {{ modify_statement_csv }} )';\nEXCEPTION\n    WHEN OTHERS THEN\n        DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n        DBMS_OUTPUT.PUT_LINE('Unable to create constraint: ' || SQLERRM);\nEND;\n            {%- endset -%}\n            {%- do log(\"Creating not null constraint for: \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation, info=true) -%}\n            {%- do run_query(query) -%}\n\n    {%- else -%}\n        {%- do log(\"Skipping not null constraint for \" ~ columns_list | join(\", \") ~ \" in \" ~ table_relation ~ \" because of insufficient privileges: \" ~ table_relation, info=true) -%}\n    {%- endif -%}\n{%- endmacro -%}\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.get_quoted_column_list", "macro.dbt_constraints.have_ownership_priv", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.839065}, "macro.dbt_constraints.oracle__unique_constraint_exists": {"unique_id": "macro.dbt_constraints.oracle__unique_constraint_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__unique_constraint_exists", "macro_sql": "\n{%- macro oracle__unique_constraint_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"constraint_name\",\n    upper(cols.column_name) as \"column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'P', 'U' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"constraint_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}#}\n\n    {#- If we get this far then the table does not have either constraint -#}\n    {%- do log(\"No PK/UK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8399758}, "macro.dbt_constraints.oracle__foreign_key_exists": {"unique_id": "macro.dbt_constraints.oracle__foreign_key_exists", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__foreign_key_exists", "macro_sql": "\n{%- macro oracle__foreign_key_exists(table_relation, column_names) -%}\n    {%- set lookup_query -%}\nselect\n    cols.constraint_name as \"fk_name\",\n    upper(cols.column_name) as \"fk_column_name\"\nfrom\n         all_constraints cons\n    join all_cons_columns cols on cons.constraint_name = cols.constraint_name\n                                  and cons.owner = cols.owner\nwhere\n    cons.constraint_type in ( 'R' )\n    and upper(cons.owner) = upper('{{table_relation.schema}}')\n    and upper(cons.table_name) = upper('{{table_relation.identifier}}')\norder by 1, 2\n    {%- endset -%}\n    {%- do log(\"Lookup: \" ~ lookup_query, info=false) -%}\n    {%- set constraint_list = run_query(lookup_query) -%}\n    {%- if constraint_list.columns[\"fk_column_name\"].values() | count > 0 -%}\n        {%- for constraint in constraint_list.group_by(\"fk_name\") -%}\n            {%- if dbt_constraints.column_list_matches(constraint.columns[\"fk_column_name\"].values(), column_names ) -%}\n                {%- do log(\"Found FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n                {{ return(true) }}\n            {%- endif -%}\n        {% endfor %}\n    {%- endif -%}\n\n    {#- If we get this far then the table does not have this constraint -#}\n    {%- do log(\"No FK key: \" ~ table_relation ~ \" \" ~ column_names, info=false) -%}\n    {{ return(false) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_utils.group_by", "macro.dbt_constraints.column_list_matches"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.840873}, "macro.dbt_constraints.oracle__have_references_priv": {"unique_id": "macro.dbt_constraints.oracle__have_references_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__have_references_priv", "macro_sql": "\n{%- macro oracle__have_references_priv(table_relation, verify_permissions) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8410041}, "macro.dbt_constraints.oracle__have_ownership_priv": {"unique_id": "macro.dbt_constraints.oracle__have_ownership_priv", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__have_ownership_priv", "macro_sql": "\n{%- macro oracle__have_ownership_priv(table_relation, verify_permissions) -%}\n    {{ return(true) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.841126}, "macro.dbt_constraints.oracle__drop_referential_constraints": {"unique_id": "macro.dbt_constraints.oracle__drop_referential_constraints", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__drop_referential_constraints", "macro_sql": "{% macro oracle__drop_referential_constraints(relation) -%}\n    {%- call statement('drop_constraint_cascade') -%}\nBEGIN\n    FOR REC IN (\n        SELECT constraint_name\n        FROM all_constraints cons\n        WHERE cons.constraint_type IN ('P', 'U', 'R')\n            AND upper(cons.owner) = upper('{{relation.schema}}')\n            AND upper(cons.table_name) = upper('{{relation.identifier}}')\n        ORDER BY 1\n    ) LOOP\n        BEGIN\n            EXECUTE IMMEDIATE 'ALTER TABLE {{relation}} DROP CONSTRAINT \"'||REC.CONSTRAINT_NAME||'\" CASCADE';\n        EXCEPTION\n            WHEN OTHERS THEN\n                DBMS_OUTPUT.ENABLE(BUFFER_SIZE => NULL);\n                DBMS_OUTPUT.PUT_LINE('Unable to drop constraint: ' || SQLERRM);\n        END;\n    END LOOP;\nEND;\n    {%- endcall -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.841364}, "macro.dbt_constraints.oracle__truncate_relation": {"unique_id": "macro.dbt_constraints.oracle__truncate_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__truncate_relation", "macro_sql": "{% macro oracle__truncate_relation(relation) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.truncate_relation", "macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.841582}, "macro.dbt_constraints.oracle__drop_relation": {"unique_id": "macro.dbt_constraints.oracle__drop_relation", "package_name": "dbt_constraints", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_constraints", "path": "macros/oracle__create_constraints.sql", "original_file_path": "macros/oracle__create_constraints.sql", "name": "oracle__drop_relation", "macro_sql": "{% macro oracle__drop_relation(relation) -%}\n    {{ oracle__drop_referential_constraints(relation) }}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_constraints.oracle__drop_referential_constraints", "macro.dbt_constraints.drop_relation", "macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.841797}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8445828}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8454661}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.847808}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.848831}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.850388}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.851126}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8517509}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.852492}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8540149}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.856867}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.858669}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8634398}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.864296}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.865407}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8657632}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.867636}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8679192}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.868313}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.868503}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.868667}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.869691}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.871285}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.872212}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.872652}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.874759}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8751428}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8763}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.876836}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8771808}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.87747}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.877596}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8778932}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.878025}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.87834}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.87847}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.883577}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.883893}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.884019}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.884299}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8844109}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8848221}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.884892}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.884962}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.885034}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.885185}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.885256}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8853261}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.885392}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.886003}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.886184}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.886369}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.886513}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.886662}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.886994}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.887104}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8872051}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.88736}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.887706}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.887775}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.887844}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.887918}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.887985}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.888049}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.888302}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.888764}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.888971}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.889171}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.890301}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.891021}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.891937}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8922272}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.892826}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.8975968}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.898189}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.898651}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.899895}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.900193}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.900296}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.900865}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9018822}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.902507}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9030569}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.903856}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.904476}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9054568}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.906448}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.907465}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.907765}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9083269}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.909424}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.910023}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9111738}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9116008}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.912786}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.91479}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_utils.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.915478}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.916656}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.917631}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9179142}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.918644}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9190028}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.920191}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9206111}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.92197}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.92242}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.922928}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.923328}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9243038}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.925174}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9260612}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.927468}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.927953}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.928252}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.929018}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9301848}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9312372}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.931513}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.931953}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.932435}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.933227}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.934035}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9349031}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.935724}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9366}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.937477}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.939029}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.939827}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.94072}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.941369}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9421592}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.943458}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9438322}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.94463}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.945419}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9460852}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.946966}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.947728}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9515572}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.954803}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.955339}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.9564312}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.957364}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.957876}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.959599}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.960865}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.963493}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.964393}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.96502}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.965711}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/ericlaurello/git/thorchain_models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1665176149.967058}}, "docs": {"thorchain_models.to_address": {"unique_id": "thorchain_models.to_address", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/to_address.md", "original_file_path": "models/descriptions/to_address.md", "name": "to_address", "block_contents": "The receiving address for this event"}, "thorchain_models.blockchain": {"unique_id": "thorchain_models.blockchain", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/blockchain.md", "original_file_path": "models/descriptions/blockchain.md", "name": "blockchain", "block_contents": "The name of the blockchain"}, "thorchain_models.sk": {"unique_id": "thorchain_models.sk", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/sk.md", "original_file_path": "models/descriptions/sk.md", "name": "sk", "block_contents": "The surrogate key for the table. Will be unique and is used as a foreign key in other tables"}, "thorchain_models.tx_id": {"unique_id": "thorchain_models.tx_id", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/tx_id.md", "original_file_path": "models/descriptions/tx_id.md", "name": "tx_id", "block_contents": "The unique transaction id"}, "thorchain_models.from_address": {"unique_id": "thorchain_models.from_address", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/from_address.md", "original_file_path": "models/descriptions/from_address.md", "name": "from_address", "block_contents": "The sending address for this event"}, "thorchain_models.block_date": {"unique_id": "thorchain_models.block_date", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/block_date.md", "original_file_path": "models/descriptions/block_date.md", "name": "block_date", "block_contents": "Date of block minting(without a timezone)"}, "thorchain_models.asset": {"unique_id": "thorchain_models.asset", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/asset.md", "original_file_path": "models/descriptions/asset.md", "name": "asset", "block_contents": "Asset name or pool name"}, "thorchain_models.address": {"unique_id": "thorchain_models.address", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/address.md", "original_file_path": "models/descriptions/address.md", "name": "address", "block_contents": "The account public key"}, "thorchain_models.bond_type": {"unique_id": "thorchain_models.bond_type", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/bond_type.md", "original_file_path": "models/descriptions/bond_type.md", "name": "bond_type", "block_contents": "There are 4 different types of bond:bond_reward, bond_paid, bond_cost, bond_returned"}, "thorchain_models.block_id": {"unique_id": "thorchain_models.block_id", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/block_id.md", "original_file_path": "models/descriptions/block_id.md", "name": "block_id", "block_contents": "ID of the confirmed block"}, "thorchain_models.memo": {"unique_id": "thorchain_models.memo", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/memo.md", "original_file_path": "models/descriptions/memo.md", "name": "memo", "block_contents": "The memo for this event"}, "thorchain_models.pool_name": {"unique_id": "thorchain_models.pool_name", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/pool_name.md", "original_file_path": "models/descriptions/pool_name.md", "name": "pool_name", "block_contents": "Name of the pool -- also asset name in other tables"}, "thorchain_models.block_timestamp": {"unique_id": "thorchain_models.block_timestamp", "package_name": "thorchain_models", "root_path": "/Users/ericlaurello/git/thorchain_models", "path": "descriptions/block_timestamp.md", "original_file_path": "models/descriptions/block_timestamp.md", "name": "block_timestamp", "block_contents": "Timestamp of block minting(without a timezone)"}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/homebrew/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.thorchain_models.bronze__slash_amounts": ["source.thorchain_models.thorchain_midgard.midgard_slash_events"], "model.thorchain_models.bronze__gas_events": ["source.thorchain_models.thorchain_midgard.midgard_gas_events"], "model.thorchain_models.bronze__inactive_vault_events": ["source.thorchain_models.thorchain_midgard.midgard_inactive_vault_events"], "model.thorchain_models.bronze__slash_points": ["source.thorchain_models.thorchain_midgard.midgard_slash_points_events"], "model.thorchain_models.bronze__new_node_events": ["source.thorchain_models.thorchain_midgard.midgard_new_node_events"], "model.thorchain_models.bronze__rewards_events": ["source.thorchain_models.thorchain_midgard.midgard_rewards_events"], "model.thorchain_models.bronze__bond_events": ["source.thorchain_models.thorchain_midgard.midgard_bond_events"], "model.thorchain_models.bronze__unstake_events": ["source.thorchain_models.thorchain_midgard.midgard_unstake_events"], "model.thorchain_models.bronze__pending_liquidity_events": ["source.thorchain_models.thorchain_midgard.midgard_pending_liquidity_events"], "model.thorchain_models.bronze__swap_events": ["source.thorchain_models.thorchain_midgard.midgard_swap_events"], "model.thorchain_models.bronze__errata_events": ["source.thorchain_models.thorchain_midgard.midgard_errata_events"], "model.thorchain_models.bronze__stake_events": ["source.thorchain_models.thorchain_midgard.midgard_stake_events"], "model.thorchain_models.bronze__block_pool_depths": ["source.thorchain_models.thorchain_midgard.midgard_block_pool_depths"], "model.thorchain_models.bronze__set_version_events": ["source.thorchain_models.thorchain_midgard.midgard_set_version_events"], "model.thorchain_models.bronze__add_events": ["source.thorchain_models.thorchain_midgard.midgard_add_events"], "model.thorchain_models.bronze__pool_balance_change_events": ["source.thorchain_models.thorchain_midgard.midgard_pool_balance_change_events"], "model.thorchain_models.bronze__block_log": ["source.thorchain_models.thorchain_midgard.midgard_block_log"], "model.thorchain_models.bronze__transfer_events": ["source.thorchain_models.thorchain_midgard.midgard_transfer_events"], "model.thorchain_models.bronze__switch_events": ["source.thorchain_models.thorchain_midgard.midgard_switch_events"], "model.thorchain_models.bronze__asgard_fund_yggdrasil_events": ["source.thorchain_models.thorchain_midgard.midgard_asgard_fund_yggdrasil_events"], "model.thorchain_models.bronze__set_mimir_events": ["source.thorchain_models.thorchain_midgard.midgard_set_mimir_events"], "model.thorchain_models.bronze__fee_events": ["source.thorchain_models.thorchain_midgard.midgard_fee_events"], "model.thorchain_models.bronze__reserve_events": ["source.thorchain_models.thorchain_midgard.midgard_reserve_events"], "model.thorchain_models.bronze__refund_events": ["source.thorchain_models.thorchain_midgard.midgard_refund_events"], "model.thorchain_models.bronze__active_vault_events": ["source.thorchain_models.thorchain_midgard.midgard_active_vault_events"], "model.thorchain_models.bronze__validator_request_leave_events": ["source.thorchain_models.thorchain_midgard.midgard_validator_request_leave_events"], "model.thorchain_models.bronze__rewards_event_entries": ["source.thorchain_models.thorchain_midgard.midgard_rewards_event_entries"], "model.thorchain_models.bronze__update_node_account_status_events": ["source.thorchain_models.thorchain_midgard.midgard_update_node_account_status_events"], "model.thorchain_models.bronze__set_ip_address_events": ["source.thorchain_models.thorchain_midgard.midgard_set_ip_address_events"], "model.thorchain_models.bronze__outbound_events": ["source.thorchain_models.thorchain_midgard.midgard_outbound_events"], "model.thorchain_models.bronze__constants": ["source.thorchain_models.thorchain_midgard.midgard_constants"], "model.thorchain_models.bronze__thorname_change_events": ["source.thorchain_models.thorchain_midgard.midgard_thorname_change_events"], "model.thorchain_models.bronze__pool_events": ["source.thorchain_models.thorchain_midgard.midgard_pool_events"], "model.thorchain_models.bronze__set_node_keys_events": ["source.thorchain_models.thorchain_midgard.midgard_set_node_keys_events"], "model.thorchain_models.silver__daily_tvl": ["model.thorchain_models.silver__prices", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__total_value_locked"], "model.thorchain_models.silver__outbound_events": ["model.thorchain_models.bronze__outbound_events"], "model.thorchain_models.silver__daily_pool_stats": ["model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__prices"], "model.thorchain_models.silver__daily_earnings": ["model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__prices"], "model.thorchain_models.silver__inactive_vault_events": ["model.thorchain_models.bronze__inactive_vault_events"], "model.thorchain_models.silver__asgard_fund_yggdrasil_events": ["model.thorchain_models.bronze__asgard_fund_yggdrasil_events"], "model.thorchain_models.silver__transfers": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__transfer_events"], "model.thorchain_models.silver__block_pool_depths": ["model.thorchain_models.bronze__block_pool_depths"], "model.thorchain_models.silver__set_mimir_events": ["model.thorchain_models.bronze__set_mimir_events"], "model.thorchain_models.silver__pool_block_statistics": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__pool_events", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__unstake_events", "model.thorchain_models.silver__unstake_events"], "model.thorchain_models.silver__liquidity_actions": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__stake_events", "model.thorchain_models.silver__unstake_events"], "model.thorchain_models.silver__refund_events": ["model.thorchain_models.bronze__refund_events"], "model.thorchain_models.silver__validator_request_leave_events": ["model.thorchain_models.bronze__validator_request_leave_events"], "model.thorchain_models.silver__transfer_events": ["model.thorchain_models.bronze__transfer_events"], "model.thorchain_models.silver__total_value_locked": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__bond_events"], "model.thorchain_models.silver__bond_events": ["model.thorchain_models.bronze__bond_events"], "model.thorchain_models.silver__update_node_account_status_events": ["model.thorchain_models.bronze__update_node_account_status_events"], "model.thorchain_models.silver__swaps": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__swap_events"], "model.thorchain_models.silver__swap_events": ["model.thorchain_models.bronze__swap_events"], "model.thorchain_models.silver__rewards_events": ["model.thorchain_models.bronze__rewards_events"], "model.thorchain_models.silver__pool_block_fees": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__rewards_event_entries", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__swap_events"], "model.thorchain_models.silver__switch_events": ["model.thorchain_models.bronze__switch_events"], "model.thorchain_models.silver__fee_events": ["model.thorchain_models.bronze__fee_events"], "model.thorchain_models.silver__add_events": ["model.thorchain_models.bronze__add_events"], "model.thorchain_models.silver__unstake_events": ["model.thorchain_models.bronze__unstake_events"], "model.thorchain_models.silver__pool_balance_change_events": ["model.thorchain_models.bronze__pool_balance_change_events"], "model.thorchain_models.silver__block_rewards": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__rewards_event_entries", "model.thorchain_models.silver__rewards_events", "model.thorchain_models.silver__swap_events", "model.thorchain_models.silver__update_node_account_status_events"], "model.thorchain_models.silver__errata_events": ["model.thorchain_models.bronze__errata_events"], "model.thorchain_models.silver__upgrades": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__switch_events"], "model.thorchain_models.silver__reserve_events": ["model.thorchain_models.bronze__reserve_events"], "model.thorchain_models.silver__set_node_keys_events": ["model.thorchain_models.bronze__set_node_keys_events"], "model.thorchain_models.silver__block_log": ["model.thorchain_models.bronze__block_log"], "model.thorchain_models.silver__stake_events": ["model.thorchain_models.bronze__stake_events"], "model.thorchain_models.silver__rewards_event_entries": ["model.thorchain_models.bronze__rewards_event_entries"], "model.thorchain_models.silver__set_ip_address_events": ["model.thorchain_models.bronze__set_ip_address_events"], "model.thorchain_models.silver__prices": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_pool_depths"], "model.thorchain_models.silver__total_block_rewards": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_log", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__rewards_event_entries", "model.thorchain_models.silver__rewards_events"], "model.thorchain_models.silver__pending_liquidity_events": ["model.thorchain_models.bronze__pending_liquidity_events"], "model.thorchain_models.silver__slash_points": ["model.thorchain_models.bronze__slash_points"], "model.thorchain_models.silver__gas_events": ["model.thorchain_models.bronze__gas_events"], "model.thorchain_models.silver__pool_events": ["model.thorchain_models.bronze__pool_events"], "model.thorchain_models.silver__set_version_events": ["model.thorchain_models.bronze__set_version_events"], "model.thorchain_models.silver__active_vault_events": ["model.thorchain_models.bronze__active_vault_events"], "model.thorchain_models.silver__slash_amounts": ["model.thorchain_models.bronze__slash_amounts"], "model.thorchain_models.silver__pool_block_balances": ["model.thorchain_models.silver__block_log", "model.thorchain_models.silver__block_pool_depths", "model.thorchain_models.silver__prices"], "model.thorchain_models.silver__constants": ["model.thorchain_models.bronze__constants"], "model.thorchain_models.silver__new_node_events": ["model.thorchain_models.bronze__new_node_events"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.thorchain_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6": ["model.thorchain_models.silver__transfer_events"], "test.thorchain_models.not_null_silver__transfer_events_ASSET.4d061223da": ["model.thorchain_models.silver__transfer_events"], "test.thorchain_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d": ["model.thorchain_models.silver__transfer_events"], "test.thorchain_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb": ["model.thorchain_models.silver__transfer_events"], "test.thorchain_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291": ["model.thorchain_models.silver__transfer_events"], "test.thorchain_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547": ["model.thorchain_models.silver__validator_request_leave_events"], "test.thorchain_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26": ["model.thorchain_models.silver__validator_request_leave_events"], "test.thorchain_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f": ["model.thorchain_models.silver__validator_request_leave_events"], "test.thorchain_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e": ["model.thorchain_models.silver__validator_request_leave_events"], "test.thorchain_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793": ["model.thorchain_models.silver__validator_request_leave_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee": ["model.thorchain_models.silver__validator_request_leave_events"], "test.thorchain_models.not_null_silver__refund_events_TX_ID.d818e4a9c0": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_ASSET.8d91917f0d": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_ASSET_E8.2e099ee072": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_CODE.fee514c705": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_REASON.080b9527d1": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50": ["model.thorchain_models.silver__refund_events"], "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT.f7115d2d81": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT_USD.520ffc3716": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5": ["model.thorchain_models.silver__liquidity_actions"], "test.thorchain_models.not_null_silver__total_value_locked_DAY.5d7ba86e85": ["model.thorchain_models.silver__total_value_locked"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__1.0a174f17b5": ["model.thorchain_models.silver__total_value_locked"], "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a": ["model.thorchain_models.silver__total_value_locked"], "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f": ["model.thorchain_models.silver__total_value_locked"], "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40": ["model.thorchain_models.silver__total_value_locked"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a": ["model.thorchain_models.silver__total_value_locked"], "test.thorchain_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83": ["model.thorchain_models.silver__update_node_account_status_events"], "test.thorchain_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7": ["model.thorchain_models.silver__update_node_account_status_events"], "test.thorchain_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99": ["model.thorchain_models.silver__update_node_account_status_events"], "test.thorchain_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b": ["model.thorchain_models.silver__update_node_account_status_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP.d4b84a39d2": ["model.thorchain_models.silver__update_node_account_status_events"], "test.thorchain_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0": ["model.thorchain_models.silver__bond_events"], "test.thorchain_models.not_null_silver__bond_events_TX_ID.d18467b918": ["model.thorchain_models.silver__bond_events"], "test.thorchain_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174": ["model.thorchain_models.silver__bond_events"], "test.thorchain_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e": ["model.thorchain_models.silver__bond_events"], "test.thorchain_models.not_null_silver__bond_events_E8.c19384976b": ["model.thorchain_models.silver__bond_events"], "test.thorchain_models.not_null_silver__switch_events_BLOCK_TIMESTAMP.b941c05110": ["model.thorchain_models.silver__switch_events"], "test.thorchain_models.not_null_silver__switch_events_TO_ADDRESS.736ede374c": ["model.thorchain_models.silver__switch_events"], "test.thorchain_models.not_null_silver__switch_events_BURN_ASSET.6194d1cd04": ["model.thorchain_models.silver__switch_events"], "test.thorchain_models.not_null_silver__switch_events_FROM_ADDRESS.5dfa330f9f": ["model.thorchain_models.silver__switch_events"], "test.thorchain_models.not_null_silver__switch_events_BURN_E8.11e4de9978": ["model.thorchain_models.silver__switch_events"], "test.thorchain_models.not_null_silver__switch_events_MINT_E8.2d0496b427": ["model.thorchain_models.silver__switch_events"], "test.thorchain_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__1.9f4ccb4419": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE.eb022a7e93": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES.66a098c1a6": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef": ["model.thorchain_models.silver__pool_block_fees"], "test.thorchain_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9": ["model.thorchain_models.silver__rewards_events"], "test.thorchain_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73": ["model.thorchain_models.silver__rewards_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047": ["model.thorchain_models.silver__rewards_events"], "test.thorchain_models.not_null_silver__swap_events_TX_ID.ba927b5821": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_FROM_E8.74389cdde1": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_TO_ASSET.2a903da825": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_TO_E8.5ad719c657": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_MEMO.29e2c5dd27": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_POOL_NAME.e529db3476": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8.07299825ee": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events__DIRECTION.910c1bf98a": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_RUNE_E8___DIRECTION__BLOCK_TIMESTAMP.aa043dec13": ["model.thorchain_models.silver__swap_events"], "test.thorchain_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__1.3593f474c4": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_TX_ID.429c1bdd9e": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE.a31fbfd0f7": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE_USD.630f16402c": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swaps_TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.acd20d2a09": ["model.thorchain_models.silver__swaps"], "test.thorchain_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a": ["model.thorchain_models.silver__fee_events"], "test.thorchain_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8": ["model.thorchain_models.silver__fee_events"], "test.thorchain_models.not_null_silver__fee_events_ASSET.3832e5408e": ["model.thorchain_models.silver__fee_events"], "test.thorchain_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475": ["model.thorchain_models.silver__fee_events"], "test.thorchain_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e": ["model.thorchain_models.silver__fee_events"], "test.thorchain_models.not_null_silver__unstake_events_TX_ID.9f93ff63dc": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_BLOCKCHAIN.e25187dab1": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_FROM_ADDRESS.67dcb74bba": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_TO_ADDRESS.5ebf6180c6": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_ASSET.e9f4a9746f": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_ASSET_E8.54abd36fd1": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_EMIT_ASSET_E8.1b1e210854": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_EMIT_RUNE_E8.f53214feaa": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_MEMO.dce0d87908": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_POOL_NAME.79317b5248": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_STAKE_UNITS.d2d003bdfe": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_BASIS_POINTS.df77f8aa06": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_ASYMMETRY.3c353041f3": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8.92e6f434df": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8.3525499a5a": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__unstake_events_BLOCK_TIMESTAMP.f37d91fcf1": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__unstake_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP.bd91a0a83d": ["model.thorchain_models.silver__unstake_events"], "test.thorchain_models.not_null_silver__add_events_TX_ID.3e7dfb5274": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__add_events_MEMO.111566b9b2": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__add_events_RUNE_E8.4f27ad7cc3": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__add_events_POOL_NAME.66d963165a": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9": ["model.thorchain_models.silver__add_events"], "test.thorchain_models.not_null_silver__block_rewards_DAY.202d1b684a": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__1.05867e3497": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d": ["model.thorchain_models.silver__block_rewards"], "test.thorchain_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9": ["model.thorchain_models.silver__pool_balance_change_events"], "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a": ["model.thorchain_models.silver__pool_balance_change_events"], "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_AMOUNT.1a0e408609": ["model.thorchain_models.silver__pool_balance_change_events"], "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_ADD.1cfcf54a13": ["model.thorchain_models.silver__pool_balance_change_events"], "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710": ["model.thorchain_models.silver__pool_balance_change_events"], "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793": ["model.thorchain_models.silver__pool_balance_change_events"], "test.thorchain_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926": ["model.thorchain_models.silver__pool_balance_change_events"], "test.thorchain_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__outbound_events_ASSET_E8.e28187620c": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__outbound_events_MEMO.88f8ed52e8": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7": ["model.thorchain_models.silver__outbound_events"], "test.thorchain_models.not_null_silver__daily_tvl_DAY.b4b5f55703": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__1.c4d0d5f594": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093": ["model.thorchain_models.silver__daily_tvl"], "test.thorchain_models.not_null_silver__daily_earnings_DAY.507c4965f2": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__1.1bba89d3fd": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244": ["model.thorchain_models.silver__daily_earnings"], "test.thorchain_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__1.4a002d4fdf": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_LIQUIDITY.9a12031e05": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE.b781c85c5c": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE_USD.49c02d7724": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD.3a6babb532": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY.e35cdf38a2": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD.b1b68e9efc": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP.b89bdb784c": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT.3e93a8e08c": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE.8ec30e912b": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD.d97e13aeae": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME.2af93618fb": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE.fa14408704": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES.e16f506989": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d": ["model.thorchain_models.silver__daily_pool_stats"], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.7eec23c0d9": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_TX_ID.5c8429a2d6": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET.4b14ad0d1c": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8.97d75351f4": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY.b769677902": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__asgard_fund_yggdrasil_events_EVENT_ID__TX_ID__ASSET__ASSET_E8__VAULT_KEY__BLOCK_TIMESTAMP.3ef17ff2a7": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__thor_0_9a_zA_Z_39_.f2dba09fd9": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__thor_0_9a_zA_Z_39_.004ec62530": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT.f5e577a890": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT_USD.9c1469e6f5": ["model.thorchain_models.silver__transfers"], "test.thorchain_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914": ["model.thorchain_models.silver__block_pool_depths"], "test.thorchain_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602": ["model.thorchain_models.silver__block_pool_depths"], "test.thorchain_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf": ["model.thorchain_models.silver__block_pool_depths"], "test.thorchain_models.not_null_silver__block_pool_depths_RUNE_E8.773bfaa76a": ["model.thorchain_models.silver__block_pool_depths"], "test.thorchain_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72": ["model.thorchain_models.silver__block_pool_depths"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3": ["model.thorchain_models.silver__block_pool_depths"], "test.thorchain_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__1.e3c9116788": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME.dc4fce7fce": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_RUNE_DEPTH.ba24bcf4aa": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_STATUS.12571911dc": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP.4ffb26f47a": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_COUNT.3734626432": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_FEES.dcc05b09f6": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_VOLUME.39f8343ad9": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME.2c6f4ae4b2": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e": ["model.thorchain_models.silver__pool_block_statistics"], "test.thorchain_models.not_null_silver__prices_BLOCK_ID.b3347041fc": ["model.thorchain_models.silver__prices"], "test.thorchain_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f": ["model.thorchain_models.silver__prices"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e": ["model.thorchain_models.silver__prices"], "test.thorchain_models.not_null_silver__prices_PRICE_RUNE_ASSET.3b8a85b233": ["model.thorchain_models.silver__prices"], "test.thorchain_models.not_null_silver__prices_PRICE_ASSET_RUNE.19b631d861": ["model.thorchain_models.silver__prices"], "test.thorchain_models.not_null_silver__prices_ASSET_USD.a900d8c697": ["model.thorchain_models.silver__prices"], "test.thorchain_models.not_null_silver__prices_RUNE_USD.2ac6d1ee7a": ["model.thorchain_models.silver__prices"], "test.thorchain_models.not_null_silver__prices_POOL_NAME.7eacc16a03": ["model.thorchain_models.silver__prices"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb": ["model.thorchain_models.silver__prices"], "test.thorchain_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9": ["model.thorchain_models.silver__pending_liquidity_events"], "test.thorchain_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269": ["model.thorchain_models.silver__pending_liquidity_events"], "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_ADDRESS.4812d25cff": ["model.thorchain_models.silver__pending_liquidity_events"], "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_E8.d42e986972": ["model.thorchain_models.silver__pending_liquidity_events"], "test.thorchain_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1": ["model.thorchain_models.silver__pending_liquidity_events"], "test.thorchain_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff": ["model.thorchain_models.silver__pending_liquidity_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__RUNE_TX_ID__RUNE_ADDRESS__PENDING_TYPE__BLOCK_TIMESTAMP.f76bd250fb": ["model.thorchain_models.silver__pending_liquidity_events"], "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434": ["model.thorchain_models.silver__total_block_rewards"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55": ["model.thorchain_models.silver__total_block_rewards"], "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300": ["model.thorchain_models.silver__total_block_rewards"], "test.thorchain_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2": ["model.thorchain_models.silver__total_block_rewards"], "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT.ebf47bba39": ["model.thorchain_models.silver__total_block_rewards"], "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT_USD.054408ab82": ["model.thorchain_models.silver__total_block_rewards"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43": ["model.thorchain_models.silver__total_block_rewards"], "test.thorchain_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24": ["model.thorchain_models.silver__gas_events"], "test.thorchain_models.not_null_silver__gas_events_ASSET.59ad7ccacd": ["model.thorchain_models.silver__gas_events"], "test.thorchain_models.not_null_silver__gas_events_RUNE_E8.4accfe95df": ["model.thorchain_models.silver__gas_events"], "test.thorchain_models.not_null_silver__gas_events_TX_COUNT.a45fc07260": ["model.thorchain_models.silver__gas_events"], "test.thorchain_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77": ["model.thorchain_models.silver__gas_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f": ["model.thorchain_models.silver__gas_events"], "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT.5a9eb1961c": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT_USD.a2fdbc2215": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190": ["model.thorchain_models.silver__pool_block_balances"], "test.thorchain_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868": ["model.thorchain_models.silver__active_vault_events"], "test.thorchain_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13": ["model.thorchain_models.silver__active_vault_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978": ["model.thorchain_models.silver__active_vault_events"], "test.thorchain_models.not_null_silver__errata_events_BLOCK_TIMESTAMP.ed26a3347f": ["model.thorchain_models.silver__errata_events"], "test.thorchain_models.not_null_silver__errata_events_IN_TX.46f2587784": ["model.thorchain_models.silver__errata_events"], "test.thorchain_models.not_null_silver__errata_events_ASSET.bf7cbb369c": ["model.thorchain_models.silver__errata_events"], "test.thorchain_models.not_null_silver__errata_events_ASSET_E8.b87bf8f0b8": ["model.thorchain_models.silver__errata_events"], "test.thorchain_models.not_null_silver__errata_events_RUNE_E8.d04fa6d569": ["model.thorchain_models.silver__errata_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__errata_events_IN_TX__ASSET__BLOCK_TIMESTAMP.a1b8166c5f": ["model.thorchain_models.silver__errata_events"], "test.thorchain_models.not_null_silver__upgrades_BLOCK_TIMESTAMP.868821c1d9": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__upgrades_BLOCK_TIMESTAMP__day__1.7be6afcdb1": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_BLOCK_ID.070f1680e3": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_FROM_ADDRESS.38943cd872": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_TO_ADDRESS.ff5bcf771b": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__upgrades_TO_ADDRESS__thor_0_9a_zA_Z_39_.4a808837e8": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_BURN_ASSET.08a2741c2a": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT.6f5174d19c": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT_USD.c580af1338": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT.4926b6dfbf": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT_USD.88e239598a": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__upgrades_TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__TO_ADDRESS__BURN_ASSET.35b0e1e2da": ["model.thorchain_models.silver__upgrades"], "test.thorchain_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9": ["model.thorchain_models.silver__block_log"], "test.thorchain_models.not_null_silver__block_log_HEIGHT.e9a4d0156c": ["model.thorchain_models.silver__block_log"], "test.thorchain_models.not_null_silver__block_log_HASH.832559848d": ["model.thorchain_models.silver__block_log"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e": ["model.thorchain_models.silver__block_log"], "test.thorchain_models.not_null_silver__stake_events_POOL_NAME.341d5d5927": ["model.thorchain_models.silver__stake_events"], "test.thorchain_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9": ["model.thorchain_models.silver__stake_events"], "test.thorchain_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55": ["model.thorchain_models.silver__stake_events"], "test.thorchain_models.not_null_silver__stake_events_RUNE_E8.b9a59bf8ec": ["model.thorchain_models.silver__stake_events"], "test.thorchain_models.not_null_silver__stake_events__ASSET_IN_RUNE_E8.75a9ea038c": ["model.thorchain_models.silver__stake_events"], "test.thorchain_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf": ["model.thorchain_models.silver__stake_events"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__RUNE_TX_ID__RUNE_ADDRESS__BLOCK_TIMESTAMP.0e22ecc2c0": ["model.thorchain_models.silver__stake_events"], "test.thorchain_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774": ["model.thorchain_models.silver__rewards_event_entries"], "test.thorchain_models.not_null_silver__rewards_event_entries_RUNE_E8.d2d96ab281": ["model.thorchain_models.silver__rewards_event_entries"], "test.thorchain_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5": ["model.thorchain_models.silver__rewards_event_entries"], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME.49f4595c4a": ["model.thorchain_models.silver__rewards_event_entries"], "test.thorchain_models.tests__fact_prices__block_id-assert_no_gaps": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_prices"], "test.thorchain_models.tests__fact_swaps_assert_all_ids_exist_swap_events": ["model.thorchain_models.core__fact_swaps"], "test.thorchain_models.tests__fact_daily_earnings__day_assert_no_gaps": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.tests__fact_block_pool_depths__block_id_assert_no_gaps": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.tests__fact_pool_block_statistics__day_assert_no_gap": ["model.thorchain_models.core__fact_pool_block_statistics"], "test.thorchain_models.tests__fact_pool_block_balances__block_id_assert_no_gaps": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.tests__fact_total_value_locked_day_assert_no_gap": ["model.thorchain_models.core__fact_total_value_locked"], "test.thorchain_models.tests__fact_total_block_rewards_block_id_assert_no_gaps": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.tests__fact_pool_block_fees__day_assert_no_gap": ["model.thorchain_models.core__fact_pool_block_fees"], "test.thorchain_models.tests__fact_daily_pool_stats__day_assert_no_gaps": ["model.thorchain_models.core__fact_daily_pool_stats"], "test.thorchain_models.tests__fact_daily_tvl__day_assert_no_gaps": ["model.thorchain_models.core__fact_daily_tvl"], "test.thorchain_models.tests__fact_block_rewards__day_assert_no_gap": ["model.thorchain_models.core__fact_block_rewards"], "model.thorchain_models.core__fact_pool_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__pool_events"], "model.thorchain_models.core__fact_refund_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__refund_events"], "model.thorchain_models.core__fact_inactive_vault_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__inactive_vault_events"], "model.thorchain_models.core__fact_set_version_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__set_version_events"], "model.thorchain_models.core__dim_block": ["model.thorchain_models.silver__block_log"], "model.thorchain_models.core__fact_swaps": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__swaps"], "model.thorchain_models.core__fact_pool_block_statistics": ["model.thorchain_models.silver__pool_block_statistics"], "model.thorchain_models.core__fact_bond_actions": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__bond_events", "model.thorchain_models.silver__prices"], "model.thorchain_models.core__fact_switch_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__switch_events"], "model.thorchain_models.core__fact_validator_request_leave_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__validator_request_leave_events"], "model.thorchain_models.core__fact_block_rewards": ["model.thorchain_models.silver__block_rewards"], "model.thorchain_models.core__fact_update_node_account_status_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__update_node_account_status_events"], "model.thorchain_models.core__fact_active_vault_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__active_vault_events"], "model.thorchain_models.core__fact_upgrades": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__upgrades"], "model.thorchain_models.core__fact_pool_block_balances": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__pool_block_balances"], "model.thorchain_models.core__fact_reserve_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__reserve_events"], "model.thorchain_models.core__fact_gas_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__gas_events"], "model.thorchain_models.core__fact_thorname_change_events": ["model.thorchain_models.bronze__thorname_change_events", "model.thorchain_models.core__dim_block"], "model.thorchain_models.core__fact_total_block_rewards": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__total_block_rewards"], "model.thorchain_models.core__fact_new_node_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__new_node_events"], "model.thorchain_models.core__fact_pending_liquidity_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__pending_liquidity_events"], "model.thorchain_models.core__fact_outbound_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__outbound_events"], "model.thorchain_models.core__fact_stake_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__stake_events"], "model.thorchain_models.core__fact_daily_pool_stats": ["model.thorchain_models.silver__daily_pool_stats"], "model.thorchain_models.core__fact_daily_tvl": ["model.thorchain_models.silver__daily_tvl"], "model.thorchain_models.core__fact_rewards_event_entries": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__rewards_event_entries"], "model.thorchain_models.core__fact_slash_amounts": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__slash_amounts"], "model.thorchain_models.core__fact_total_value_locked": ["model.thorchain_models.silver__total_value_locked"], "model.thorchain_models.core__fact_liquidity_actions": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__liquidity_actions"], "model.thorchain_models.core__fact_asgard_fund_yggdrasil_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "model.thorchain_models.core__fact_unstake_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__unstake_events"], "model.thorchain_models.core__fact_set_mimir_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__set_mimir_events"], "model.thorchain_models.core__fact_bond_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__bond_events"], "model.thorchain_models.core__fact_transfers": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__transfers"], "model.thorchain_models.core__fact_pool_balance_change_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__pool_balance_change_events"], "model.thorchain_models.core__fact_rewards_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__rewards_events"], "model.thorchain_models.core__fact_errata_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__errata_events"], "model.thorchain_models.core__fact_add_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__add_events"], "model.thorchain_models.core__fact_transfer_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__transfer_events"], "model.thorchain_models.core__fact_daily_earnings": ["model.thorchain_models.silver__daily_earnings"], "model.thorchain_models.core__fact_fee_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__fee_events"], "model.thorchain_models.core__fact_set_node_keys_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__set_node_keys_events"], "model.thorchain_models.core__fact_block_pool_depths": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__block_pool_depths"], "model.thorchain_models.core__fact_prices": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__prices"], "model.thorchain_models.core__fact_set_ip_address_events": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__set_ip_address_events"], "model.thorchain_models.core__fact_pool_block_fees": ["model.thorchain_models.silver__pool_block_fees"], "model.thorchain_models.core__fact_slash_points": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__slash_points"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_events_FACT_POOL_EVENTS_ID.05fb28a742": ["model.thorchain_models.core__fact_pool_events"], "test.thorchain_models.unique_core__fact_pool_events_FACT_POOL_EVENTS_ID.a1d33c7d0a": ["model.thorchain_models.core__fact_pool_events"], "test.thorchain_models.not_null_core__fact_pool_events_BLOCK_TIMESTAMP.05cfb58d49": ["model.thorchain_models.core__fact_pool_events"], "test.thorchain_models.negative_one_core__fact_pool_events_DIM_BLOCK_ID.229c8d7f20": ["model.thorchain_models.core__fact_pool_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_events_FACT_POOL_EVENTS_ID.13c1ea183b": ["model.thorchain_models.core__fact_pool_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0340867efb": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pool_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_refund_events_FACT_REFUND_EVENTS_ID.30b6902b47": ["model.thorchain_models.core__fact_refund_events"], "test.thorchain_models.unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID.6f93d8d08e": ["model.thorchain_models.core__fact_refund_events"], "test.thorchain_models.not_null_core__fact_refund_events_BLOCK_TIMESTAMP.8b9509ce39": ["model.thorchain_models.core__fact_refund_events"], "test.thorchain_models.negative_one_core__fact_refund_events_DIM_BLOCK_ID.4a28b5bc7c": ["model.thorchain_models.core__fact_refund_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_refund_events_FACT_REFUND_EVENTS_ID.81e4335507": ["model.thorchain_models.core__fact_refund_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0233f89047": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_refund_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.762237682c": ["model.thorchain_models.core__fact_inactive_vault_events"], "test.thorchain_models.unique_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.20dbc5312c": ["model.thorchain_models.core__fact_inactive_vault_events"], "test.thorchain_models.not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP.2da1a512b0": ["model.thorchain_models.core__fact_inactive_vault_events"], "test.thorchain_models.negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID.83076c6521": ["model.thorchain_models.core__fact_inactive_vault_events"], "test.thorchain_models.not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.6ee8b1c1ac": ["model.thorchain_models.core__fact_inactive_vault_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.a765dbbadc": ["model.thorchain_models.core__fact_inactive_vault_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fde1b47635": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_inactive_vault_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.2996130685": ["model.thorchain_models.core__fact_set_version_events"], "test.thorchain_models.unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.ba09f86108": ["model.thorchain_models.core__fact_set_version_events"], "test.thorchain_models.not_null_core__fact_set_version_events_BLOCK_TIMESTAMP.8e51f47ffb": ["model.thorchain_models.core__fact_set_version_events"], "test.thorchain_models.negative_one_core__fact_set_version_events_DIM_BLOCK_ID.52ed0c5ef6": ["model.thorchain_models.core__fact_set_version_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.4cc0e57996": ["model.thorchain_models.core__fact_set_version_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4f6df8b36a": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_version_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.not_null_core__dim_block_HASH.b08299a937": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": ["model.thorchain_models.core__dim_block"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713": ["model.thorchain_models.core__fact_swaps"], "test.thorchain_models.unique_core__fact_swaps_FACT_SWAPS_ID.7963ad36b2": ["model.thorchain_models.core__fact_swaps"], "test.thorchain_models.not_null_core__fact_swaps_BLOCK_TIMESTAMP.1623c6eef8": ["model.thorchain_models.core__fact_swaps"], "test.thorchain_models.negative_one_core__fact_swaps_DIM_BLOCK_ID.396aa69d74": ["model.thorchain_models.core__fact_swaps"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID.a2d4e0d78c": ["model.thorchain_models.core__fact_swaps"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9c0cfcb6fa": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_swaps"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ec777b98b4": ["model.thorchain_models.core__fact_pool_block_statistics"], "test.thorchain_models.unique_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.b28d264159": ["model.thorchain_models.core__fact_pool_block_statistics"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.8b6f112393": ["model.thorchain_models.core__fact_pool_block_statistics"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.bbca05111b": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.8735e54613": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_BLOCK_TIMESTAMP.e429436031": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_actions_BLOCK_TIMESTAMP__day__4.6de8191c45": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.negative_one_core__fact_bond_actions_DIM_BLOCK_ID.62a90a6040": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_TX_ID.479e4a030a": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_BLOCKCHAIN.173b70dd6d": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_FROM_ADDRESS.f83dcb3484": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_TO_ADDRESS.609662b36d": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_bond_type.df2a3b5b16": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_AMOUNT.1b3ee2f2e2": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_USD.698118cb1c": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.f8b3537e11": ["model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.01d3250232": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_bond_actions"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.299741a909": ["model.thorchain_models.core__fact_switch_events"], "test.thorchain_models.unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.93082c83ed": ["model.thorchain_models.core__fact_switch_events"], "test.thorchain_models.not_null_core__fact_switch_events_BLOCK_TIMESTAMP.0437ab72e5": ["model.thorchain_models.core__fact_switch_events"], "test.thorchain_models.negative_one_core__fact_switch_events_DIM_BLOCK_ID.960a6c0dea": ["model.thorchain_models.core__fact_switch_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.3cd83ce9a7": ["model.thorchain_models.core__fact_switch_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.48c70568b9": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_switch_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a226b8835b": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.unique_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a9bbb3dffc": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_BLOCK_TIMESTAMP.b70f758672": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.negative_one_core__fact_validator_request_leave_events_DIM_BLOCK_ID.1c5ec06d3b": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_TX_ID.ee988a79e0": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_FROM_ADDRESS.51d60a71ad": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_NODE_ADDRESS.62d399b92d": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.f069e268df": ["model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5f659e000c": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_validator_request_leave_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.76e23118ec": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.38bd20da50": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.not_null_core__fact_block_rewards_DAY.f3adaa7c0d": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.unique_core__fact_block_rewards_DAY.0ccd5bbf19": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_rewards_DAY__day__1.17002b354c": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_FEE.98923b7b52": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.not_null_core__fact_block_rewards_BLOCK_REWARDS.5895cca37e": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.not_null_core__fact_block_rewards_EARNINGS.af56926f59": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.not_null_core__fact_block_rewards_BONDING_EARNINGS.6b00d9f87b": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS.470f463bc6": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.e333e2b210": ["model.thorchain_models.core__fact_block_rewards"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e63145c998": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.unique_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.44d86e956f": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_BLOCK_TIMESTAMP.d3ea501c1e": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.negative_one_core__fact_update_node_account_status_events_DIM_BLOCK_ID.1b8be0e620": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_FORMER_STATUS.542955010b": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_CURRENT_STATUS.56817a94d4": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_NODE_ADDRESS.d803773e0e": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.d46b96f1c2": ["model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8f291f6f39": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_update_node_account_status_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3d763daf51": ["model.thorchain_models.core__fact_active_vault_events"], "test.thorchain_models.unique_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.79697cc3a3": ["model.thorchain_models.core__fact_active_vault_events"], "test.thorchain_models.not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP.1d3fbb0a3b": ["model.thorchain_models.core__fact_active_vault_events"], "test.thorchain_models.negative_one_core__fact_active_vault_events_DIM_BLOCK_ID.722702a8fc": ["model.thorchain_models.core__fact_active_vault_events"], "test.thorchain_models.not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR.125c40e8d2": ["model.thorchain_models.core__fact_active_vault_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.e8289f48d1": ["model.thorchain_models.core__fact_active_vault_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b9a88a56b1": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_active_vault_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_upgrades_FACT_UPGRADES_ID.9298b1c97b": ["model.thorchain_models.core__fact_upgrades"], "test.thorchain_models.unique_core__fact_upgrades_FACT_UPGRADES_ID.a36315e988": ["model.thorchain_models.core__fact_upgrades"], "test.thorchain_models.not_null_core__fact_upgrades_BLOCK_TIMESTAMP.f3d7bb5e1b": ["model.thorchain_models.core__fact_upgrades"], "test.thorchain_models.not_null_core__fact_upgrades_TX_ID.88449dfc60": ["model.thorchain_models.core__fact_upgrades"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_upgrades_FACT_UPGRADES_ID.2a81ce04d0": ["model.thorchain_models.core__fact_upgrades"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a7ce140c43": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_upgrades"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.89e5ab7b3f": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.unique_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.624eb36d01": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP.9d11fe9f1e": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID.f1f87272cb": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.not_null_core__fact_pool_block_balances_POOL_NAME.7349f760b3": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT.6437831137": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD.646a684c15": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.not_null_core__fact_pool_block_balances_ASSET_AMOUNT.8e6a6db124": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.not_null_core__fact_pool_block_balances_SYNTH_AMOUNT.26b33d8c1b": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.e0fa300f8a": ["model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a4580f364c": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pool_block_balances"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.c50105a5a2": ["model.thorchain_models.core__fact_reserve_events"], "test.thorchain_models.unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.2278508729": ["model.thorchain_models.core__fact_reserve_events"], "test.thorchain_models.not_null_core__fact_reserve_events_BLOCK_TIMESTAMP.9a529f13da": ["model.thorchain_models.core__fact_reserve_events"], "test.thorchain_models.negative_one_core__fact_reserve_events_DIM_BLOCK_ID.2dcdfcd58c": ["model.thorchain_models.core__fact_reserve_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.9f61e9de79": ["model.thorchain_models.core__fact_reserve_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.becfbe7562": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_reserve_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_gas_events_FACT_GAS_EVENTS_ID.aeb85cf4be": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.unique_core__fact_gas_events_FACT_GAS_EVENTS_ID.eb8ed8966c": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.not_null_core__fact_gas_events_BLOCK_TIMESTAMP.35593bcc96": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.negative_one_core__fact_gas_events_DIM_BLOCK_ID.7f0c9823d6": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.not_null_core__fact_gas_events_ASSET.eb1210fc06": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.not_null_core__fact_gas_events_ASSET_E8.345e0e92d6": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.not_null_core__fact_gas_events_RUNE_E8.3d0c674d04": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.not_null_core__fact_gas_events_TX_COUNT.85916d908d": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_gas_events_FACT_GAS_EVENTS_ID.5f0af93d3d": ["model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5dc998f326": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_gas_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.a5f60f6196": ["model.thorchain_models.core__fact_thorname_change_events"], "test.thorchain_models.unique_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.4a216c267b": ["model.thorchain_models.core__fact_thorname_change_events"], "test.thorchain_models.not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP.bbcdabc756": ["model.thorchain_models.core__fact_thorname_change_events"], "test.thorchain_models.negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID.140d803276": ["model.thorchain_models.core__fact_thorname_change_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.1b4a17651b": ["model.thorchain_models.core__fact_thorname_change_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1ed6c8a772": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_thorname_change_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.fd258fb2a9": ["model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.unique_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.35ddebe805": ["model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP.b0622419e6": ["model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID.69732a2faa": ["model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.not_null_core__fact_total_block_rewards_REWARD_ENTITY.7590c6a78e": ["model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.not_null_core__fact_total_block_rewards_RUNE_AMOUNT.e5de0ae4a8": ["model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.448d03892d": ["model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2d656d9d6f": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_total_block_rewards"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.a2f2d234e7": ["model.thorchain_models.core__fact_new_node_events"], "test.thorchain_models.unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f4b183908a": ["model.thorchain_models.core__fact_new_node_events"], "test.thorchain_models.not_null_core__fact_new_node_events_BLOCK_TIMESTAMP.9d461f9b74": ["model.thorchain_models.core__fact_new_node_events"], "test.thorchain_models.negative_one_core__fact_new_node_events_DIM_BLOCK_ID.c4f3cf3f10": ["model.thorchain_models.core__fact_new_node_events"], "test.thorchain_models.not_null_core__fact_new_node_events_NODE_ADDRESS.3ffbf12d49": ["model.thorchain_models.core__fact_new_node_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.e62e52ebfb": ["model.thorchain_models.core__fact_new_node_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4de363f5ea": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_new_node_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.fdbfe95915": ["model.thorchain_models.core__fact_pending_liquidity_events"], "test.thorchain_models.unique_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.2b8ffd9a36": ["model.thorchain_models.core__fact_pending_liquidity_events"], "test.thorchain_models.not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP.b3a80571a0": ["model.thorchain_models.core__fact_pending_liquidity_events"], "test.thorchain_models.negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID.3a16136f4d": ["model.thorchain_models.core__fact_pending_liquidity_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.300a1fb7f2": ["model.thorchain_models.core__fact_pending_liquidity_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2429920cfb": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pending_liquidity_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.f603367883": ["model.thorchain_models.core__fact_outbound_events"], "test.thorchain_models.unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.4c4c439442": ["model.thorchain_models.core__fact_outbound_events"], "test.thorchain_models.not_null_core__fact_outbound_events_BLOCK_TIMESTAMP.6055e0ddf8": ["model.thorchain_models.core__fact_outbound_events"], "test.thorchain_models.negative_one_core__fact_outbound_events_DIM_BLOCK_ID.f5caf0aeb3": ["model.thorchain_models.core__fact_outbound_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.05c0f9f101": ["model.thorchain_models.core__fact_outbound_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.277332ae7e": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_outbound_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_stake_events_FACT_STAKE_EVENTS_ID.0464a58ac1": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID.52dbe36799": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.not_null_core__fact_stake_events_BLOCK_TIMESTAMP.bb23735cef": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.negative_one_core__fact_stake_events_DIM_BLOCK_ID.c03f6426e6": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.not_null_core__fact_stake_events_POOL_NAME.7488aed911": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.not_null_core__fact_stake_events_ASSET_E8.2157ab7e87": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.not_null_core__fact_stake_events_STAKE_UNITS.ee869aff9b": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.not_null_core__fact_stake_events_RUNE_E8.5294209fc4": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.not_null_core__fact_stake_events__ASSET_IN_RUNE_E8.042c769f0e": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_stake_events_FACT_STAKE_EVENTS_ID.3539c13338": ["model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.11c16f16f2": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_stake_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bf1dfcca44": ["model.thorchain_models.core__fact_daily_pool_stats"], "test.thorchain_models.unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.7da417db6b": ["model.thorchain_models.core__fact_daily_pool_stats"], "test.thorchain_models.not_null_core__fact_daily_pool_stats_DAY.79d19f9f33": ["model.thorchain_models.core__fact_daily_pool_stats"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.33b4ea9b4d": ["model.thorchain_models.core__fact_daily_pool_stats"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_tvl_FACT_DAILY_TVL_ID.d572a2372f": ["model.thorchain_models.core__fact_daily_tvl"], "test.thorchain_models.unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID.2c3cf602d7": ["model.thorchain_models.core__fact_daily_tvl"], "test.thorchain_models.not_null_core__fact_daily_tvl_DAY.144013f00d": ["model.thorchain_models.core__fact_daily_tvl"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_tvl_FACT_DAILY_TVL_ID.474e025c51": ["model.thorchain_models.core__fact_daily_tvl"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.84c78a0633": ["model.thorchain_models.core__fact_rewards_event_entries"], "test.thorchain_models.unique_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.615ad18aed": ["model.thorchain_models.core__fact_rewards_event_entries"], "test.thorchain_models.not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP.dca817feb6": ["model.thorchain_models.core__fact_rewards_event_entries"], "test.thorchain_models.negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID.42b2a0096a": ["model.thorchain_models.core__fact_rewards_event_entries"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.ee30c464f8": ["model.thorchain_models.core__fact_rewards_event_entries"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7a477fe9e6": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_rewards_event_entries"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.8b1a171425": ["model.thorchain_models.core__fact_slash_amounts"], "test.thorchain_models.unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.5c35006c34": ["model.thorchain_models.core__fact_slash_amounts"], "test.thorchain_models.not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP.739ff9d923": ["model.thorchain_models.core__fact_slash_amounts"], "test.thorchain_models.negative_one_core__fact_slash_amounts_DIM_BLOCK_ID.6a02ad62ec": ["model.thorchain_models.core__fact_slash_amounts"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.0fd61f628a": ["model.thorchain_models.core__fact_slash_amounts"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.42a2e94cfe": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_slash_amounts"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.430d9c1e3d": ["model.thorchain_models.core__fact_total_value_locked"], "test.thorchain_models.unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.36125ed401": ["model.thorchain_models.core__fact_total_value_locked"], "test.thorchain_models.not_null_core__fact_total_value_locked_DAY.a3c0275ca5": ["model.thorchain_models.core__fact_total_value_locked"], "test.thorchain_models.unique_core__fact_total_value_locked_DAY.61d685d8a4": ["model.thorchain_models.core__fact_total_value_locked"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.adc40e4d8b": ["model.thorchain_models.core__fact_total_value_locked"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.c7cd9bd890": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.a5ce678100": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP.fcc1d0d04d": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID.e9c8df3ac6": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.not_null_core__fact_liquidity_actions_LP_ACTION.0f14e22b29": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.not_null_core__fact_liquidity_actions_POOL_NAME.0b15bea905": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT.62083241ea": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD.240e9b87a5": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.not_null_core__fact_liquidity_actions_ASSET_AMOUNT.fb54932835": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.not_null_core__fact_liquidity_actions_STAKE_UNITS.c67659b61d": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.b429402606": ["model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cab10fa844": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_liquidity_actions"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.76d4b75985": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.unique_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.7dc09914ae": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.953acd01a8": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.negative_one_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID.514a6714b7": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET.6b2b37418a": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID.5a02945c6c": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY.1122e02dde": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8.77ddd0d9cc": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.a2b34c5de2": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.131c30ab41": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_asgard_fund_yggdrasil_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.a1b466628e": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.0cc77688fa": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_BLOCK_TIMESTAMP.8136e6be75": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.negative_one_core__fact_unstake_events_DIM_BLOCK_ID.b26729596b": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_TX_ID.70178dcbe6": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_BLOCKCHAIN.23ab48dc4e": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_FROM_ADDRESS.f36fc22ab1": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_TO_ADDRESS.e270afa919": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_ASSET_E8.ec0bbb0520": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_ASSET_E8.0bb6810b7c": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_RUNE_E8.9f4450744c": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_MEMO.f9a42c16dd": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_POOL_NAME.636cd2e3c5": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_STAKE_UNITS.7b40a80e8c": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_BASIS_POINTS.d404deb2ce": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_ASYMMETRY.a0a65d3a9f": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8.9cbcefb510": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8.3b40309e5d": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.1a4354b9b5": ["model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c5326ea89a": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_unstake_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246": ["model.thorchain_models.core__fact_set_mimir_events"], "test.thorchain_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794": ["model.thorchain_models.core__fact_set_mimir_events"], "test.thorchain_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b": ["model.thorchain_models.core__fact_set_mimir_events"], "test.thorchain_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336": ["model.thorchain_models.core__fact_set_mimir_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c": ["model.thorchain_models.core__fact_set_mimir_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_mimir_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_events_FACT_BOND_EVENTS_ID.a2630ee98e": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.unique_core__fact_bond_events_FACT_BOND_EVENTS_ID.78891b0a95": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_BLOCK_TIMESTAMP.34d4db86ea": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_events_BLOCK_TIMESTAMP__day__4.a0c57cd338": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.negative_one_core__fact_bond_events_DIM_BLOCK_ID.b9ebee0e49": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_TX_ID.7cfaf64395": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_BLOCKCHAIN.b6e16a540a": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_FROM_ADDRESS.7bd47d477d": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_TO_ADDRESS.754c40a736": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_ASSET_E8.c772a5c1a6": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_MEMO.072a694836": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_bond_type.a7351dce4e": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.not_null_core__fact_bond_events_E8.a6cea49857": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_events_FACT_BOND_EVENTS_ID.00c70aabf8": ["model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1892d1fe78": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_bond_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.not_null_core__fact_transfers_ASSET.77d44cdd84": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT.7e2f8aa5f7": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT_USD.ff8abbcf19": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3": ["model.thorchain_models.core__fact_transfers"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_transfers"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.702823e109": ["model.thorchain_models.core__fact_pool_balance_change_events"], "test.thorchain_models.unique_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.9782ed2131": ["model.thorchain_models.core__fact_pool_balance_change_events"], "test.thorchain_models.not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP.1f2c903cd3": ["model.thorchain_models.core__fact_pool_balance_change_events"], "test.thorchain_models.negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID.a1549e5fe2": ["model.thorchain_models.core__fact_pool_balance_change_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.7fe3cc4fa9": ["model.thorchain_models.core__fact_pool_balance_change_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.029949114a": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_pool_balance_change_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.d93f22f0e1": ["model.thorchain_models.core__fact_rewards_events"], "test.thorchain_models.unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.ee7cbe3f90": ["model.thorchain_models.core__fact_rewards_events"], "test.thorchain_models.not_null_core__fact_rewards_events_BLOCK_TIMESTAMP.03cee88918": ["model.thorchain_models.core__fact_rewards_events"], "test.thorchain_models.negative_one_core__fact_rewards_events_DIM_BLOCK_ID.b4f9cfff33": ["model.thorchain_models.core__fact_rewards_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.9e85913629": ["model.thorchain_models.core__fact_rewards_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dd0a168223": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_rewards_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.41ac1e170c": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.ff84352521": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.not_null_core__fact_errata_events_BLOCK_TIMESTAMP.c97100b28e": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.negative_one_core__fact_errata_events_DIM_BLOCK_ID.1e68f739d7": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.not_null_core__fact_errata_events_ASSET_E8.9b5c938453": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.not_null_core__fact_errata_events_RUNE_E8.54a56fbeaf": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.not_null_core__fact_errata_events_IN_TX.477080ebba": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.not_null_core__fact_errata_events_ASSET.b77634e45d": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.e707c17e80": ["model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2036706b9e": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_errata_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_add_events_FACT_ADD_EVENTS_ID.de606e1315": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.unique_core__fact_add_events_FACT_ADD_EVENTS_ID.8d1a660963": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_BLOCK_TIMESTAMP.317eaa7011": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.negative_one_core__fact_add_events_DIM_BLOCK_ID.bb11c4e182": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_RUNE_E8.aaf3acc2cd": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_BLOCKCHAIN.7481d9c56f": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_ASSET_E8.9f929cee48": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_POOL_NAME.b5011ead86": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_MEMO.addbd52004": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_TO_ADDRESS.f50de208a1": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.not_null_core__fact_add_events_FROM_ADDRESS.63f6b7ffe8": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_add_events_FACT_ADD_EVENTS_ID.7afacbf523": ["model.thorchain_models.core__fact_add_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38dcabe04d": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_add_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070": ["model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_transfer_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.02c2019ac8": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.a33aeba570": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_DAY.0056ff032e": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.unique_core__fact_daily_earnings_DAY.d8c8059f12": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_daily_earnings_DAY__day__1.739a7d6fc2": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES.61a2f7741f": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD.f6e86bf715": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS.32f4ba94aa": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD.620692e3c8": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS.3465760a09": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD.13a1973622": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES.31b30b49fc": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD.06c8d3544c": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS.802ba2933d": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD.d78b69a4e2": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.3813cadda2": ["model.thorchain_models.core__fact_daily_earnings"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_fee_events_FACT_FEE_EVENTS_ID.09084d41ad": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.unique_core__fact_fee_events_FACT_FEE_EVENTS_ID.af07c861bb": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.not_null_core__fact_fee_events_BLOCK_TIMESTAMP.39a1b9fbcb": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.negative_one_core__fact_fee_events_DIM_BLOCK_ID.6bea825589": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.not_null_core__fact_fee_events_TX_ID.363b10abc6": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.not_null_core__fact_fee_events_ASSET.07dd767dd5": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.not_null_core__fact_fee_events_POOL_DEDUCT.083ce34ede": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.not_null_core__fact_fee_events_ASSET_E8.6d72b49c41": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_fee_events_FACT_FEE_EVENTS_ID.11388d90d4": ["model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.524d327517": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_fee_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.34835f54a3": ["model.thorchain_models.core__fact_set_node_keys_events"], "test.thorchain_models.unique_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.dda9f81b60": ["model.thorchain_models.core__fact_set_node_keys_events"], "test.thorchain_models.not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP.41f9b1a5da": ["model.thorchain_models.core__fact_set_node_keys_events"], "test.thorchain_models.negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID.639cd7330f": ["model.thorchain_models.core__fact_set_node_keys_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5ac2675faa": ["model.thorchain_models.core__fact_set_node_keys_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fd9fdc9f41": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_node_keys_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.9dd9587001": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.94c0227c24": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP.3ea533bce0": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID.f4fc2ff338": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.not_null_core__fact_block_pool_depths_RUNE_E8.3234bc76fa": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.not_null_core__fact_block_pool_depths_ASSET_E8.0dc043e0cd": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.not_null_core__fact_block_pool_depths_SYNTH_E8.ff0f94fbc2": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.not_null_core__fact_block_pool_depths_POOL_NAME.5d37c16f5d": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.dfe5457eaf": ["model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.14b49fcf71": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_block_pool_depths"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_prices_FACT_PRICES_ID.435e0f2c3d": ["model.thorchain_models.core__fact_prices"], "test.thorchain_models.unique_core__fact_prices_FACT_PRICES_ID.003cb27459": ["model.thorchain_models.core__fact_prices"], "test.thorchain_models.not_null_core__fact_prices_BLOCK_TIMESTAMP.441625422b": ["model.thorchain_models.core__fact_prices"], "test.thorchain_models.negative_one_core__fact_prices_DIM_BLOCK_ID.d29550f238": ["model.thorchain_models.core__fact_prices"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID.fc15617ea8": ["model.thorchain_models.core__fact_prices"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38e7c4700c": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_prices"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.94cd2b4126": ["model.thorchain_models.core__fact_set_ip_address_events"], "test.thorchain_models.unique_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2a2aa5cfae": ["model.thorchain_models.core__fact_set_ip_address_events"], "test.thorchain_models.not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP.5ba0c58a75": ["model.thorchain_models.core__fact_set_ip_address_events"], "test.thorchain_models.negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID.2cce9fb3dd": ["model.thorchain_models.core__fact_set_ip_address_events"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.cb9aaa02f0": ["model.thorchain_models.core__fact_set_ip_address_events"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc626285f1": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_set_ip_address_events"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.8f8165383d": ["model.thorchain_models.core__fact_pool_block_fees"], "test.thorchain_models.unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.4771f271d5": ["model.thorchain_models.core__fact_pool_block_fees"], "test.thorchain_models.not_null_core__fact_pool_block_fees_DAY.b3a2546784": ["model.thorchain_models.core__fact_pool_block_fees"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.a85fc1c290": ["model.thorchain_models.core__fact_pool_block_fees"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_points_FACT_SLASH_POINTS_ID.33a34df512": ["model.thorchain_models.core__fact_slash_points"], "test.thorchain_models.unique_core__fact_slash_points_FACT_SLASH_POINTS_ID.f7b5ab10d6": ["model.thorchain_models.core__fact_slash_points"], "test.thorchain_models.not_null_core__fact_slash_points_BLOCK_TIMESTAMP.a7b4964341": ["model.thorchain_models.core__fact_slash_points"], "test.thorchain_models.negative_one_core__fact_slash_points_DIM_BLOCK_ID.e5523fb231": ["model.thorchain_models.core__fact_slash_points"], "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_points_FACT_SLASH_POINTS_ID.c20584f187": ["model.thorchain_models.core__fact_slash_points"], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.eb3f0e7ae8": ["model.thorchain_models.core__dim_block", "model.thorchain_models.core__fact_slash_points"], "source.thorchain_models.shared.prices_v2": [], "source.thorchain_models.thorchain_midgard.midgard_active_vault_events": [], "source.thorchain_models.thorchain_midgard.midgard_add_events": [], "source.thorchain_models.thorchain_midgard.midgard_asgard_fund_yggdrasil_events": [], "source.thorchain_models.thorchain_midgard.midgard_block_log": [], "source.thorchain_models.thorchain_midgard.midgard_block_pool_depths": [], "source.thorchain_models.thorchain_midgard.midgard_bond_events": [], "source.thorchain_models.thorchain_midgard.bond_events_pk_count": [], "source.thorchain_models.thorchain_midgard.midgard_constants": [], "source.thorchain_models.thorchain_midgard.midgard_errata_events": [], "source.thorchain_models.thorchain_midgard.midgard_fee_events": [], "source.thorchain_models.thorchain_midgard.fee_events_pk_count": [], "source.thorchain_models.thorchain_midgard.midgard_gas_events": [], "source.thorchain_models.thorchain_midgard.midgard_inactive_vault_events": [], "source.thorchain_models.thorchain_midgard.midgard_message_events": [], "source.thorchain_models.thorchain_midgard.midgard_new_node_events": [], "source.thorchain_models.thorchain_midgard.midgard_outbound_events": [], "source.thorchain_models.thorchain_midgard.midgard_pending_liquidity_events": [], "source.thorchain_models.thorchain_midgard.midgard_pool_balance_change_events": [], "source.thorchain_models.thorchain_midgard.midgard_pool_events": [], "source.thorchain_models.thorchain_midgard.midgard_refund_events": [], "source.thorchain_models.thorchain_midgard.midgard_reserve_events": [], "source.thorchain_models.thorchain_midgard.midgard_rewards_event_entries": [], "source.thorchain_models.thorchain_midgard.midgard_rewards_events": [], "source.thorchain_models.thorchain_midgard.midgard_set_ip_address_events": [], "source.thorchain_models.thorchain_midgard.midgard_set_mimir_events": [], "source.thorchain_models.thorchain_midgard.midgard_set_node_keys_events": [], "source.thorchain_models.thorchain_midgard.midgard_set_version_events": [], "source.thorchain_models.thorchain_midgard.midgard_slash_events": [], "source.thorchain_models.thorchain_midgard.midgard_slash_points_events": [], "source.thorchain_models.thorchain_midgard.midgard_stake_events": [], "source.thorchain_models.thorchain_midgard.midgard_swap_events": [], "source.thorchain_models.thorchain_midgard.midgard_switch_events": [], "source.thorchain_models.thorchain_midgard.switch_events_pk_count": [], "source.thorchain_models.thorchain_midgard.midgard_thorname_change_events": [], "source.thorchain_models.thorchain_midgard.midgard_transfer_events": [], "source.thorchain_models.thorchain_midgard.midgard_unstake_events": [], "source.thorchain_models.thorchain_midgard.midgard_update_node_account_status_events": [], "source.thorchain_models.thorchain_midgard.midgard_validator_request_leave_events": [], "source.thorchain_models.crosschain.address_labels": []}, "child_map": {"model.thorchain_models.bronze__slash_amounts": ["model.thorchain_models.silver__slash_amounts"], "model.thorchain_models.bronze__gas_events": ["model.thorchain_models.silver__gas_events"], "model.thorchain_models.bronze__inactive_vault_events": ["model.thorchain_models.silver__inactive_vault_events"], "model.thorchain_models.bronze__slash_points": ["model.thorchain_models.silver__slash_points"], "model.thorchain_models.bronze__new_node_events": ["model.thorchain_models.silver__new_node_events"], "model.thorchain_models.bronze__rewards_events": ["model.thorchain_models.silver__rewards_events"], "model.thorchain_models.bronze__bond_events": ["model.thorchain_models.silver__bond_events"], "model.thorchain_models.bronze__unstake_events": ["model.thorchain_models.silver__unstake_events"], "model.thorchain_models.bronze__pending_liquidity_events": ["model.thorchain_models.silver__pending_liquidity_events"], "model.thorchain_models.bronze__swap_events": ["model.thorchain_models.silver__swap_events"], "model.thorchain_models.bronze__errata_events": ["model.thorchain_models.silver__errata_events"], "model.thorchain_models.bronze__stake_events": ["model.thorchain_models.silver__stake_events"], "model.thorchain_models.bronze__block_pool_depths": ["model.thorchain_models.silver__block_pool_depths"], "model.thorchain_models.bronze__set_version_events": ["model.thorchain_models.silver__set_version_events"], "model.thorchain_models.bronze__add_events": ["model.thorchain_models.silver__add_events"], "model.thorchain_models.bronze__pool_balance_change_events": ["model.thorchain_models.silver__pool_balance_change_events"], "model.thorchain_models.bronze__block_log": ["model.thorchain_models.silver__block_log"], "model.thorchain_models.bronze__transfer_events": ["model.thorchain_models.silver__transfer_events"], "model.thorchain_models.bronze__switch_events": ["model.thorchain_models.silver__switch_events"], "model.thorchain_models.bronze__asgard_fund_yggdrasil_events": ["model.thorchain_models.silver__asgard_fund_yggdrasil_events"], "model.thorchain_models.bronze__set_mimir_events": ["model.thorchain_models.silver__set_mimir_events"], "model.thorchain_models.bronze__fee_events": ["model.thorchain_models.silver__fee_events"], "model.thorchain_models.bronze__reserve_events": ["model.thorchain_models.silver__reserve_events"], "model.thorchain_models.bronze__refund_events": ["model.thorchain_models.silver__refund_events"], "model.thorchain_models.bronze__active_vault_events": ["model.thorchain_models.silver__active_vault_events"], "model.thorchain_models.bronze__validator_request_leave_events": ["model.thorchain_models.silver__validator_request_leave_events"], "model.thorchain_models.bronze__rewards_event_entries": ["model.thorchain_models.silver__rewards_event_entries"], "model.thorchain_models.bronze__update_node_account_status_events": ["model.thorchain_models.silver__update_node_account_status_events"], "model.thorchain_models.bronze__set_ip_address_events": ["model.thorchain_models.silver__set_ip_address_events"], "model.thorchain_models.bronze__outbound_events": ["model.thorchain_models.silver__outbound_events"], "model.thorchain_models.bronze__constants": ["model.thorchain_models.silver__constants"], "model.thorchain_models.bronze__thorname_change_events": ["model.thorchain_models.core__fact_thorname_change_events"], "model.thorchain_models.bronze__pool_events": ["model.thorchain_models.silver__pool_events"], "model.thorchain_models.bronze__set_node_keys_events": ["model.thorchain_models.silver__set_node_keys_events"], "model.thorchain_models.silver__daily_tvl": ["model.thorchain_models.core__fact_daily_tvl", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__1.c4d0d5f594", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093", "test.thorchain_models.not_null_silver__daily_tvl_DAY.b4b5f55703", "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531", "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb", "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5", "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246", "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91", "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3"], "model.thorchain_models.silver__outbound_events": ["model.thorchain_models.core__fact_outbound_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7", "test.thorchain_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee", "test.thorchain_models.not_null_silver__outbound_events_ASSET_E8.e28187620c", "test.thorchain_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d", "test.thorchain_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3", "test.thorchain_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55", "test.thorchain_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc", "test.thorchain_models.not_null_silver__outbound_events_MEMO.88f8ed52e8", "test.thorchain_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a"], "model.thorchain_models.silver__daily_pool_stats": ["model.thorchain_models.core__fact_daily_pool_stats", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__1.4a002d4fdf", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d", "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392", "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead", "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0", "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD.3a6babb532", "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a", "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43", "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c", "test.thorchain_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae", "test.thorchain_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22", "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329", "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5", "test.thorchain_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9", "test.thorchain_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182", "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_LIQUIDITY.9a12031e05", "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE.b781c85c5c", "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE_USD.49c02d7724", "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953", "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE.8ec30e912b", "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD.d97e13aeae", "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7", "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19", "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES.e16f506989", "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287", "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE.fa14408704", "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45", "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7", "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd", "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5", "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP.b89bdb784c", "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT.3e93a8e08c", "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME.2af93618fb", "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24", "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2", "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31", "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47", "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd", "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY.e35cdf38a2", "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD.b1b68e9efc"], "model.thorchain_models.silver__daily_earnings": ["model.thorchain_models.core__fact_daily_earnings", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__1.1bba89d3fd", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244", "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25", "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41", "test.thorchain_models.not_null_silver__daily_earnings_DAY.507c4965f2", "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df", "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c", "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0", "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad", "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8", "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899", "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb", "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085"], "model.thorchain_models.silver__inactive_vault_events": ["model.thorchain_models.core__fact_inactive_vault_events"], "model.thorchain_models.silver__asgard_fund_yggdrasil_events": ["model.thorchain_models.core__fact_asgard_fund_yggdrasil_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__asgard_fund_yggdrasil_events_EVENT_ID__TX_ID__ASSET__ASSET_E8__VAULT_KEY__BLOCK_TIMESTAMP.3ef17ff2a7", "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET.4b14ad0d1c", "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8.97d75351f4", "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.7eec23c0d9", "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_TX_ID.5c8429a2d6", "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY.b769677902"], "model.thorchain_models.silver__transfers": ["model.thorchain_models.core__fact_transfers", "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__thor_0_9a_zA_Z_39_.f2dba09fd9", "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__thor_0_9a_zA_Z_39_.004ec62530", "test.thorchain_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.thorchain_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.thorchain_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT.f5e577a890", "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT_USD.9c1469e6f5", "test.thorchain_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c"], "model.thorchain_models.silver__block_pool_depths": ["model.thorchain_models.core__fact_block_pool_depths", "model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__pool_block_balances", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__total_value_locked", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3", "test.thorchain_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf", "test.thorchain_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914", "test.thorchain_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602", "test.thorchain_models.not_null_silver__block_pool_depths_RUNE_E8.773bfaa76a", "test.thorchain_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72"], "model.thorchain_models.silver__set_mimir_events": ["model.thorchain_models.core__fact_set_mimir_events"], "model.thorchain_models.silver__pool_block_statistics": ["model.thorchain_models.core__fact_pool_block_statistics", "model.thorchain_models.silver__daily_pool_stats", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__1.e3c9116788", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e", "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c", "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd", "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7", "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME.dc4fce7fce", "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4", "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1", "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529", "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57", "test.thorchain_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788", "test.thorchain_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58", "test.thorchain_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1", "test.thorchain_models.not_null_silver__pool_block_statistics_RUNE_DEPTH.ba24bcf4aa", "test.thorchain_models.not_null_silver__pool_block_statistics_STATUS.12571911dc", "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040", "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017", "test.thorchain_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP.4ffb26f47a", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_COUNT.3734626432", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_FEES.dcc05b09f6", "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_VOLUME.39f8343ad9", "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6", "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939", "test.thorchain_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0", "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb", "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b", "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME.2c6f4ae4b2", "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7"], "model.thorchain_models.silver__liquidity_actions": ["model.thorchain_models.core__fact_liquidity_actions", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a", "test.thorchain_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9", "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa", "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0", "test.thorchain_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62", "test.thorchain_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145", "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT.f7115d2d81", "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT_USD.520ffc3716", "test.thorchain_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5"], "model.thorchain_models.silver__refund_events": ["model.thorchain_models.core__fact_refund_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50", "test.thorchain_models.not_null_silver__refund_events_ASSET.8d91917f0d", "test.thorchain_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5", "test.thorchain_models.not_null_silver__refund_events_ASSET_E8.2e099ee072", "test.thorchain_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d", "test.thorchain_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234", "test.thorchain_models.not_null_silver__refund_events_CODE.fee514c705", "test.thorchain_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95", "test.thorchain_models.not_null_silver__refund_events_REASON.080b9527d1", "test.thorchain_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd", "test.thorchain_models.not_null_silver__refund_events_TX_ID.d818e4a9c0"], "model.thorchain_models.silver__validator_request_leave_events": ["model.thorchain_models.core__fact_validator_request_leave_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee", "test.thorchain_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793", "test.thorchain_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547", "test.thorchain_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f", "test.thorchain_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e", "test.thorchain_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26"], "model.thorchain_models.silver__transfer_events": ["model.thorchain_models.core__fact_transfer_events", "model.thorchain_models.silver__transfers", "test.thorchain_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d", "test.thorchain_models.not_null_silver__transfer_events_ASSET.4d061223da", "test.thorchain_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6", "test.thorchain_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb", "test.thorchain_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291"], "model.thorchain_models.silver__total_value_locked": ["model.thorchain_models.core__fact_total_value_locked", "model.thorchain_models.silver__daily_tvl", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__1.0a174f17b5", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a", "test.thorchain_models.not_null_silver__total_value_locked_DAY.5d7ba86e85", "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f", "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40", "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a"], "model.thorchain_models.silver__bond_events": ["model.thorchain_models.core__fact_bond_actions", "model.thorchain_models.core__fact_bond_events", "model.thorchain_models.silver__total_value_locked", "test.thorchain_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174", "test.thorchain_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0", "test.thorchain_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e", "test.thorchain_models.not_null_silver__bond_events_E8.c19384976b", "test.thorchain_models.not_null_silver__bond_events_TX_ID.d18467b918"], "model.thorchain_models.silver__update_node_account_status_events": ["model.thorchain_models.core__fact_update_node_account_status_events", "model.thorchain_models.silver__block_rewards", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP.d4b84a39d2", "test.thorchain_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b", "test.thorchain_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7", "test.thorchain_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99", "test.thorchain_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83"], "model.thorchain_models.silver__swaps": ["model.thorchain_models.core__fact_swaps", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__1.3593f474c4", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swaps_TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.acd20d2a09", "test.thorchain_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68", "test.thorchain_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4", "test.thorchain_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a", "test.thorchain_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9", "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197", "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae", "test.thorchain_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d", "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469", "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c", "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE.a31fbfd0f7", "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE_USD.630f16402c", "test.thorchain_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f", "test.thorchain_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652", "test.thorchain_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d", "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2", "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5", "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3", "test.thorchain_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4", "test.thorchain_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd", "test.thorchain_models.not_null_silver__swaps_TX_ID.429c1bdd9e"], "model.thorchain_models.silver__swap_events": ["model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__swaps", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_RUNE_E8___DIRECTION__BLOCK_TIMESTAMP.aa043dec13", "test.thorchain_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc", "test.thorchain_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3", "test.thorchain_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46", "test.thorchain_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a", "test.thorchain_models.not_null_silver__swap_events_FROM_E8.74389cdde1", "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e", "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8.07299825ee", "test.thorchain_models.not_null_silver__swap_events_MEMO.29e2c5dd27", "test.thorchain_models.not_null_silver__swap_events_POOL_NAME.e529db3476", "test.thorchain_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f", "test.thorchain_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8", "test.thorchain_models.not_null_silver__swap_events_TO_ASSET.2a903da825", "test.thorchain_models.not_null_silver__swap_events_TO_E8.5ad719c657", "test.thorchain_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218", "test.thorchain_models.not_null_silver__swap_events_TX_ID.ba927b5821", "test.thorchain_models.not_null_silver__swap_events__DIRECTION.910c1bf98a"], "model.thorchain_models.silver__rewards_events": ["model.thorchain_models.core__fact_rewards_events", "model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__total_block_rewards", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047", "test.thorchain_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9", "test.thorchain_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73"], "model.thorchain_models.silver__pool_block_fees": ["model.thorchain_models.core__fact_pool_block_fees", "model.thorchain_models.silver__daily_pool_stats", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__1.9f4ccb4419", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef", "test.thorchain_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362", "test.thorchain_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6", "test.thorchain_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755", "test.thorchain_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d", "test.thorchain_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19", "test.thorchain_models.not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES.66a098c1a6", "test.thorchain_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE.eb022a7e93"], "model.thorchain_models.silver__switch_events": ["model.thorchain_models.core__fact_switch_events", "model.thorchain_models.silver__upgrades", "test.thorchain_models.not_null_silver__switch_events_BLOCK_TIMESTAMP.b941c05110", "test.thorchain_models.not_null_silver__switch_events_BURN_ASSET.6194d1cd04", "test.thorchain_models.not_null_silver__switch_events_BURN_E8.11e4de9978", "test.thorchain_models.not_null_silver__switch_events_FROM_ADDRESS.5dfa330f9f", "test.thorchain_models.not_null_silver__switch_events_MINT_E8.2d0496b427", "test.thorchain_models.not_null_silver__switch_events_TO_ADDRESS.736ede374c"], "model.thorchain_models.silver__fee_events": ["model.thorchain_models.core__fact_fee_events", "test.thorchain_models.not_null_silver__fee_events_ASSET.3832e5408e", "test.thorchain_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e", "test.thorchain_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a", "test.thorchain_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475", "test.thorchain_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8"], "model.thorchain_models.silver__add_events": ["model.thorchain_models.core__fact_add_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9", "test.thorchain_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa", "test.thorchain_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19", "test.thorchain_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394", "test.thorchain_models.not_null_silver__add_events_MEMO.111566b9b2", "test.thorchain_models.not_null_silver__add_events_POOL_NAME.66d963165a", "test.thorchain_models.not_null_silver__add_events_RUNE_E8.4f27ad7cc3", "test.thorchain_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57", "test.thorchain_models.not_null_silver__add_events_TX_ID.3e7dfb5274"], "model.thorchain_models.silver__unstake_events": ["model.thorchain_models.core__fact_unstake_events", "model.thorchain_models.silver__liquidity_actions", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__unstake_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP.bd91a0a83d", "test.thorchain_models.not_null_silver__unstake_events_ASSET.e9f4a9746f", "test.thorchain_models.not_null_silver__unstake_events_ASSET_E8.54abd36fd1", "test.thorchain_models.not_null_silver__unstake_events_ASYMMETRY.3c353041f3", "test.thorchain_models.not_null_silver__unstake_events_BASIS_POINTS.df77f8aa06", "test.thorchain_models.not_null_silver__unstake_events_BLOCKCHAIN.e25187dab1", "test.thorchain_models.not_null_silver__unstake_events_BLOCK_TIMESTAMP.f37d91fcf1", "test.thorchain_models.not_null_silver__unstake_events_EMIT_ASSET_E8.1b1e210854", "test.thorchain_models.not_null_silver__unstake_events_EMIT_RUNE_E8.f53214feaa", "test.thorchain_models.not_null_silver__unstake_events_FROM_ADDRESS.67dcb74bba", "test.thorchain_models.not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8.92e6f434df", "test.thorchain_models.not_null_silver__unstake_events_MEMO.dce0d87908", "test.thorchain_models.not_null_silver__unstake_events_POOL_NAME.79317b5248", "test.thorchain_models.not_null_silver__unstake_events_STAKE_UNITS.d2d003bdfe", "test.thorchain_models.not_null_silver__unstake_events_TO_ADDRESS.5ebf6180c6", "test.thorchain_models.not_null_silver__unstake_events_TX_ID.9f93ff63dc", "test.thorchain_models.not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8.3525499a5a"], "model.thorchain_models.silver__pool_balance_change_events": ["model.thorchain_models.core__fact_pool_balance_change_events", "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a", "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793", "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710", "test.thorchain_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9", "test.thorchain_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926", "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_ADD.1cfcf54a13", "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_AMOUNT.1a0e408609"], "model.thorchain_models.silver__block_rewards": ["model.thorchain_models.core__fact_block_rewards", "model.thorchain_models.silver__daily_earnings", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__1.05867e3497", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d", "test.thorchain_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928", "test.thorchain_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77", "test.thorchain_models.not_null_silver__block_rewards_DAY.202d1b684a", "test.thorchain_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9", "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e", "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f"], "model.thorchain_models.silver__errata_events": ["model.thorchain_models.core__fact_errata_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__errata_events_IN_TX__ASSET__BLOCK_TIMESTAMP.a1b8166c5f", "test.thorchain_models.not_null_silver__errata_events_ASSET.bf7cbb369c", "test.thorchain_models.not_null_silver__errata_events_ASSET_E8.b87bf8f0b8", "test.thorchain_models.not_null_silver__errata_events_BLOCK_TIMESTAMP.ed26a3347f", "test.thorchain_models.not_null_silver__errata_events_IN_TX.46f2587784", "test.thorchain_models.not_null_silver__errata_events_RUNE_E8.d04fa6d569"], "model.thorchain_models.silver__upgrades": ["model.thorchain_models.core__fact_upgrades", "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__upgrades_TO_ADDRESS__thor_0_9a_zA_Z_39_.4a808837e8", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__upgrades_BLOCK_TIMESTAMP__day__1.7be6afcdb1", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__upgrades_TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__TO_ADDRESS__BURN_ASSET.35b0e1e2da", "test.thorchain_models.not_null_silver__upgrades_BLOCK_ID.070f1680e3", "test.thorchain_models.not_null_silver__upgrades_BLOCK_TIMESTAMP.868821c1d9", "test.thorchain_models.not_null_silver__upgrades_BURN_ASSET.08a2741c2a", "test.thorchain_models.not_null_silver__upgrades_FROM_ADDRESS.38943cd872", "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT.4926b6dfbf", "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT_USD.88e239598a", "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT.6f5174d19c", "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT_USD.c580af1338", "test.thorchain_models.not_null_silver__upgrades_TO_ADDRESS.ff5bcf771b"], "model.thorchain_models.silver__reserve_events": ["model.thorchain_models.core__fact_reserve_events"], "model.thorchain_models.silver__set_node_keys_events": ["model.thorchain_models.core__fact_set_node_keys_events"], "model.thorchain_models.silver__block_log": ["model.thorchain_models.core__dim_block", "model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__liquidity_actions", "model.thorchain_models.silver__liquidity_actions", "model.thorchain_models.silver__pool_block_balances", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__prices", "model.thorchain_models.silver__swaps", "model.thorchain_models.silver__total_block_rewards", "model.thorchain_models.silver__total_block_rewards", "model.thorchain_models.silver__total_value_locked", "model.thorchain_models.silver__total_value_locked", "model.thorchain_models.silver__transfers", "model.thorchain_models.silver__upgrades", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e", "test.thorchain_models.not_null_silver__block_log_HASH.832559848d", "test.thorchain_models.not_null_silver__block_log_HEIGHT.e9a4d0156c", "test.thorchain_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9"], "model.thorchain_models.silver__stake_events": ["model.thorchain_models.core__fact_stake_events", "model.thorchain_models.silver__liquidity_actions", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__pool_block_statistics", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__RUNE_TX_ID__RUNE_ADDRESS__BLOCK_TIMESTAMP.0e22ecc2c0", "test.thorchain_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9", "test.thorchain_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf", "test.thorchain_models.not_null_silver__stake_events_POOL_NAME.341d5d5927", "test.thorchain_models.not_null_silver__stake_events_RUNE_E8.b9a59bf8ec", "test.thorchain_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55", "test.thorchain_models.not_null_silver__stake_events__ASSET_IN_RUNE_E8.75a9ea038c"], "model.thorchain_models.silver__rewards_event_entries": ["model.thorchain_models.core__fact_rewards_event_entries", "model.thorchain_models.silver__block_rewards", "model.thorchain_models.silver__pool_block_fees", "model.thorchain_models.silver__total_block_rewards", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME.49f4595c4a", "test.thorchain_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774", "test.thorchain_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5", "test.thorchain_models.not_null_silver__rewards_event_entries_RUNE_E8.d2d96ab281"], "model.thorchain_models.silver__set_ip_address_events": ["model.thorchain_models.core__fact_set_ip_address_events"], "model.thorchain_models.silver__prices": ["model.thorchain_models.core__fact_bond_actions", "model.thorchain_models.core__fact_prices", "model.thorchain_models.silver__daily_earnings", "model.thorchain_models.silver__daily_earnings", "model.thorchain_models.silver__daily_pool_stats", "model.thorchain_models.silver__daily_tvl", "model.thorchain_models.silver__daily_tvl", "model.thorchain_models.silver__liquidity_actions", "model.thorchain_models.silver__liquidity_actions", "model.thorchain_models.silver__pool_block_balances", "model.thorchain_models.silver__pool_block_statistics", "model.thorchain_models.silver__swaps", "model.thorchain_models.silver__total_block_rewards", "model.thorchain_models.silver__total_block_rewards", "model.thorchain_models.silver__transfers", "model.thorchain_models.silver__upgrades", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb", "test.thorchain_models.not_null_silver__prices_ASSET_USD.a900d8c697", "test.thorchain_models.not_null_silver__prices_BLOCK_ID.b3347041fc", "test.thorchain_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f", "test.thorchain_models.not_null_silver__prices_POOL_NAME.7eacc16a03", "test.thorchain_models.not_null_silver__prices_PRICE_ASSET_RUNE.19b631d861", "test.thorchain_models.not_null_silver__prices_PRICE_RUNE_ASSET.3b8a85b233", "test.thorchain_models.not_null_silver__prices_RUNE_USD.2ac6d1ee7a"], "model.thorchain_models.silver__total_block_rewards": ["model.thorchain_models.core__fact_total_block_rewards", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43", "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300", "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434", "test.thorchain_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2", "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT.ebf47bba39", "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT_USD.054408ab82"], "model.thorchain_models.silver__pending_liquidity_events": ["model.thorchain_models.core__fact_pending_liquidity_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__RUNE_TX_ID__RUNE_ADDRESS__PENDING_TYPE__BLOCK_TIMESTAMP.f76bd250fb", "test.thorchain_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269", "test.thorchain_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff", "test.thorchain_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1", "test.thorchain_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9", "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_ADDRESS.4812d25cff", "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_E8.d42e986972"], "model.thorchain_models.silver__slash_points": ["model.thorchain_models.core__fact_slash_points"], "model.thorchain_models.silver__gas_events": ["model.thorchain_models.core__fact_gas_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f", "test.thorchain_models.not_null_silver__gas_events_ASSET.59ad7ccacd", "test.thorchain_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77", "test.thorchain_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24", "test.thorchain_models.not_null_silver__gas_events_RUNE_E8.4accfe95df", "test.thorchain_models.not_null_silver__gas_events_TX_COUNT.a45fc07260"], "model.thorchain_models.silver__pool_events": ["model.thorchain_models.core__fact_pool_events", "model.thorchain_models.silver__pool_block_statistics"], "model.thorchain_models.silver__set_version_events": ["model.thorchain_models.core__fact_set_version_events"], "model.thorchain_models.silver__active_vault_events": ["model.thorchain_models.core__fact_active_vault_events", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978", "test.thorchain_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13", "test.thorchain_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868"], "model.thorchain_models.silver__slash_amounts": ["model.thorchain_models.core__fact_slash_amounts"], "model.thorchain_models.silver__pool_block_balances": ["model.thorchain_models.core__fact_pool_block_balances", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79", "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190", "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b", "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66", "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c", "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579", "test.thorchain_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b", "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT.5a9eb1961c", "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT_USD.a2fdbc2215", "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310", "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553"], "model.thorchain_models.silver__constants": [], "model.thorchain_models.silver__new_node_events": ["model.thorchain_models.core__fact_new_node_events"], "operation.dbt_constraints.dbt_constraints-on-run-end-0": [], "test.thorchain_models.not_null_silver__transfer_events_BLOCK_TIMESTAMP.1ff60425a6": [], "test.thorchain_models.not_null_silver__transfer_events_ASSET.4d061223da": [], "test.thorchain_models.not_null_silver__transfer_events_AMOUNT_E8.4a22457c1d": [], "test.thorchain_models.not_null_silver__transfer_events_FROM_ADDRESS.199be5d0bb": [], "test.thorchain_models.not_null_silver__transfer_events_TO_ADDRESS.3db72ea291": [], "test.thorchain_models.not_null_silver__validator_request_leave_events_EVENT_ID.b55c332547": [], "test.thorchain_models.not_null_silver__validator_request_leave_events_TX_ID.e98479bb26": [], "test.thorchain_models.not_null_silver__validator_request_leave_events_FROM_ADDRESS.209d28d48f": [], "test.thorchain_models.not_null_silver__validator_request_leave_events_NODE_ADDRESS.c91207bb4e": [], "test.thorchain_models.not_null_silver__validator_request_leave_events_BLOCK_TIMESTAMP.290714d793": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__validator_request_leave_events_EVENT_ID__TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__NODE_ADDRESS.90d08ddaee": [], "test.thorchain_models.not_null_silver__refund_events_TX_ID.d818e4a9c0": [], "test.thorchain_models.not_null_silver__refund_events_BLOCKCHAIN.377143648d": [], "test.thorchain_models.not_null_silver__refund_events_FROM_ADDRESS.95dd9f9c95": [], "test.thorchain_models.not_null_silver__refund_events_TO_ADDRESS.2fda85c5dd": [], "test.thorchain_models.not_null_silver__refund_events_ASSET.8d91917f0d": [], "test.thorchain_models.not_null_silver__refund_events_ASSET_E8.2e099ee072": [], "test.thorchain_models.not_null_silver__refund_events_ASSET_2ND_E8.f8450d1bd5": [], "test.thorchain_models.not_null_silver__refund_events_CODE.fee514c705": [], "test.thorchain_models.not_null_silver__refund_events_REASON.080b9527d1": [], "test.thorchain_models.not_null_silver__refund_events_BLOCK_TIMESTAMP.60c1f10234": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__refund_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__ASSET_2ND__MEMO__CODE__REASON__BLOCK_TIMESTAMP__EVENT_ID.bfb7525b50": [], "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_TIMESTAMP.ff2d2892a0": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__liquidity_actions_BLOCK_TIMESTAMP__day__1.20722a4e9a": [], "test.thorchain_models.not_null_silver__liquidity_actions_BLOCK_ID.39dcd6abaa": [], "test.thorchain_models.not_null_silver__liquidity_actions_LP_ACTION.c249d79d62": [], "test.thorchain_models.not_null_silver__liquidity_actions_POOL_NAME.3ad71b8145": [], "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT.f7115d2d81": [], "test.thorchain_models.not_null_silver__liquidity_actions_RUNE_AMOUNT_USD.520ffc3716": [], "test.thorchain_models.not_null_silver__liquidity_actions_ASSET_AMOUNT.9620d465a9": [], "test.thorchain_models.not_null_silver__liquidity_actions_STAKE_UNITS.689ec0ada5": [], "test.thorchain_models.not_null_silver__total_value_locked_DAY.5d7ba86e85": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_value_locked_DAY__day__1.0a174f17b5": [], "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_POOLED.ca339c528a": [], "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_BONDED.6df7fe839f": [], "test.thorchain_models.not_null_silver__total_value_locked_TOTAL_VALUE_LOCKED.32714bbc40": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_value_locked_DAY.156a4d804a": [], "test.thorchain_models.not_null_silver__update_node_account_status_events_NODE_ADDRESS.2462678a83": [], "test.thorchain_models.not_null_silver__update_node_account_status_events_CURRENT_STATUS.e8417a26f7": [], "test.thorchain_models.not_null_silver__update_node_account_status_events_FORMER_STATUS.a863f18a99": [], "test.thorchain_models.not_null_silver__update_node_account_status_events_BLOCK_TIMESTAMP.f7cd76f13b": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__update_node_account_status_events_NODE_ADDRESS__CURRENT_STATUS__FORMER_STATUS__BLOCK_TIMESTAMP.d4b84a39d2": [], "test.thorchain_models.not_null_silver__bond_events_BLOCK_TIMESTAMP.b9485030e0": [], "test.thorchain_models.not_null_silver__bond_events_TX_ID.d18467b918": [], "test.thorchain_models.not_null_silver__bond_events_ASSET_E8.2bc5c2e174": [], "test.thorchain_models.not_null_silver__bond_events_BOND_TYPE.598bb69e8e": [], "test.thorchain_models.not_null_silver__bond_events_E8.c19384976b": [], "test.thorchain_models.not_null_silver__switch_events_BLOCK_TIMESTAMP.b941c05110": [], "test.thorchain_models.not_null_silver__switch_events_TO_ADDRESS.736ede374c": [], "test.thorchain_models.not_null_silver__switch_events_BURN_ASSET.6194d1cd04": [], "test.thorchain_models.not_null_silver__switch_events_FROM_ADDRESS.5dfa330f9f": [], "test.thorchain_models.not_null_silver__switch_events_BURN_E8.11e4de9978": [], "test.thorchain_models.not_null_silver__switch_events_MINT_E8.2d0496b427": [], "test.thorchain_models.not_null_silver__pool_block_fees_DAY.ecfb240ac6": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_fees_DAY__day__1.9f4ccb4419": [], "test.thorchain_models.not_null_silver__pool_block_fees_POOL_NAME.f126e2294d": [], "test.thorchain_models.not_null_silver__pool_block_fees_REWARDS.5b1d8b2e19": [], "test.thorchain_models.not_null_silver__pool_block_fees_TOTAL_LIQUIDITY_FEES_RUNE.eb022a7e93": [], "test.thorchain_models.not_null_silver__pool_block_fees_ASSET_LIQUIDITY_FEES.b890f32362": [], "test.thorchain_models.not_null_silver__pool_block_fees_RUNE_LIQUIDITY_FEES.66a098c1a6": [], "test.thorchain_models.not_null_silver__pool_block_fees_EARNINGS.78b1e80755": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_fees_DAY__POOL_NAME.bd55b36cef": [], "test.thorchain_models.not_null_silver__rewards_events_BLOCK_TIMESTAMP.9c9ab7fca9": [], "test.thorchain_models.not_null_silver__rewards_events_BOND_E8.7e5ede5d73": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_events_BLOCK_TIMESTAMP.b923b50047": [], "test.thorchain_models.not_null_silver__swap_events_TX_ID.ba927b5821": [], "test.thorchain_models.not_null_silver__swap_events_BLOCKCHAIN.46d45dd5fc": [], "test.thorchain_models.not_null_silver__swap_events_FROM_ADDRESS.06e1df5a46": [], "test.thorchain_models.not_null_silver__swap_events_TO_ADDRESS.3c473194d8": [], "test.thorchain_models.not_null_silver__swap_events_FROM_ASSET.cfbedd6f2a": [], "test.thorchain_models.not_null_silver__swap_events_FROM_E8.74389cdde1": [], "test.thorchain_models.not_null_silver__swap_events_TO_ASSET.2a903da825": [], "test.thorchain_models.not_null_silver__swap_events_TO_E8.5ad719c657": [], "test.thorchain_models.not_null_silver__swap_events_MEMO.29e2c5dd27": [], "test.thorchain_models.not_null_silver__swap_events_POOL_NAME.e529db3476": [], "test.thorchain_models.not_null_silver__swap_events_TO_E8_MIN.d4667fb218": [], "test.thorchain_models.not_null_silver__swap_events_SWAP_SLIP_BP.61c1b2db2f": [], "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_E8.3403a5a47e": [], "test.thorchain_models.not_null_silver__swap_events_LIQ_FEE_IN_RUNE_E8.07299825ee": [], "test.thorchain_models.not_null_silver__swap_events__DIRECTION.910c1bf98a": [], "test.thorchain_models.not_null_silver__swap_events_BLOCK_TIMESTAMP.a57ee76fa3": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swap_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__FROM_ASSET__FROM_E8__TO_ASSET__TO_E8__MEMO__POOL_NAME__TO_E8_MIN__SWAP_SLIP_BP__LIQ_FEE_E8__LIQ_FEE_IN_RUNE_E8___DIRECTION__BLOCK_TIMESTAMP.aa043dec13": [], "test.thorchain_models.not_null_silver__swaps_BLOCK_ID.85d35d8cd4": [], "test.thorchain_models.not_null_silver__swaps_BLOCK_TIMESTAMP_DATE.57ccf41e0a": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__swaps_BLOCK_TIMESTAMP_DATE__day__1.3593f474c4": [], "test.thorchain_models.not_null_silver__swaps_TX_ID.429c1bdd9e": [], "test.thorchain_models.not_null_silver__swaps_BLOCKCHAIN.704d8b1b68": [], "test.thorchain_models.not_null_silver__swaps_POOL_NAME.8d3cfe0652": [], "test.thorchain_models.not_null_silver__swaps_FROM_ADDRESS.247c2a81d9": [], "test.thorchain_models.not_null_silver__swaps_TO_POOL_ADDRESS.eec1cbbccd": [], "test.thorchain_models.not_null_silver__swaps_FROM_ASSET.2503f2d93d": [], "test.thorchain_models.not_null_silver__swaps_TO_ASSET.d9705bc2c4": [], "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT.a2d756c197": [], "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT.db49c788b2": [], "test.thorchain_models.not_null_silver__swaps_MIN_TO_AMOUNT.75770dfa8f": [], "test.thorchain_models.not_null_silver__swaps_FROM_AMOUNT_USD.78ab9ab5ae": [], "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_USD.f7a4de00a3": [], "test.thorchain_models.not_null_silver__swaps_TO_AMOUNT_MIN_USD.cc63ea20d5": [], "test.thorchain_models.not_null_silver__swaps_SWAP_SLIP_BP.049ffdaa3d": [], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE.a31fbfd0f7": [], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_RUNE_USD.630f16402c": [], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET.3ab6185469": [], "test.thorchain_models.not_null_silver__swaps_LIQ_FEE_ASSET_USD.542bee191c": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__swaps_TX_ID__POOL_NAME__FROM_ADDRESS__TO_POOL_ADDRESS__FROM_ASSET__TO_ASSET__NATIVE_TO_ADDRESS__FROM_AMOUNT__TO_AMOUNT.acd20d2a09": [], "test.thorchain_models.not_null_silver__fee_events_BLOCK_TIMESTAMP.c40fd33f4a": [], "test.thorchain_models.not_null_silver__fee_events_TX_ID.bfb2bd0eb8": [], "test.thorchain_models.not_null_silver__fee_events_ASSET.3832e5408e": [], "test.thorchain_models.not_null_silver__fee_events_POOL_DEDUCT.3a131f1475": [], "test.thorchain_models.not_null_silver__fee_events_ASSET_E8.0ae7bb759e": [], "test.thorchain_models.not_null_silver__unstake_events_TX_ID.9f93ff63dc": [], "test.thorchain_models.not_null_silver__unstake_events_BLOCKCHAIN.e25187dab1": [], "test.thorchain_models.not_null_silver__unstake_events_FROM_ADDRESS.67dcb74bba": [], "test.thorchain_models.not_null_silver__unstake_events_TO_ADDRESS.5ebf6180c6": [], "test.thorchain_models.not_null_silver__unstake_events_ASSET.e9f4a9746f": [], "test.thorchain_models.not_null_silver__unstake_events_ASSET_E8.54abd36fd1": [], "test.thorchain_models.not_null_silver__unstake_events_EMIT_ASSET_E8.1b1e210854": [], "test.thorchain_models.not_null_silver__unstake_events_EMIT_RUNE_E8.f53214feaa": [], "test.thorchain_models.not_null_silver__unstake_events_MEMO.dce0d87908": [], "test.thorchain_models.not_null_silver__unstake_events_POOL_NAME.79317b5248": [], "test.thorchain_models.not_null_silver__unstake_events_STAKE_UNITS.d2d003bdfe": [], "test.thorchain_models.not_null_silver__unstake_events_BASIS_POINTS.df77f8aa06": [], "test.thorchain_models.not_null_silver__unstake_events_ASYMMETRY.3c353041f3": [], "test.thorchain_models.not_null_silver__unstake_events_IMP_LOSS_PROTECTION_E8.92e6f434df": [], "test.thorchain_models.not_null_silver__unstake_events__EMIT_ASSET_IN_RUNE_E8.3525499a5a": [], "test.thorchain_models.not_null_silver__unstake_events_BLOCK_TIMESTAMP.f37d91fcf1": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__unstake_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__POOL_NAME__BLOCK_TIMESTAMP.bd91a0a83d": [], "test.thorchain_models.not_null_silver__add_events_TX_ID.3e7dfb5274": [], "test.thorchain_models.not_null_silver__add_events_FROM_ADDRESS.c11c449394": [], "test.thorchain_models.not_null_silver__add_events_TO_ADDRESS.ee57bfcd57": [], "test.thorchain_models.not_null_silver__add_events_ASSET_E8.49cc46d9aa": [], "test.thorchain_models.not_null_silver__add_events_MEMO.111566b9b2": [], "test.thorchain_models.not_null_silver__add_events_RUNE_E8.4f27ad7cc3": [], "test.thorchain_models.not_null_silver__add_events_POOL_NAME.66d963165a": [], "test.thorchain_models.not_null_silver__add_events_BLOCK_TIMESTAMP.00d2f77a19": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__add_events_EVENT_ID__TX_ID__BLOCKCHAIN__POOL_NAME__FROM_ADDRESS__TO_ADDRESS__MEMO.ba16b70ba9": [], "test.thorchain_models.not_null_silver__block_rewards_DAY.202d1b684a": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__block_rewards_DAY__day__1.05867e3497": [], "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_FEE.0d49408c2f": [], "test.thorchain_models.not_null_silver__block_rewards_BLOCK_REWARDS.1424b5c928": [], "test.thorchain_models.not_null_silver__block_rewards_EARNINGS.cc83b753f9": [], "test.thorchain_models.not_null_silver__block_rewards_BONDING_EARNINGS.46eaa4df77": [], "test.thorchain_models.not_null_silver__block_rewards_LIQUIDITY_EARNINGS.61a45ddd0e": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_rewards_DAY.62cb5ef71d": [], "test.thorchain_models.not_null_silver__pool_balance_change_events_BLOCK_TIMESTAMP.17e9062fd9": [], "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET.fe12efdf7a": [], "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_AMOUNT.1a0e408609": [], "test.thorchain_models.not_null_silver__pool_balance_change_events_RUNE_ADD.1cfcf54a13": [], "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_AMOUNT.c610565710": [], "test.thorchain_models.not_null_silver__pool_balance_change_events_ASSET_ADD.ca42123793": [], "test.thorchain_models.not_null_silver__pool_balance_change_events_REASON.cc5900d926": [], "test.thorchain_models.not_null_silver__outbound_events_BLOCKCHAIN.65ee27c62d": [], "test.thorchain_models.not_null_silver__outbound_events_FROM_ADDRESS.50d56a9b55": [], "test.thorchain_models.not_null_silver__outbound_events_TO_ADDRESS.48297fe87a": [], "test.thorchain_models.not_null_silver__outbound_events_ASSET.0d7a3cb9ee": [], "test.thorchain_models.not_null_silver__outbound_events_ASSET_E8.e28187620c": [], "test.thorchain_models.not_null_silver__outbound_events_MEMO.88f8ed52e8": [], "test.thorchain_models.not_null_silver__outbound_events_IN_TX.6b2f2fb6dc": [], "test.thorchain_models.not_null_silver__outbound_events_BLOCK_TIMESTAMP.95d579ffd3": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__outbound_events_TX_ID__BLOCKCHAIN__FROM_ADDRESS__TO_ADDRESS__ASSET__MEMO__IN_TX__BLOCK_TIMESTAMP__EVENT_ID.4205fd70e7": [], "test.thorchain_models.not_null_silver__daily_tvl_DAY.b4b5f55703": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_tvl_DAY__day__1.c4d0d5f594": [], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED.681d912d91": [], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_POOLED_USD.87301e85c3": [], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED.0fa0211531": [], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_BONDED_USD.6132803dfb": [], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED.8b27efa4f5": [], "test.thorchain_models.not_null_silver__daily_tvl_TOTAL_VALUE_LOCKED_USD.14a3029246": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_tvl_DAY.dc405aa093": [], "test.thorchain_models.not_null_silver__daily_earnings_DAY.507c4965f2": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_earnings_DAY__day__1.1bba89d3fd": [], "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES.f7387c05a8": [], "test.thorchain_models.not_null_silver__daily_earnings_LIQUIDITY_FEES_USD.cab6f63899": [], "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS.425ab37b25": [], "test.thorchain_models.not_null_silver__daily_earnings_BLOCK_REWARDS_USD.ea664e5f41": [], "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS.ccc7cfc3fb": [], "test.thorchain_models.not_null_silver__daily_earnings_TOTAL_EARNINGS_USD.3fd52ad085": [], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES.32ed3a19df": [], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_NODES_USD.4cb99a589c": [], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS.6073eca3d0": [], "test.thorchain_models.not_null_silver__daily_earnings_EARNINGS_TO_POOLS_USD.7172cf23ad": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_earnings_DAY.5ba256d244": [], "test.thorchain_models.not_null_silver__daily_pool_stats_DAY.1fc2ebda22": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__daily_pool_stats_DAY__day__1.4a002d4fdf": [], "test.thorchain_models.not_null_silver__daily_pool_stats_POOL_NAME.65d2c5c182": [], "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS.e8287959c7": [], "test.thorchain_models.not_null_silver__daily_pool_stats_SYSTEM_REWARDS_USD.03e77f1a19": [], "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_LIQUIDITY.c39639a01a": [], "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE.1404d1ca43": [], "test.thorchain_models.not_null_silver__daily_pool_stats_ASSET_PRICE_USD.43269ee26c": [], "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_LIQUIDITY.9a12031e05": [], "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE.b781c85c5c": [], "test.thorchain_models.not_null_silver__daily_pool_stats_RUNE_PRICE_USD.49c02d7724": [], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_LIQUIDITY_COUNT.8ad59930c0": [], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY.6894fa8392": [], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_ASSET_LIQUIDITY_USD.2667955ead": [], "test.thorchain_models.not_null_silver__daily_pool_stats_ADD_RUNE_LIQUIDITY_USD.3a6babb532": [], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_COUNT.44ef41bdfd": [], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY.87edc02d31": [], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_ASSET_LIQUIDITY_USD.fd07f09d47": [], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY.e35cdf38a2": [], "test.thorchain_models.not_null_silver__daily_pool_stats_WITHDRAW_RUNE_LIQUIDITY_USD.b1b68e9efc": [], "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID.b751810329": [], "test.thorchain_models.not_null_silver__daily_pool_stats_IL_PROTECTION_PAID_USD.bd460521d5": [], "test.thorchain_models.not_null_silver__daily_pool_stats_AVERAGE_SLIP.8d606cbfae": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_AVERAGE_SLIP.cf8b4755a7": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_AVERAGE_SLIP.b89bdb784c": [], "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_COUNT.ed3ad68953": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_COUNT.366a142cfd": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_COUNT.3e93a8e08c": [], "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE.8ec30e912b": [], "test.thorchain_models.not_null_silver__daily_pool_stats_SWAP_VOLUME_RUNE_USD.d97e13aeae": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_ASSET_SWAP_VOLUME.475255ccb5": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TO_RUNE_SWAP_VOLUME.2af93618fb": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_RUNE.fa14408704": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_SWAP_FEES_USD.ef71577e45": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_SWAP_FEES.e8298a5287": [], "test.thorchain_models.not_null_silver__daily_pool_stats_TOTAL_ASSET_RUNE_FEES.e16f506989": [], "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_MEMBER_COUNT.c70ad54d24": [], "test.thorchain_models.not_null_silver__daily_pool_stats_UNIQUE_SWAPPER_COUNT.38ba7212c2": [], "test.thorchain_models.not_null_silver__daily_pool_stats_LIQUIDITY_UNITS.71283b6ef9": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__daily_pool_stats_DAY__POOL_NAME.66912a355d": [], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.7eec23c0d9": [], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_TX_ID.5c8429a2d6": [], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET.4b14ad0d1c": [], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_ASSET_E8.97d75351f4": [], "test.thorchain_models.not_null_silver__asgard_fund_yggdrasil_events_VAULT_KEY.b769677902": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__asgard_fund_yggdrasil_events_EVENT_ID__TX_ID__ASSET__ASSET_E8__VAULT_KEY__BLOCK_TIMESTAMP.3ef17ff2a7": [], "test.thorchain_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.thorchain_models.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.thorchain_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": [], "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__thor_0_9a_zA_Z_39_.f2dba09fd9": [], "test.thorchain_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": [], "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__thor_0_9a_zA_Z_39_.004ec62530": [], "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT.f5e577a890": [], "test.thorchain_models.not_null_silver__transfers_RUNE_AMOUNT_USD.9c1469e6f5": [], "test.thorchain_models.not_null_silver__block_pool_depths_BLOCK_TIMESTAMP.d45c965914": [], "test.thorchain_models.not_null_silver__block_pool_depths_POOL_NAME.6b5899c602": [], "test.thorchain_models.not_null_silver__block_pool_depths_ASSET_E8.aacfa8eedf": [], "test.thorchain_models.not_null_silver__block_pool_depths_RUNE_E8.773bfaa76a": [], "test.thorchain_models.not_null_silver__block_pool_depths_SYNTH_E8.4ac67d8c72": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_pool_depths_BLOCK_TIMESTAMP__POOL_NAME.b5ab31baa3": [], "test.thorchain_models.not_null_silver__pool_block_statistics_DAY.e1d1716d58": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_statistics_DAY__day__1.e3c9116788": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_ASSET_LIQUIDITY_VOLUME.d13b4e223c": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_COUNT.a6468ef5dd": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_LIQUIDITY_VOLUME.8c96da03e7": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ADD_RUNE_LIQUIDITY_VOLUME.dc4fce7fce": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET.e2a9d555b4": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_DEPTH.afecafb5a1": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE.13060f5529": [], "test.thorchain_models.not_null_silver__pool_block_statistics_ASSET_PRICE_USD.d58add8c57": [], "test.thorchain_models.not_null_silver__pool_block_statistics_AVERAGE_SLIP.0dd0338788": [], "test.thorchain_models.not_null_silver__pool_block_statistics_IMPERMANENT_LOSS_PROTECTION_PAID.de64fea0f1": [], "test.thorchain_models.not_null_silver__pool_block_statistics_RUNE_DEPTH.ba24bcf4aa": [], "test.thorchain_models.not_null_silver__pool_block_statistics_STATUS.12571911dc": [], "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_COUNT.d16cc64040": [], "test.thorchain_models.not_null_silver__pool_block_statistics_SWAP_VOLUME.4d59da2017": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_AVERAGE_SLIP.616ea124ef": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_COUNT.686e56b6a2": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_FEES.4243fd1291": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_ASSET_VOLUME.a7619cb0c1": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_AVERAGE_SLIP.4ffb26f47a": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_COUNT.3734626432": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_FEES.dcc05b09f6": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TO_RUNE_VOLUME.39f8343ad9": [], "test.thorchain_models.not_null_silver__pool_block_statistics_TOTALFEES.cb447c44c8": [], "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_MEMBER_COUNT.e21371b8b6": [], "test.thorchain_models.not_null_silver__pool_block_statistics_UNIQUE_SWAPPER_COUNT.f58c3b5939": [], "test.thorchain_models.not_null_silver__pool_block_statistics_UNITS.1c3ee9d2a0": [], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_ASSET_VOLUME.8109e4b0cb": [], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_COUNT.5fcea77d8b": [], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_RUNE_VOLUME.2c6f4ae4b2": [], "test.thorchain_models.not_null_silver__pool_block_statistics_WITHDRAW_VOLUME.7c44597ab7": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_statistics_DAY__ASSET.aa179a7a3e": [], "test.thorchain_models.not_null_silver__prices_BLOCK_ID.b3347041fc": [], "test.thorchain_models.not_null_silver__prices_BLOCK_TIMESTAMP.d245b83d4f": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__prices_BLOCK_TIMESTAMP__day__1.00281f997e": [], "test.thorchain_models.not_null_silver__prices_PRICE_RUNE_ASSET.3b8a85b233": [], "test.thorchain_models.not_null_silver__prices_PRICE_ASSET_RUNE.19b631d861": [], "test.thorchain_models.not_null_silver__prices_ASSET_USD.a900d8c697": [], "test.thorchain_models.not_null_silver__prices_RUNE_USD.2ac6d1ee7a": [], "test.thorchain_models.not_null_silver__prices_POOL_NAME.7eacc16a03": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__prices_BLOCK_ID__POOL_NAME.7a2931d6eb": [], "test.thorchain_models.not_null_silver__pending_liquidity_events_POOL_NAME.5e22402fb9": [], "test.thorchain_models.not_null_silver__pending_liquidity_events_ASSET_E8.c201915269": [], "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_ADDRESS.4812d25cff": [], "test.thorchain_models.not_null_silver__pending_liquidity_events_RUNE_E8.d42e986972": [], "test.thorchain_models.not_null_silver__pending_liquidity_events_PENDING_TYPE.98039831a1": [], "test.thorchain_models.not_null_silver__pending_liquidity_events_BLOCK_TIMESTAMP.ab766ea5ff": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pending_liquidity_events_EVENT_ID__POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__RUNE_TX_ID__RUNE_ADDRESS__PENDING_TYPE__BLOCK_TIMESTAMP.f76bd250fb": [], "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_TIMESTAMP.7d7b639434": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__total_block_rewards_BLOCK_TIMESTAMP__day__1.8b65eead55": [], "test.thorchain_models.not_null_silver__total_block_rewards_BLOCK_ID.8619b81300": [], "test.thorchain_models.not_null_silver__total_block_rewards_REWARD_ENTITY.06013c60c2": [], "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT.ebf47bba39": [], "test.thorchain_models.not_null_silver__total_block_rewards_RUNE_AMOUNT_USD.054408ab82": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__total_block_rewards_BLOCK_ID__REWARD_ENTITY.23ceb96a43": [], "test.thorchain_models.not_null_silver__gas_events_BLOCK_TIMESTAMP.88c6e43d24": [], "test.thorchain_models.not_null_silver__gas_events_ASSET.59ad7ccacd": [], "test.thorchain_models.not_null_silver__gas_events_RUNE_E8.4accfe95df": [], "test.thorchain_models.not_null_silver__gas_events_TX_COUNT.a45fc07260": [], "test.thorchain_models.not_null_silver__gas_events_ASSET_E8.2072d4ce77": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__gas_events_EVENT_ID__ASSET__BLOCK_TIMESTAMP.b0baea926f": [], "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_TIMESTAMP.9d9432e579": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__pool_block_balances_BLOCK_TIMESTAMP__day__1.06ec2e6c79": [], "test.thorchain_models.not_null_silver__pool_block_balances_BLOCK_ID.6a3b314f7c": [], "test.thorchain_models.not_null_silver__pool_block_balances_POOL_NAME.95fecffc4b": [], "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT.5a9eb1961c": [], "test.thorchain_models.not_null_silver__pool_block_balances_RUNE_AMOUNT_USD.a2fdbc2215": [], "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT.69087d909b": [], "test.thorchain_models.not_null_silver__pool_block_balances_ASSET_AMOUNT_USD.eedbf84e66": [], "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT.6394f07310": [], "test.thorchain_models.not_null_silver__pool_block_balances_SYNTH_AMOUNT_USD.e507c3e553": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__pool_block_balances_BLOCK_ID__POOL_NAME.db3d915190": [], "test.thorchain_models.not_null_silver__active_vault_events_BLOCK_TIMESTAMP.bfcca60868": [], "test.thorchain_models.not_null_silver__active_vault_events_ADD_ASGARD_ADDR.cd001c3c13": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__active_vault_events_EVENT_ID__BLOCK_TIMESTAMP__ADD_ASGARD_ADDR.f7fa9e1978": [], "test.thorchain_models.not_null_silver__errata_events_BLOCK_TIMESTAMP.ed26a3347f": [], "test.thorchain_models.not_null_silver__errata_events_IN_TX.46f2587784": [], "test.thorchain_models.not_null_silver__errata_events_ASSET.bf7cbb369c": [], "test.thorchain_models.not_null_silver__errata_events_ASSET_E8.b87bf8f0b8": [], "test.thorchain_models.not_null_silver__errata_events_RUNE_E8.d04fa6d569": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__errata_events_IN_TX__ASSET__BLOCK_TIMESTAMP.a1b8166c5f": [], "test.thorchain_models.not_null_silver__upgrades_BLOCK_TIMESTAMP.868821c1d9": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__upgrades_BLOCK_TIMESTAMP__day__1.7be6afcdb1": [], "test.thorchain_models.not_null_silver__upgrades_BLOCK_ID.070f1680e3": [], "test.thorchain_models.not_null_silver__upgrades_FROM_ADDRESS.38943cd872": [], "test.thorchain_models.not_null_silver__upgrades_TO_ADDRESS.ff5bcf771b": [], "test.thorchain_models.dbt_expectations_expect_column_values_to_match_regex_silver__upgrades_TO_ADDRESS__thor_0_9a_zA_Z_39_.4a808837e8": [], "test.thorchain_models.not_null_silver__upgrades_BURN_ASSET.08a2741c2a": [], "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT.6f5174d19c": [], "test.thorchain_models.not_null_silver__upgrades_RUNE_AMOUNT_USD.c580af1338": [], "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT.4926b6dfbf": [], "test.thorchain_models.not_null_silver__upgrades_MINT_AMOUNT_USD.88e239598a": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__upgrades_TX_ID__BLOCK_TIMESTAMP__FROM_ADDRESS__TO_ADDRESS__BURN_ASSET.35b0e1e2da": [], "test.thorchain_models.not_null_silver__block_log_TIMESTAMP.211bc1ece9": [], "test.thorchain_models.not_null_silver__block_log_HEIGHT.e9a4d0156c": [], "test.thorchain_models.not_null_silver__block_log_HASH.832559848d": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__block_log_HEIGHT__TIMESTAMP__HASH__AGG_STATE.ba5ad4e27e": [], "test.thorchain_models.not_null_silver__stake_events_POOL_NAME.341d5d5927": [], "test.thorchain_models.not_null_silver__stake_events_ASSET_E8.23fed0c3e9": [], "test.thorchain_models.not_null_silver__stake_events_STAKE_UNITS.71ce8d8f55": [], "test.thorchain_models.not_null_silver__stake_events_RUNE_E8.b9a59bf8ec": [], "test.thorchain_models.not_null_silver__stake_events__ASSET_IN_RUNE_E8.75a9ea038c": [], "test.thorchain_models.not_null_silver__stake_events_BLOCK_TIMESTAMP.99273b28bf": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__stake_events_POOL_NAME__ASSET_TX_ID__ASSET_BLOCKCHAIN__ASSET_ADDRESS__STAKE_UNITS__RUNE_TX_ID__RUNE_ADDRESS__BLOCK_TIMESTAMP.0e22ecc2c0": [], "test.thorchain_models.not_null_silver__rewards_event_entries_BLOCK_TIMESTAMP.b2bee0a774": [], "test.thorchain_models.not_null_silver__rewards_event_entries_RUNE_E8.d2d96ab281": [], "test.thorchain_models.not_null_silver__rewards_event_entries_POOL_NAME.714768eae5": [], "test.thorchain_models.dbt_utils_unique_combination_of_columns_silver__rewards_event_entries_BLOCK_TIMESTAMP__POOL_NAME.49f4595c4a": [], "test.thorchain_models.tests__fact_prices__block_id-assert_no_gaps": [], "test.thorchain_models.tests__fact_swaps_assert_all_ids_exist_swap_events": [], "test.thorchain_models.tests__fact_daily_earnings__day_assert_no_gaps": [], "test.thorchain_models.tests__fact_block_pool_depths__block_id_assert_no_gaps": [], "test.thorchain_models.tests__fact_pool_block_statistics__day_assert_no_gap": [], "test.thorchain_models.tests__fact_pool_block_balances__block_id_assert_no_gaps": [], "test.thorchain_models.tests__fact_total_value_locked_day_assert_no_gap": [], "test.thorchain_models.tests__fact_total_block_rewards_block_id_assert_no_gaps": [], "test.thorchain_models.tests__fact_pool_block_fees__day_assert_no_gap": [], "test.thorchain_models.tests__fact_daily_pool_stats__day_assert_no_gaps": [], "test.thorchain_models.tests__fact_daily_tvl__day_assert_no_gaps": [], "test.thorchain_models.tests__fact_block_rewards__day_assert_no_gap": [], "model.thorchain_models.core__fact_pool_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0340867efb", "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_events_FACT_POOL_EVENTS_ID.13c1ea183b", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_events_FACT_POOL_EVENTS_ID.05fb28a742", "test.thorchain_models.negative_one_core__fact_pool_events_DIM_BLOCK_ID.229c8d7f20", "test.thorchain_models.not_null_core__fact_pool_events_BLOCK_TIMESTAMP.05cfb58d49", "test.thorchain_models.unique_core__fact_pool_events_FACT_POOL_EVENTS_ID.a1d33c7d0a"], "model.thorchain_models.core__fact_refund_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0233f89047", "test.thorchain_models.dbt_constraints_primary_key_core__fact_refund_events_FACT_REFUND_EVENTS_ID.81e4335507", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_refund_events_FACT_REFUND_EVENTS_ID.30b6902b47", "test.thorchain_models.negative_one_core__fact_refund_events_DIM_BLOCK_ID.4a28b5bc7c", "test.thorchain_models.not_null_core__fact_refund_events_BLOCK_TIMESTAMP.8b9509ce39", "test.thorchain_models.unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID.6f93d8d08e"], "model.thorchain_models.core__fact_inactive_vault_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fde1b47635", "test.thorchain_models.dbt_constraints_primary_key_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.a765dbbadc", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.762237682c", "test.thorchain_models.negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID.83076c6521", "test.thorchain_models.not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.6ee8b1c1ac", "test.thorchain_models.not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP.2da1a512b0", "test.thorchain_models.unique_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.20dbc5312c"], "model.thorchain_models.core__fact_set_version_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4f6df8b36a", "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.4cc0e57996", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.2996130685", "test.thorchain_models.negative_one_core__fact_set_version_events_DIM_BLOCK_ID.52ed0c5ef6", "test.thorchain_models.not_null_core__fact_set_version_events_BLOCK_TIMESTAMP.8e51f47ffb", "test.thorchain_models.unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.ba09f86108"], "model.thorchain_models.core__dim_block": ["model.thorchain_models.core__fact_active_vault_events", "model.thorchain_models.core__fact_add_events", "model.thorchain_models.core__fact_asgard_fund_yggdrasil_events", "model.thorchain_models.core__fact_block_pool_depths", "model.thorchain_models.core__fact_bond_actions", "model.thorchain_models.core__fact_bond_events", "model.thorchain_models.core__fact_errata_events", "model.thorchain_models.core__fact_fee_events", "model.thorchain_models.core__fact_gas_events", "model.thorchain_models.core__fact_inactive_vault_events", "model.thorchain_models.core__fact_liquidity_actions", "model.thorchain_models.core__fact_new_node_events", "model.thorchain_models.core__fact_outbound_events", "model.thorchain_models.core__fact_pending_liquidity_events", "model.thorchain_models.core__fact_pool_balance_change_events", "model.thorchain_models.core__fact_pool_block_balances", "model.thorchain_models.core__fact_pool_events", "model.thorchain_models.core__fact_prices", "model.thorchain_models.core__fact_refund_events", "model.thorchain_models.core__fact_reserve_events", "model.thorchain_models.core__fact_rewards_event_entries", "model.thorchain_models.core__fact_rewards_events", "model.thorchain_models.core__fact_set_ip_address_events", "model.thorchain_models.core__fact_set_mimir_events", "model.thorchain_models.core__fact_set_node_keys_events", "model.thorchain_models.core__fact_set_version_events", "model.thorchain_models.core__fact_slash_amounts", "model.thorchain_models.core__fact_slash_points", "model.thorchain_models.core__fact_stake_events", "model.thorchain_models.core__fact_swaps", "model.thorchain_models.core__fact_switch_events", "model.thorchain_models.core__fact_thorname_change_events", "model.thorchain_models.core__fact_total_block_rewards", "model.thorchain_models.core__fact_transfer_events", "model.thorchain_models.core__fact_transfers", "model.thorchain_models.core__fact_unstake_events", "model.thorchain_models.core__fact_update_node_account_status_events", "model.thorchain_models.core__fact_upgrades", "model.thorchain_models.core__fact_validator_request_leave_events", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b9a88a56b1", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38dcabe04d", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.131c30ab41", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.14b49fcf71", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.01d3250232", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1892d1fe78", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2036706b9e", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.524d327517", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5dc998f326", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fde1b47635", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cab10fa844", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4de363f5ea", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.277332ae7e", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2429920cfb", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.029949114a", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a4580f364c", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0340867efb", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38e7c4700c", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0233f89047", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.becfbe7562", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7a477fe9e6", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dd0a168223", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc626285f1", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fd9fdc9f41", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4f6df8b36a", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.42a2e94cfe", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.eb3f0e7ae8", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.11c16f16f2", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9c0cfcb6fa", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.48c70568b9", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1ed6c8a772", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2d656d9d6f", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c5326ea89a", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8f291f6f39", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a7ce140c43", "test.thorchain_models.dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5f659e000c", "test.thorchain_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7", "test.thorchain_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62", "test.thorchain_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00", "test.thorchain_models.not_null_core__dim_block_BLOCK_ID.4093a445bc", "test.thorchain_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8", "test.thorchain_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003", "test.thorchain_models.not_null_core__dim_block_HASH.b08299a937", "test.thorchain_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed", "test.thorchain_models.tests__fact_block_pool_depths__block_id_assert_no_gaps", "test.thorchain_models.tests__fact_pool_block_balances__block_id_assert_no_gaps", "test.thorchain_models.tests__fact_prices__block_id-assert_no_gaps", "test.thorchain_models.tests__fact_total_block_rewards_block_id_assert_no_gaps"], "model.thorchain_models.core__fact_swaps": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9c0cfcb6fa", "test.thorchain_models.dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID.a2d4e0d78c", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713", "test.thorchain_models.negative_one_core__fact_swaps_DIM_BLOCK_ID.396aa69d74", "test.thorchain_models.not_null_core__fact_swaps_BLOCK_TIMESTAMP.1623c6eef8", "test.thorchain_models.tests__fact_swaps_assert_all_ids_exist_swap_events", "test.thorchain_models.unique_core__fact_swaps_FACT_SWAPS_ID.7963ad36b2"], "model.thorchain_models.core__fact_pool_block_statistics": ["test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.8b6f112393", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ec777b98b4", "test.thorchain_models.tests__fact_pool_block_statistics__day_assert_no_gap", "test.thorchain_models.unique_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.b28d264159"], "model.thorchain_models.core__fact_bond_actions": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.01d3250232", "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.f8b3537e11", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.bbca05111b", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_actions_BLOCK_TIMESTAMP__day__4.6de8191c45", "test.thorchain_models.negative_one_core__fact_bond_actions_DIM_BLOCK_ID.62a90a6040", "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_AMOUNT.1b3ee2f2e2", "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_USD.698118cb1c", "test.thorchain_models.not_null_core__fact_bond_actions_BLOCKCHAIN.173b70dd6d", "test.thorchain_models.not_null_core__fact_bond_actions_BLOCK_TIMESTAMP.e429436031", "test.thorchain_models.not_null_core__fact_bond_actions_FROM_ADDRESS.f83dcb3484", "test.thorchain_models.not_null_core__fact_bond_actions_TO_ADDRESS.609662b36d", "test.thorchain_models.not_null_core__fact_bond_actions_TX_ID.479e4a030a", "test.thorchain_models.not_null_core__fact_bond_actions_bond_type.df2a3b5b16", "test.thorchain_models.unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.8735e54613"], "model.thorchain_models.core__fact_switch_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.48c70568b9", "test.thorchain_models.dbt_constraints_primary_key_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.3cd83ce9a7", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.299741a909", "test.thorchain_models.negative_one_core__fact_switch_events_DIM_BLOCK_ID.960a6c0dea", "test.thorchain_models.not_null_core__fact_switch_events_BLOCK_TIMESTAMP.0437ab72e5", "test.thorchain_models.unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.93082c83ed"], "model.thorchain_models.core__fact_validator_request_leave_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5f659e000c", "test.thorchain_models.dbt_constraints_primary_key_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.f069e268df", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a226b8835b", "test.thorchain_models.negative_one_core__fact_validator_request_leave_events_DIM_BLOCK_ID.1c5ec06d3b", "test.thorchain_models.not_null_core__fact_validator_request_leave_events_BLOCK_TIMESTAMP.b70f758672", "test.thorchain_models.not_null_core__fact_validator_request_leave_events_FROM_ADDRESS.51d60a71ad", "test.thorchain_models.not_null_core__fact_validator_request_leave_events_NODE_ADDRESS.62d399b92d", "test.thorchain_models.not_null_core__fact_validator_request_leave_events_TX_ID.ee988a79e0", "test.thorchain_models.unique_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a9bbb3dffc"], "model.thorchain_models.core__fact_block_rewards": ["test.thorchain_models.dbt_constraints_primary_key_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.e333e2b210", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.76e23118ec", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_rewards_DAY__day__1.17002b354c", "test.thorchain_models.not_null_core__fact_block_rewards_BLOCK_REWARDS.5895cca37e", "test.thorchain_models.not_null_core__fact_block_rewards_BONDING_EARNINGS.6b00d9f87b", "test.thorchain_models.not_null_core__fact_block_rewards_DAY.f3adaa7c0d", "test.thorchain_models.not_null_core__fact_block_rewards_EARNINGS.af56926f59", "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS.470f463bc6", "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_FEE.98923b7b52", "test.thorchain_models.tests__fact_block_rewards__day_assert_no_gap", "test.thorchain_models.unique_core__fact_block_rewards_DAY.0ccd5bbf19", "test.thorchain_models.unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.38bd20da50"], "model.thorchain_models.core__fact_update_node_account_status_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8f291f6f39", "test.thorchain_models.dbt_constraints_primary_key_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.d46b96f1c2", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e63145c998", "test.thorchain_models.negative_one_core__fact_update_node_account_status_events_DIM_BLOCK_ID.1b8be0e620", "test.thorchain_models.not_null_core__fact_update_node_account_status_events_BLOCK_TIMESTAMP.d3ea501c1e", "test.thorchain_models.not_null_core__fact_update_node_account_status_events_CURRENT_STATUS.56817a94d4", "test.thorchain_models.not_null_core__fact_update_node_account_status_events_FORMER_STATUS.542955010b", "test.thorchain_models.not_null_core__fact_update_node_account_status_events_NODE_ADDRESS.d803773e0e", "test.thorchain_models.unique_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.44d86e956f"], "model.thorchain_models.core__fact_active_vault_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b9a88a56b1", "test.thorchain_models.dbt_constraints_primary_key_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.e8289f48d1", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3d763daf51", "test.thorchain_models.negative_one_core__fact_active_vault_events_DIM_BLOCK_ID.722702a8fc", "test.thorchain_models.not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR.125c40e8d2", "test.thorchain_models.not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP.1d3fbb0a3b", "test.thorchain_models.unique_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.79697cc3a3"], "model.thorchain_models.core__fact_upgrades": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a7ce140c43", "test.thorchain_models.dbt_constraints_primary_key_core__fact_upgrades_FACT_UPGRADES_ID.2a81ce04d0", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_upgrades_FACT_UPGRADES_ID.9298b1c97b", "test.thorchain_models.not_null_core__fact_upgrades_BLOCK_TIMESTAMP.f3d7bb5e1b", "test.thorchain_models.not_null_core__fact_upgrades_TX_ID.88449dfc60", "test.thorchain_models.unique_core__fact_upgrades_FACT_UPGRADES_ID.a36315e988"], "model.thorchain_models.core__fact_pool_block_balances": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a4580f364c", "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.e0fa300f8a", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.89e5ab7b3f", "test.thorchain_models.negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID.f1f87272cb", "test.thorchain_models.not_null_core__fact_pool_block_balances_ASSET_AMOUNT.8e6a6db124", "test.thorchain_models.not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP.9d11fe9f1e", "test.thorchain_models.not_null_core__fact_pool_block_balances_POOL_NAME.7349f760b3", "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT.6437831137", "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD.646a684c15", "test.thorchain_models.not_null_core__fact_pool_block_balances_SYNTH_AMOUNT.26b33d8c1b", "test.thorchain_models.unique_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.624eb36d01"], "model.thorchain_models.core__fact_reserve_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.becfbe7562", "test.thorchain_models.dbt_constraints_primary_key_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.9f61e9de79", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.c50105a5a2", "test.thorchain_models.negative_one_core__fact_reserve_events_DIM_BLOCK_ID.2dcdfcd58c", "test.thorchain_models.not_null_core__fact_reserve_events_BLOCK_TIMESTAMP.9a529f13da", "test.thorchain_models.unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.2278508729"], "model.thorchain_models.core__fact_gas_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5dc998f326", "test.thorchain_models.dbt_constraints_primary_key_core__fact_gas_events_FACT_GAS_EVENTS_ID.5f0af93d3d", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_gas_events_FACT_GAS_EVENTS_ID.aeb85cf4be", "test.thorchain_models.negative_one_core__fact_gas_events_DIM_BLOCK_ID.7f0c9823d6", "test.thorchain_models.not_null_core__fact_gas_events_ASSET.eb1210fc06", "test.thorchain_models.not_null_core__fact_gas_events_ASSET_E8.345e0e92d6", "test.thorchain_models.not_null_core__fact_gas_events_BLOCK_TIMESTAMP.35593bcc96", "test.thorchain_models.not_null_core__fact_gas_events_RUNE_E8.3d0c674d04", "test.thorchain_models.not_null_core__fact_gas_events_TX_COUNT.85916d908d", "test.thorchain_models.unique_core__fact_gas_events_FACT_GAS_EVENTS_ID.eb8ed8966c"], "model.thorchain_models.core__fact_thorname_change_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1ed6c8a772", "test.thorchain_models.dbt_constraints_primary_key_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.1b4a17651b", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.a5f60f6196", "test.thorchain_models.negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID.140d803276", "test.thorchain_models.not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP.bbcdabc756", "test.thorchain_models.unique_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.4a216c267b"], "model.thorchain_models.core__fact_total_block_rewards": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2d656d9d6f", "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.448d03892d", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.fd258fb2a9", "test.thorchain_models.negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID.69732a2faa", "test.thorchain_models.not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP.b0622419e6", "test.thorchain_models.not_null_core__fact_total_block_rewards_REWARD_ENTITY.7590c6a78e", "test.thorchain_models.not_null_core__fact_total_block_rewards_RUNE_AMOUNT.e5de0ae4a8", "test.thorchain_models.tests__fact_total_block_rewards_block_id_assert_no_gaps", "test.thorchain_models.unique_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.35ddebe805"], "model.thorchain_models.core__fact_new_node_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4de363f5ea", "test.thorchain_models.dbt_constraints_primary_key_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.e62e52ebfb", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.a2f2d234e7", "test.thorchain_models.negative_one_core__fact_new_node_events_DIM_BLOCK_ID.c4f3cf3f10", "test.thorchain_models.not_null_core__fact_new_node_events_BLOCK_TIMESTAMP.9d461f9b74", "test.thorchain_models.not_null_core__fact_new_node_events_NODE_ADDRESS.3ffbf12d49", "test.thorchain_models.unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f4b183908a"], "model.thorchain_models.core__fact_pending_liquidity_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2429920cfb", "test.thorchain_models.dbt_constraints_primary_key_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.300a1fb7f2", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.fdbfe95915", "test.thorchain_models.negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID.3a16136f4d", "test.thorchain_models.not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP.b3a80571a0", "test.thorchain_models.unique_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.2b8ffd9a36"], "model.thorchain_models.core__fact_outbound_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.277332ae7e", "test.thorchain_models.dbt_constraints_primary_key_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.05c0f9f101", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.f603367883", "test.thorchain_models.negative_one_core__fact_outbound_events_DIM_BLOCK_ID.f5caf0aeb3", "test.thorchain_models.not_null_core__fact_outbound_events_BLOCK_TIMESTAMP.6055e0ddf8", "test.thorchain_models.unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.4c4c439442"], "model.thorchain_models.core__fact_stake_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.11c16f16f2", "test.thorchain_models.dbt_constraints_primary_key_core__fact_stake_events_FACT_STAKE_EVENTS_ID.3539c13338", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_stake_events_FACT_STAKE_EVENTS_ID.0464a58ac1", "test.thorchain_models.negative_one_core__fact_stake_events_DIM_BLOCK_ID.c03f6426e6", "test.thorchain_models.not_null_core__fact_stake_events_ASSET_E8.2157ab7e87", "test.thorchain_models.not_null_core__fact_stake_events_BLOCK_TIMESTAMP.bb23735cef", "test.thorchain_models.not_null_core__fact_stake_events_POOL_NAME.7488aed911", "test.thorchain_models.not_null_core__fact_stake_events_RUNE_E8.5294209fc4", "test.thorchain_models.not_null_core__fact_stake_events_STAKE_UNITS.ee869aff9b", "test.thorchain_models.not_null_core__fact_stake_events__ASSET_IN_RUNE_E8.042c769f0e", "test.thorchain_models.unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID.52dbe36799"], "model.thorchain_models.core__fact_daily_pool_stats": ["test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.33b4ea9b4d", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bf1dfcca44", "test.thorchain_models.not_null_core__fact_daily_pool_stats_DAY.79d19f9f33", "test.thorchain_models.tests__fact_daily_pool_stats__day_assert_no_gaps", "test.thorchain_models.unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.7da417db6b"], "model.thorchain_models.core__fact_daily_tvl": ["test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_tvl_FACT_DAILY_TVL_ID.474e025c51", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_tvl_FACT_DAILY_TVL_ID.d572a2372f", "test.thorchain_models.not_null_core__fact_daily_tvl_DAY.144013f00d", "test.thorchain_models.tests__fact_daily_tvl__day_assert_no_gaps", "test.thorchain_models.unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID.2c3cf602d7"], "model.thorchain_models.core__fact_rewards_event_entries": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7a477fe9e6", "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.ee30c464f8", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.84c78a0633", "test.thorchain_models.negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID.42b2a0096a", "test.thorchain_models.not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP.dca817feb6", "test.thorchain_models.unique_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.615ad18aed"], "model.thorchain_models.core__fact_slash_amounts": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.42a2e94cfe", "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.0fd61f628a", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.8b1a171425", "test.thorchain_models.negative_one_core__fact_slash_amounts_DIM_BLOCK_ID.6a02ad62ec", "test.thorchain_models.not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP.739ff9d923", "test.thorchain_models.unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.5c35006c34"], "model.thorchain_models.core__fact_total_value_locked": ["test.thorchain_models.dbt_constraints_primary_key_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.adc40e4d8b", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.430d9c1e3d", "test.thorchain_models.not_null_core__fact_total_value_locked_DAY.a3c0275ca5", "test.thorchain_models.tests__fact_total_value_locked_day_assert_no_gap", "test.thorchain_models.unique_core__fact_total_value_locked_DAY.61d685d8a4", "test.thorchain_models.unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.36125ed401"], "model.thorchain_models.core__fact_liquidity_actions": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cab10fa844", "test.thorchain_models.dbt_constraints_primary_key_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.b429402606", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.c7cd9bd890", "test.thorchain_models.negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID.e9c8df3ac6", "test.thorchain_models.not_null_core__fact_liquidity_actions_ASSET_AMOUNT.fb54932835", "test.thorchain_models.not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP.fcc1d0d04d", "test.thorchain_models.not_null_core__fact_liquidity_actions_LP_ACTION.0f14e22b29", "test.thorchain_models.not_null_core__fact_liquidity_actions_POOL_NAME.0b15bea905", "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT.62083241ea", "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD.240e9b87a5", "test.thorchain_models.not_null_core__fact_liquidity_actions_STAKE_UNITS.c67659b61d", "test.thorchain_models.unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.a5ce678100"], "model.thorchain_models.core__fact_asgard_fund_yggdrasil_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.131c30ab41", "test.thorchain_models.dbt_constraints_primary_key_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.a2b34c5de2", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.76d4b75985", "test.thorchain_models.negative_one_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID.514a6714b7", "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET.6b2b37418a", "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8.77ddd0d9cc", "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.953acd01a8", "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID.5a02945c6c", "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY.1122e02dde", "test.thorchain_models.unique_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.7dc09914ae"], "model.thorchain_models.core__fact_unstake_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c5326ea89a", "test.thorchain_models.dbt_constraints_primary_key_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.1a4354b9b5", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.a1b466628e", "test.thorchain_models.negative_one_core__fact_unstake_events_DIM_BLOCK_ID.b26729596b", "test.thorchain_models.not_null_core__fact_unstake_events_ASSET_E8.ec0bbb0520", "test.thorchain_models.not_null_core__fact_unstake_events_ASYMMETRY.a0a65d3a9f", "test.thorchain_models.not_null_core__fact_unstake_events_BASIS_POINTS.d404deb2ce", "test.thorchain_models.not_null_core__fact_unstake_events_BLOCKCHAIN.23ab48dc4e", "test.thorchain_models.not_null_core__fact_unstake_events_BLOCK_TIMESTAMP.8136e6be75", "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_ASSET_E8.0bb6810b7c", "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_RUNE_E8.9f4450744c", "test.thorchain_models.not_null_core__fact_unstake_events_FROM_ADDRESS.f36fc22ab1", "test.thorchain_models.not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8.9cbcefb510", "test.thorchain_models.not_null_core__fact_unstake_events_MEMO.f9a42c16dd", "test.thorchain_models.not_null_core__fact_unstake_events_POOL_NAME.636cd2e3c5", "test.thorchain_models.not_null_core__fact_unstake_events_STAKE_UNITS.7b40a80e8c", "test.thorchain_models.not_null_core__fact_unstake_events_TO_ADDRESS.e270afa919", "test.thorchain_models.not_null_core__fact_unstake_events_TX_ID.70178dcbe6", "test.thorchain_models.not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8.3b40309e5d", "test.thorchain_models.unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.0cc77688fa"], "model.thorchain_models.core__fact_set_mimir_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2", "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246", "test.thorchain_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336", "test.thorchain_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b", "test.thorchain_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794"], "model.thorchain_models.core__fact_bond_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1892d1fe78", "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_events_FACT_BOND_EVENTS_ID.00c70aabf8", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_events_FACT_BOND_EVENTS_ID.a2630ee98e", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_events_BLOCK_TIMESTAMP__day__4.a0c57cd338", "test.thorchain_models.negative_one_core__fact_bond_events_DIM_BLOCK_ID.b9ebee0e49", "test.thorchain_models.not_null_core__fact_bond_events_ASSET_E8.c772a5c1a6", "test.thorchain_models.not_null_core__fact_bond_events_BLOCKCHAIN.b6e16a540a", "test.thorchain_models.not_null_core__fact_bond_events_BLOCK_TIMESTAMP.34d4db86ea", "test.thorchain_models.not_null_core__fact_bond_events_E8.a6cea49857", "test.thorchain_models.not_null_core__fact_bond_events_FROM_ADDRESS.7bd47d477d", "test.thorchain_models.not_null_core__fact_bond_events_MEMO.072a694836", "test.thorchain_models.not_null_core__fact_bond_events_TO_ADDRESS.754c40a736", "test.thorchain_models.not_null_core__fact_bond_events_TX_ID.7cfaf64395", "test.thorchain_models.not_null_core__fact_bond_events_bond_type.a7351dce4e", "test.thorchain_models.unique_core__fact_bond_events_FACT_BOND_EVENTS_ID.78891b0a95"], "model.thorchain_models.core__fact_transfers": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42", "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be", "test.thorchain_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3", "test.thorchain_models.not_null_core__fact_transfers_ASSET.77d44cdd84", "test.thorchain_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd", "test.thorchain_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a", "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT.7e2f8aa5f7", "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT_USD.ff8abbcf19", "test.thorchain_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70", "test.thorchain_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c"], "model.thorchain_models.core__fact_pool_balance_change_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.029949114a", "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.7fe3cc4fa9", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.702823e109", "test.thorchain_models.negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID.a1549e5fe2", "test.thorchain_models.not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP.1f2c903cd3", "test.thorchain_models.unique_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.9782ed2131"], "model.thorchain_models.core__fact_rewards_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dd0a168223", "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.9e85913629", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.d93f22f0e1", "test.thorchain_models.negative_one_core__fact_rewards_events_DIM_BLOCK_ID.b4f9cfff33", "test.thorchain_models.not_null_core__fact_rewards_events_BLOCK_TIMESTAMP.03cee88918", "test.thorchain_models.unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.ee7cbe3f90"], "model.thorchain_models.core__fact_errata_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2036706b9e", "test.thorchain_models.dbt_constraints_primary_key_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.e707c17e80", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.41ac1e170c", "test.thorchain_models.negative_one_core__fact_errata_events_DIM_BLOCK_ID.1e68f739d7", "test.thorchain_models.not_null_core__fact_errata_events_ASSET.b77634e45d", "test.thorchain_models.not_null_core__fact_errata_events_ASSET_E8.9b5c938453", "test.thorchain_models.not_null_core__fact_errata_events_BLOCK_TIMESTAMP.c97100b28e", "test.thorchain_models.not_null_core__fact_errata_events_IN_TX.477080ebba", "test.thorchain_models.not_null_core__fact_errata_events_RUNE_E8.54a56fbeaf", "test.thorchain_models.unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.ff84352521"], "model.thorchain_models.core__fact_add_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38dcabe04d", "test.thorchain_models.dbt_constraints_primary_key_core__fact_add_events_FACT_ADD_EVENTS_ID.7afacbf523", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_add_events_FACT_ADD_EVENTS_ID.de606e1315", "test.thorchain_models.negative_one_core__fact_add_events_DIM_BLOCK_ID.bb11c4e182", "test.thorchain_models.not_null_core__fact_add_events_ASSET_E8.9f929cee48", "test.thorchain_models.not_null_core__fact_add_events_BLOCKCHAIN.7481d9c56f", "test.thorchain_models.not_null_core__fact_add_events_BLOCK_TIMESTAMP.317eaa7011", "test.thorchain_models.not_null_core__fact_add_events_FROM_ADDRESS.63f6b7ffe8", "test.thorchain_models.not_null_core__fact_add_events_MEMO.addbd52004", "test.thorchain_models.not_null_core__fact_add_events_POOL_NAME.b5011ead86", "test.thorchain_models.not_null_core__fact_add_events_RUNE_E8.aaf3acc2cd", "test.thorchain_models.not_null_core__fact_add_events_TO_ADDRESS.f50de208a1", "test.thorchain_models.unique_core__fact_add_events_FACT_ADD_EVENTS_ID.8d1a660963"], "model.thorchain_models.core__fact_transfer_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61", "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336", "test.thorchain_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5", "test.thorchain_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c", "test.thorchain_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3", "test.thorchain_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318", "test.thorchain_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935", "test.thorchain_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988", "test.thorchain_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8"], "model.thorchain_models.core__fact_daily_earnings": ["test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.3813cadda2", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.02c2019ac8", "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_daily_earnings_DAY__day__1.739a7d6fc2", "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS.32f4ba94aa", "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD.620692e3c8", "test.thorchain_models.not_null_core__fact_daily_earnings_DAY.0056ff032e", "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES.31b30b49fc", "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD.06c8d3544c", "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS.802ba2933d", "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD.d78b69a4e2", "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES.61a2f7741f", "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD.f6e86bf715", "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS.3465760a09", "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD.13a1973622", "test.thorchain_models.tests__fact_daily_earnings__day_assert_no_gaps", "test.thorchain_models.unique_core__fact_daily_earnings_DAY.d8c8059f12", "test.thorchain_models.unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.a33aeba570"], "model.thorchain_models.core__fact_fee_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.524d327517", "test.thorchain_models.dbt_constraints_primary_key_core__fact_fee_events_FACT_FEE_EVENTS_ID.11388d90d4", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_fee_events_FACT_FEE_EVENTS_ID.09084d41ad", "test.thorchain_models.negative_one_core__fact_fee_events_DIM_BLOCK_ID.6bea825589", "test.thorchain_models.not_null_core__fact_fee_events_ASSET.07dd767dd5", "test.thorchain_models.not_null_core__fact_fee_events_ASSET_E8.6d72b49c41", "test.thorchain_models.not_null_core__fact_fee_events_BLOCK_TIMESTAMP.39a1b9fbcb", "test.thorchain_models.not_null_core__fact_fee_events_POOL_DEDUCT.083ce34ede", "test.thorchain_models.not_null_core__fact_fee_events_TX_ID.363b10abc6", "test.thorchain_models.unique_core__fact_fee_events_FACT_FEE_EVENTS_ID.af07c861bb"], "model.thorchain_models.core__fact_set_node_keys_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fd9fdc9f41", "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5ac2675faa", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.34835f54a3", "test.thorchain_models.negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID.639cd7330f", "test.thorchain_models.not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP.41f9b1a5da", "test.thorchain_models.unique_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.dda9f81b60"], "model.thorchain_models.core__fact_block_pool_depths": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.14b49fcf71", "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.dfe5457eaf", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.9dd9587001", "test.thorchain_models.negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID.f4fc2ff338", "test.thorchain_models.not_null_core__fact_block_pool_depths_ASSET_E8.0dc043e0cd", "test.thorchain_models.not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP.3ea533bce0", "test.thorchain_models.not_null_core__fact_block_pool_depths_POOL_NAME.5d37c16f5d", "test.thorchain_models.not_null_core__fact_block_pool_depths_RUNE_E8.3234bc76fa", "test.thorchain_models.not_null_core__fact_block_pool_depths_SYNTH_E8.ff0f94fbc2", "test.thorchain_models.tests__fact_block_pool_depths__block_id_assert_no_gaps", "test.thorchain_models.unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.94c0227c24"], "model.thorchain_models.core__fact_prices": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38e7c4700c", "test.thorchain_models.dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID.fc15617ea8", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_prices_FACT_PRICES_ID.435e0f2c3d", "test.thorchain_models.negative_one_core__fact_prices_DIM_BLOCK_ID.d29550f238", "test.thorchain_models.not_null_core__fact_prices_BLOCK_TIMESTAMP.441625422b", "test.thorchain_models.tests__fact_prices__block_id-assert_no_gaps", "test.thorchain_models.unique_core__fact_prices_FACT_PRICES_ID.003cb27459"], "model.thorchain_models.core__fact_set_ip_address_events": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc626285f1", "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.cb9aaa02f0", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.94cd2b4126", "test.thorchain_models.negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID.2cce9fb3dd", "test.thorchain_models.not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP.5ba0c58a75", "test.thorchain_models.unique_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2a2aa5cfae"], "model.thorchain_models.core__fact_pool_block_fees": ["test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.a85fc1c290", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.8f8165383d", "test.thorchain_models.not_null_core__fact_pool_block_fees_DAY.b3a2546784", "test.thorchain_models.tests__fact_pool_block_fees__day_assert_no_gap", "test.thorchain_models.unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.4771f271d5"], "model.thorchain_models.core__fact_slash_points": ["test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.eb3f0e7ae8", "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_points_FACT_SLASH_POINTS_ID.c20584f187", "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_points_FACT_SLASH_POINTS_ID.33a34df512", "test.thorchain_models.negative_one_core__fact_slash_points_DIM_BLOCK_ID.e5523fb231", "test.thorchain_models.not_null_core__fact_slash_points_BLOCK_TIMESTAMP.a7b4964341", "test.thorchain_models.unique_core__fact_slash_points_FACT_SLASH_POINTS_ID.f7b5ab10d6"], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_events_FACT_POOL_EVENTS_ID.05fb28a742": [], "test.thorchain_models.unique_core__fact_pool_events_FACT_POOL_EVENTS_ID.a1d33c7d0a": [], "test.thorchain_models.not_null_core__fact_pool_events_BLOCK_TIMESTAMP.05cfb58d49": [], "test.thorchain_models.negative_one_core__fact_pool_events_DIM_BLOCK_ID.229c8d7f20": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_events_FACT_POOL_EVENTS_ID.13c1ea183b": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0340867efb": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_refund_events_FACT_REFUND_EVENTS_ID.30b6902b47": [], "test.thorchain_models.unique_core__fact_refund_events_FACT_REFUND_EVENTS_ID.6f93d8d08e": [], "test.thorchain_models.not_null_core__fact_refund_events_BLOCK_TIMESTAMP.8b9509ce39": [], "test.thorchain_models.negative_one_core__fact_refund_events_DIM_BLOCK_ID.4a28b5bc7c": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_refund_events_FACT_REFUND_EVENTS_ID.81e4335507": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_refund_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.0233f89047": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.762237682c": [], "test.thorchain_models.unique_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.20dbc5312c": [], "test.thorchain_models.not_null_core__fact_inactive_vault_events_BLOCK_TIMESTAMP.2da1a512b0": [], "test.thorchain_models.negative_one_core__fact_inactive_vault_events_DIM_BLOCK_ID.83076c6521": [], "test.thorchain_models.not_null_core__fact_inactive_vault_events_ADD_ASGARD_ADDRESS.6ee8b1c1ac": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_inactive_vault_events_FACT_INACTIVE_VAULT_EVENTS_ID.a765dbbadc": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_inactive_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fde1b47635": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.2996130685": [], "test.thorchain_models.unique_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.ba09f86108": [], "test.thorchain_models.not_null_core__fact_set_version_events_BLOCK_TIMESTAMP.8e51f47ffb": [], "test.thorchain_models.negative_one_core__fact_set_version_events_DIM_BLOCK_ID.52ed0c5ef6": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_version_events_FACT_SET_VERSION_EVENTS_ID.4cc0e57996": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_version_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4f6df8b36a": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__dim_block_DIM_BLOCK_ID.3b69086dc7": [], "test.thorchain_models.not_null_core__dim_block_BLOCK_ID.4093a445bc": [], "test.thorchain_models.not_null_core__dim_block_BLOCK_TIMESTAMP.0e822266b8": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__dim_block_BLOCK_TIMESTAMP__day__1.412ac293c7": [], "test.thorchain_models.not_null_core__dim_block_BLOCK_DATE.fcae0dfd62": [], "test.thorchain_models.not_null_core__dim_block_BLOCK_HOUR.4bdf258b00": [], "test.thorchain_models.not_null_core__dim_block_BLOCK_WEEK.bd31abb003": [], "test.thorchain_models.not_null_core__dim_block_TIMESTAMP.2e8fff01ed": [], "test.thorchain_models.not_null_core__dim_block_HASH.b08299a937": [], "test.thorchain_models.dbt_constraints_primary_key_core__dim_block_DIM_BLOCK_ID.6c2c5b98b3": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_swaps_FACT_SWAPS_ID.87b06ee713": [], "test.thorchain_models.unique_core__fact_swaps_FACT_SWAPS_ID.7963ad36b2": [], "test.thorchain_models.not_null_core__fact_swaps_BLOCK_TIMESTAMP.1623c6eef8": [], "test.thorchain_models.negative_one_core__fact_swaps_DIM_BLOCK_ID.396aa69d74": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_swaps_FACT_SWAPS_ID.a2d4e0d78c": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_swaps_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.9c0cfcb6fa": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.ec777b98b4": [], "test.thorchain_models.unique_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.b28d264159": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_statistics_FACT_POOL_BLOCK_STATISTICS_ID.8b6f112393": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.bbca05111b": [], "test.thorchain_models.unique_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.8735e54613": [], "test.thorchain_models.not_null_core__fact_bond_actions_BLOCK_TIMESTAMP.e429436031": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_actions_BLOCK_TIMESTAMP__day__4.6de8191c45": [], "test.thorchain_models.negative_one_core__fact_bond_actions_DIM_BLOCK_ID.62a90a6040": [], "test.thorchain_models.not_null_core__fact_bond_actions_TX_ID.479e4a030a": [], "test.thorchain_models.not_null_core__fact_bond_actions_BLOCKCHAIN.173b70dd6d": [], "test.thorchain_models.not_null_core__fact_bond_actions_FROM_ADDRESS.f83dcb3484": [], "test.thorchain_models.not_null_core__fact_bond_actions_TO_ADDRESS.609662b36d": [], "test.thorchain_models.not_null_core__fact_bond_actions_bond_type.df2a3b5b16": [], "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_AMOUNT.1b3ee2f2e2": [], "test.thorchain_models.not_null_core__fact_bond_actions_ASSET_USD.698118cb1c": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_actions_FACT_BOND_ACTIONS_ID.f8b3537e11": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.01d3250232": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.299741a909": [], "test.thorchain_models.unique_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.93082c83ed": [], "test.thorchain_models.not_null_core__fact_switch_events_BLOCK_TIMESTAMP.0437ab72e5": [], "test.thorchain_models.negative_one_core__fact_switch_events_DIM_BLOCK_ID.960a6c0dea": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_switch_events_FACT_SWITCH_EVENTS_ID.3cd83ce9a7": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_switch_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.48c70568b9": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a226b8835b": [], "test.thorchain_models.unique_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.a9bbb3dffc": [], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_BLOCK_TIMESTAMP.b70f758672": [], "test.thorchain_models.negative_one_core__fact_validator_request_leave_events_DIM_BLOCK_ID.1c5ec06d3b": [], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_TX_ID.ee988a79e0": [], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_FROM_ADDRESS.51d60a71ad": [], "test.thorchain_models.not_null_core__fact_validator_request_leave_events_NODE_ADDRESS.62d399b92d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_validator_request_leave_events_FACT_VALIDATOR_REQUEST_LEAVE_EVENTS_ID.f069e268df": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_validator_request_leave_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5f659e000c": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.76e23118ec": [], "test.thorchain_models.unique_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.38bd20da50": [], "test.thorchain_models.not_null_core__fact_block_rewards_DAY.f3adaa7c0d": [], "test.thorchain_models.unique_core__fact_block_rewards_DAY.0ccd5bbf19": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_block_rewards_DAY__day__1.17002b354c": [], "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_FEE.98923b7b52": [], "test.thorchain_models.not_null_core__fact_block_rewards_BLOCK_REWARDS.5895cca37e": [], "test.thorchain_models.not_null_core__fact_block_rewards_EARNINGS.af56926f59": [], "test.thorchain_models.not_null_core__fact_block_rewards_BONDING_EARNINGS.6b00d9f87b": [], "test.thorchain_models.not_null_core__fact_block_rewards_LIQUIDITY_EARNINGS.470f463bc6": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_rewards_FACT_BLOCK_REWARDS_ID.e333e2b210": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.e63145c998": [], "test.thorchain_models.unique_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.44d86e956f": [], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_BLOCK_TIMESTAMP.d3ea501c1e": [], "test.thorchain_models.negative_one_core__fact_update_node_account_status_events_DIM_BLOCK_ID.1b8be0e620": [], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_FORMER_STATUS.542955010b": [], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_CURRENT_STATUS.56817a94d4": [], "test.thorchain_models.not_null_core__fact_update_node_account_status_events_NODE_ADDRESS.d803773e0e": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_update_node_account_status_events_FACT_UPDATE_NODE_ACCOUNT_STATUS_EVENTS_ID.d46b96f1c2": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_update_node_account_status_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.8f291f6f39": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.3d763daf51": [], "test.thorchain_models.unique_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.79697cc3a3": [], "test.thorchain_models.not_null_core__fact_active_vault_events_BLOCK_TIMESTAMP.1d3fbb0a3b": [], "test.thorchain_models.negative_one_core__fact_active_vault_events_DIM_BLOCK_ID.722702a8fc": [], "test.thorchain_models.not_null_core__fact_active_vault_events_ADD_ASGARD_ADDR.125c40e8d2": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_active_vault_events_FACT_ACTIVE_VAULT_EVENTS_ID.e8289f48d1": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_active_vault_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.b9a88a56b1": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_upgrades_FACT_UPGRADES_ID.9298b1c97b": [], "test.thorchain_models.unique_core__fact_upgrades_FACT_UPGRADES_ID.a36315e988": [], "test.thorchain_models.not_null_core__fact_upgrades_BLOCK_TIMESTAMP.f3d7bb5e1b": [], "test.thorchain_models.not_null_core__fact_upgrades_TX_ID.88449dfc60": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_upgrades_FACT_UPGRADES_ID.2a81ce04d0": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_upgrades_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a7ce140c43": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.89e5ab7b3f": [], "test.thorchain_models.unique_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.624eb36d01": [], "test.thorchain_models.not_null_core__fact_pool_block_balances_BLOCK_TIMESTAMP.9d11fe9f1e": [], "test.thorchain_models.negative_one_core__fact_pool_block_balances_DIM_BLOCK_ID.f1f87272cb": [], "test.thorchain_models.not_null_core__fact_pool_block_balances_POOL_NAME.7349f760b3": [], "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT.6437831137": [], "test.thorchain_models.not_null_core__fact_pool_block_balances_RUNE_AMOUNT_USD.646a684c15": [], "test.thorchain_models.not_null_core__fact_pool_block_balances_ASSET_AMOUNT.8e6a6db124": [], "test.thorchain_models.not_null_core__fact_pool_block_balances_SYNTH_AMOUNT.26b33d8c1b": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_balances_FACT_POOL_BLOCK_BALANCES_ID.e0fa300f8a": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_block_balances_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.a4580f364c": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.c50105a5a2": [], "test.thorchain_models.unique_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.2278508729": [], "test.thorchain_models.not_null_core__fact_reserve_events_BLOCK_TIMESTAMP.9a529f13da": [], "test.thorchain_models.negative_one_core__fact_reserve_events_DIM_BLOCK_ID.2dcdfcd58c": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_reserve_events_FACT_RESERVE_EVENTS_ID.9f61e9de79": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_reserve_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.becfbe7562": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_gas_events_FACT_GAS_EVENTS_ID.aeb85cf4be": [], "test.thorchain_models.unique_core__fact_gas_events_FACT_GAS_EVENTS_ID.eb8ed8966c": [], "test.thorchain_models.not_null_core__fact_gas_events_BLOCK_TIMESTAMP.35593bcc96": [], "test.thorchain_models.negative_one_core__fact_gas_events_DIM_BLOCK_ID.7f0c9823d6": [], "test.thorchain_models.not_null_core__fact_gas_events_ASSET.eb1210fc06": [], "test.thorchain_models.not_null_core__fact_gas_events_ASSET_E8.345e0e92d6": [], "test.thorchain_models.not_null_core__fact_gas_events_RUNE_E8.3d0c674d04": [], "test.thorchain_models.not_null_core__fact_gas_events_TX_COUNT.85916d908d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_gas_events_FACT_GAS_EVENTS_ID.5f0af93d3d": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_gas_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.5dc998f326": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.a5f60f6196": [], "test.thorchain_models.unique_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.4a216c267b": [], "test.thorchain_models.not_null_core__fact_thorname_change_events_BLOCK_TIMESTAMP.bbcdabc756": [], "test.thorchain_models.negative_one_core__fact_thorname_change_events_DIM_BLOCK_ID.140d803276": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_thorname_change_events_FACT_THORNAME_CHANGE_EVENTS_ID.1b4a17651b": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_thorname_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1ed6c8a772": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.fd258fb2a9": [], "test.thorchain_models.unique_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.35ddebe805": [], "test.thorchain_models.not_null_core__fact_total_block_rewards_BLOCK_TIMESTAMP.b0622419e6": [], "test.thorchain_models.negative_one_core__fact_total_block_rewards_DIM_BLOCK_ID.69732a2faa": [], "test.thorchain_models.not_null_core__fact_total_block_rewards_REWARD_ENTITY.7590c6a78e": [], "test.thorchain_models.not_null_core__fact_total_block_rewards_RUNE_AMOUNT.e5de0ae4a8": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_block_rewards_FACT_TOTAL_BLOCK_REWARDS_ID.448d03892d": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_total_block_rewards_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2d656d9d6f": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.a2f2d234e7": [], "test.thorchain_models.unique_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.f4b183908a": [], "test.thorchain_models.not_null_core__fact_new_node_events_BLOCK_TIMESTAMP.9d461f9b74": [], "test.thorchain_models.negative_one_core__fact_new_node_events_DIM_BLOCK_ID.c4f3cf3f10": [], "test.thorchain_models.not_null_core__fact_new_node_events_NODE_ADDRESS.3ffbf12d49": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_new_node_events_FACT_NEW_NODE_EVENTS_ID.e62e52ebfb": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_new_node_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.4de363f5ea": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.fdbfe95915": [], "test.thorchain_models.unique_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.2b8ffd9a36": [], "test.thorchain_models.not_null_core__fact_pending_liquidity_events_BLOCK_TIMESTAMP.b3a80571a0": [], "test.thorchain_models.negative_one_core__fact_pending_liquidity_events_DIM_BLOCK_ID.3a16136f4d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pending_liquidity_events_FACT_PENDING_LIQUIDITY_EVENTS_ID.300a1fb7f2": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pending_liquidity_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2429920cfb": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.f603367883": [], "test.thorchain_models.unique_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.4c4c439442": [], "test.thorchain_models.not_null_core__fact_outbound_events_BLOCK_TIMESTAMP.6055e0ddf8": [], "test.thorchain_models.negative_one_core__fact_outbound_events_DIM_BLOCK_ID.f5caf0aeb3": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_outbound_events_FACT_OUTBOUND_EVENTS_ID.05c0f9f101": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_outbound_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.277332ae7e": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_stake_events_FACT_STAKE_EVENTS_ID.0464a58ac1": [], "test.thorchain_models.unique_core__fact_stake_events_FACT_STAKE_EVENTS_ID.52dbe36799": [], "test.thorchain_models.not_null_core__fact_stake_events_BLOCK_TIMESTAMP.bb23735cef": [], "test.thorchain_models.negative_one_core__fact_stake_events_DIM_BLOCK_ID.c03f6426e6": [], "test.thorchain_models.not_null_core__fact_stake_events_POOL_NAME.7488aed911": [], "test.thorchain_models.not_null_core__fact_stake_events_ASSET_E8.2157ab7e87": [], "test.thorchain_models.not_null_core__fact_stake_events_STAKE_UNITS.ee869aff9b": [], "test.thorchain_models.not_null_core__fact_stake_events_RUNE_E8.5294209fc4": [], "test.thorchain_models.not_null_core__fact_stake_events__ASSET_IN_RUNE_E8.042c769f0e": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_stake_events_FACT_STAKE_EVENTS_ID.3539c13338": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_stake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.11c16f16f2": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.bf1dfcca44": [], "test.thorchain_models.unique_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.7da417db6b": [], "test.thorchain_models.not_null_core__fact_daily_pool_stats_DAY.79d19f9f33": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_pool_stats_FACT_DAILY_POOL_STATS_ID.33b4ea9b4d": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_tvl_FACT_DAILY_TVL_ID.d572a2372f": [], "test.thorchain_models.unique_core__fact_daily_tvl_FACT_DAILY_TVL_ID.2c3cf602d7": [], "test.thorchain_models.not_null_core__fact_daily_tvl_DAY.144013f00d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_tvl_FACT_DAILY_TVL_ID.474e025c51": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.84c78a0633": [], "test.thorchain_models.unique_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.615ad18aed": [], "test.thorchain_models.not_null_core__fact_rewards_event_entries_BLOCK_TIMESTAMP.dca817feb6": [], "test.thorchain_models.negative_one_core__fact_rewards_event_entries_DIM_BLOCK_ID.42b2a0096a": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_event_entries_FACT_REWARDS_EVENT_ENTRIES_ID.ee30c464f8": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_event_entries_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.7a477fe9e6": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.8b1a171425": [], "test.thorchain_models.unique_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.5c35006c34": [], "test.thorchain_models.not_null_core__fact_slash_amounts_BLOCK_TIMESTAMP.739ff9d923": [], "test.thorchain_models.negative_one_core__fact_slash_amounts_DIM_BLOCK_ID.6a02ad62ec": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_amounts_FACT_SLASH_AMOUNTS_ID.0fd61f628a": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_amounts_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.42a2e94cfe": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.430d9c1e3d": [], "test.thorchain_models.unique_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.36125ed401": [], "test.thorchain_models.not_null_core__fact_total_value_locked_DAY.a3c0275ca5": [], "test.thorchain_models.unique_core__fact_total_value_locked_DAY.61d685d8a4": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_total_value_locked_FACT_TOTAL_VALUE_LOCKED_ID.adc40e4d8b": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.c7cd9bd890": [], "test.thorchain_models.unique_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.a5ce678100": [], "test.thorchain_models.not_null_core__fact_liquidity_actions_BLOCK_TIMESTAMP.fcc1d0d04d": [], "test.thorchain_models.negative_one_core__fact_liquidity_actions_DIM_BLOCK_ID.e9c8df3ac6": [], "test.thorchain_models.not_null_core__fact_liquidity_actions_LP_ACTION.0f14e22b29": [], "test.thorchain_models.not_null_core__fact_liquidity_actions_POOL_NAME.0b15bea905": [], "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT.62083241ea": [], "test.thorchain_models.not_null_core__fact_liquidity_actions_RUNE_AMOUNT_USD.240e9b87a5": [], "test.thorchain_models.not_null_core__fact_liquidity_actions_ASSET_AMOUNT.fb54932835": [], "test.thorchain_models.not_null_core__fact_liquidity_actions_STAKE_UNITS.c67659b61d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_liquidity_actions_FACT_LIQUIDITY_ACTIONS_ID.b429402606": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_liquidity_actions_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cab10fa844": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.76d4b75985": [], "test.thorchain_models.unique_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.7dc09914ae": [], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_BLOCK_TIMESTAMP.953acd01a8": [], "test.thorchain_models.negative_one_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID.514a6714b7": [], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET.6b2b37418a": [], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_TX_ID.5a02945c6c": [], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_VAULT_KEY.1122e02dde": [], "test.thorchain_models.not_null_core__fact_asgard_fund_yggdrasil_events_ASSET_E8.77ddd0d9cc": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_asgard_fund_yggdrasil_events_FACT_ASGARD_FUND_YGGDRASIL_EVENTS_ID.a2b34c5de2": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_asgard_fund_yggdrasil_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.131c30ab41": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.a1b466628e": [], "test.thorchain_models.unique_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.0cc77688fa": [], "test.thorchain_models.not_null_core__fact_unstake_events_BLOCK_TIMESTAMP.8136e6be75": [], "test.thorchain_models.negative_one_core__fact_unstake_events_DIM_BLOCK_ID.b26729596b": [], "test.thorchain_models.not_null_core__fact_unstake_events_TX_ID.70178dcbe6": [], "test.thorchain_models.not_null_core__fact_unstake_events_BLOCKCHAIN.23ab48dc4e": [], "test.thorchain_models.not_null_core__fact_unstake_events_FROM_ADDRESS.f36fc22ab1": [], "test.thorchain_models.not_null_core__fact_unstake_events_TO_ADDRESS.e270afa919": [], "test.thorchain_models.not_null_core__fact_unstake_events_ASSET_E8.ec0bbb0520": [], "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_ASSET_E8.0bb6810b7c": [], "test.thorchain_models.not_null_core__fact_unstake_events_EMIT_RUNE_E8.9f4450744c": [], "test.thorchain_models.not_null_core__fact_unstake_events_MEMO.f9a42c16dd": [], "test.thorchain_models.not_null_core__fact_unstake_events_POOL_NAME.636cd2e3c5": [], "test.thorchain_models.not_null_core__fact_unstake_events_STAKE_UNITS.7b40a80e8c": [], "test.thorchain_models.not_null_core__fact_unstake_events_BASIS_POINTS.d404deb2ce": [], "test.thorchain_models.not_null_core__fact_unstake_events_ASYMMETRY.a0a65d3a9f": [], "test.thorchain_models.not_null_core__fact_unstake_events_IMP_LOSS_PROTECTION_E8.9cbcefb510": [], "test.thorchain_models.not_null_core__fact_unstake_events__EMIT_ASSET_IN_RUNE_E8.3b40309e5d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_unstake_events_FACT_UNSTAKE_EVENTS_ID.1a4354b9b5": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_unstake_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.c5326ea89a": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.ae85001246": [], "test.thorchain_models.unique_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.449f05e794": [], "test.thorchain_models.not_null_core__fact_set_mimir_events_BLOCK_TIMESTAMP.5ba3385f5b": [], "test.thorchain_models.negative_one_core__fact_set_mimir_events_DIM_BLOCK_ID.f97f1b5336": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_mimir_events_FACT_SET_MIMIR_EVENTS_ID.9f1768474c": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_mimir_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.f0eb017ef2": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_bond_events_FACT_BOND_EVENTS_ID.a2630ee98e": [], "test.thorchain_models.unique_core__fact_bond_events_FACT_BOND_EVENTS_ID.78891b0a95": [], "test.thorchain_models.not_null_core__fact_bond_events_BLOCK_TIMESTAMP.34d4db86ea": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_bond_events_BLOCK_TIMESTAMP__day__4.a0c57cd338": [], "test.thorchain_models.negative_one_core__fact_bond_events_DIM_BLOCK_ID.b9ebee0e49": [], "test.thorchain_models.not_null_core__fact_bond_events_TX_ID.7cfaf64395": [], "test.thorchain_models.not_null_core__fact_bond_events_BLOCKCHAIN.b6e16a540a": [], "test.thorchain_models.not_null_core__fact_bond_events_FROM_ADDRESS.7bd47d477d": [], "test.thorchain_models.not_null_core__fact_bond_events_TO_ADDRESS.754c40a736": [], "test.thorchain_models.not_null_core__fact_bond_events_ASSET_E8.c772a5c1a6": [], "test.thorchain_models.not_null_core__fact_bond_events_MEMO.072a694836": [], "test.thorchain_models.not_null_core__fact_bond_events_bond_type.a7351dce4e": [], "test.thorchain_models.not_null_core__fact_bond_events_E8.a6cea49857": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_bond_events_FACT_BOND_EVENTS_ID.00c70aabf8": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_bond_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.1892d1fe78": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfers_FACT_TRANSFERS_ID.7e9e26b3be": [], "test.thorchain_models.unique_core__fact_transfers_FACT_TRANSFERS_ID.385cd38e6c": [], "test.thorchain_models.not_null_core__fact_transfers_BLOCK_TIMESTAMP.bdf9b015dd": [], "test.thorchain_models.negative_one_core__fact_transfers_DIM_BLOCK_ID.09484decc3": [], "test.thorchain_models.not_null_core__fact_transfers_FROM_ADDRESS.b75e3a345a": [], "test.thorchain_models.not_null_core__fact_transfers_TO_ADDRESS.b8db4a5a70": [], "test.thorchain_models.not_null_core__fact_transfers_ASSET.77d44cdd84": [], "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT.7e2f8aa5f7": [], "test.thorchain_models.not_null_core__fact_transfers_RUNE_AMOUNT_USD.ff8abbcf19": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfers_FACT_TRANSFERS_ID.0e37c8cbc3": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfers_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.e0e628ae42": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.702823e109": [], "test.thorchain_models.unique_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.9782ed2131": [], "test.thorchain_models.not_null_core__fact_pool_balance_change_events_BLOCK_TIMESTAMP.1f2c903cd3": [], "test.thorchain_models.negative_one_core__fact_pool_balance_change_events_DIM_BLOCK_ID.a1549e5fe2": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_balance_change_events_FACT_POOL_BALANCE_CHANGE_EVENTS_ID.7fe3cc4fa9": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_pool_balance_change_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.029949114a": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.d93f22f0e1": [], "test.thorchain_models.unique_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.ee7cbe3f90": [], "test.thorchain_models.not_null_core__fact_rewards_events_BLOCK_TIMESTAMP.03cee88918": [], "test.thorchain_models.negative_one_core__fact_rewards_events_DIM_BLOCK_ID.b4f9cfff33": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_rewards_events_FACT_REWARDS_EVENTS_ID.9e85913629": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_rewards_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.dd0a168223": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.41ac1e170c": [], "test.thorchain_models.unique_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.ff84352521": [], "test.thorchain_models.not_null_core__fact_errata_events_BLOCK_TIMESTAMP.c97100b28e": [], "test.thorchain_models.negative_one_core__fact_errata_events_DIM_BLOCK_ID.1e68f739d7": [], "test.thorchain_models.not_null_core__fact_errata_events_ASSET_E8.9b5c938453": [], "test.thorchain_models.not_null_core__fact_errata_events_RUNE_E8.54a56fbeaf": [], "test.thorchain_models.not_null_core__fact_errata_events_IN_TX.477080ebba": [], "test.thorchain_models.not_null_core__fact_errata_events_ASSET.b77634e45d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_errata_events_FACT_ERRATA_EVENTS_ID.e707c17e80": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_errata_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.2036706b9e": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_add_events_FACT_ADD_EVENTS_ID.de606e1315": [], "test.thorchain_models.unique_core__fact_add_events_FACT_ADD_EVENTS_ID.8d1a660963": [], "test.thorchain_models.not_null_core__fact_add_events_BLOCK_TIMESTAMP.317eaa7011": [], "test.thorchain_models.negative_one_core__fact_add_events_DIM_BLOCK_ID.bb11c4e182": [], "test.thorchain_models.not_null_core__fact_add_events_RUNE_E8.aaf3acc2cd": [], "test.thorchain_models.not_null_core__fact_add_events_BLOCKCHAIN.7481d9c56f": [], "test.thorchain_models.not_null_core__fact_add_events_ASSET_E8.9f929cee48": [], "test.thorchain_models.not_null_core__fact_add_events_POOL_NAME.b5011ead86": [], "test.thorchain_models.not_null_core__fact_add_events_MEMO.addbd52004": [], "test.thorchain_models.not_null_core__fact_add_events_TO_ADDRESS.f50de208a1": [], "test.thorchain_models.not_null_core__fact_add_events_FROM_ADDRESS.63f6b7ffe8": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_add_events_FACT_ADD_EVENTS_ID.7afacbf523": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_add_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38dcabe04d": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b834b16336": [], "test.thorchain_models.unique_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.b97c8780e8": [], "test.thorchain_models.not_null_core__fact_transfer_events_BLOCK_TIMESTAMP.307906b318": [], "test.thorchain_models.negative_one_core__fact_transfer_events_DIM_BLOCK_ID.2e128858c5": [], "test.thorchain_models.not_null_core__fact_transfer_events_FROM_ADDRESS.2e1a952935": [], "test.thorchain_models.not_null_core__fact_transfer_events_TO_ADDRESS.14f29de988": [], "test.thorchain_models.not_null_core__fact_transfer_events_ASSET.bacb47e2e3": [], "test.thorchain_models.not_null_core__fact_transfer_events_AMOUNT_E8.4fe1565b1c": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_transfer_events_FACT_TRANSFER_EVENTS_ID.2d391ee070": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_transfer_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.3478d94d61": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.02c2019ac8": [], "test.thorchain_models.unique_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.a33aeba570": [], "test.thorchain_models.not_null_core__fact_daily_earnings_DAY.0056ff032e": [], "test.thorchain_models.unique_core__fact_daily_earnings_DAY.d8c8059f12": [], "test.thorchain_models.dbt_expectations_expect_row_values_to_have_recent_data_core__fact_daily_earnings_DAY__day__1.739a7d6fc2": [], "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES.61a2f7741f": [], "test.thorchain_models.not_null_core__fact_daily_earnings_LIQUIDITY_FEES_USD.f6e86bf715": [], "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS.32f4ba94aa": [], "test.thorchain_models.not_null_core__fact_daily_earnings_BLOCK_REWARDS_USD.620692e3c8": [], "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS.3465760a09": [], "test.thorchain_models.not_null_core__fact_daily_earnings_TOTAL_EARNINGS_USD.13a1973622": [], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES.31b30b49fc": [], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_NODES_USD.06c8d3544c": [], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS.802ba2933d": [], "test.thorchain_models.not_null_core__fact_daily_earnings_EARNINGS_TO_POOLS_USD.d78b69a4e2": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_daily_earnings_FACT_DAILY_EARNINGS_ID.3813cadda2": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_fee_events_FACT_FEE_EVENTS_ID.09084d41ad": [], "test.thorchain_models.unique_core__fact_fee_events_FACT_FEE_EVENTS_ID.af07c861bb": [], "test.thorchain_models.not_null_core__fact_fee_events_BLOCK_TIMESTAMP.39a1b9fbcb": [], "test.thorchain_models.negative_one_core__fact_fee_events_DIM_BLOCK_ID.6bea825589": [], "test.thorchain_models.not_null_core__fact_fee_events_TX_ID.363b10abc6": [], "test.thorchain_models.not_null_core__fact_fee_events_ASSET.07dd767dd5": [], "test.thorchain_models.not_null_core__fact_fee_events_POOL_DEDUCT.083ce34ede": [], "test.thorchain_models.not_null_core__fact_fee_events_ASSET_E8.6d72b49c41": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_fee_events_FACT_FEE_EVENTS_ID.11388d90d4": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_fee_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.524d327517": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.34835f54a3": [], "test.thorchain_models.unique_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.dda9f81b60": [], "test.thorchain_models.not_null_core__fact_set_node_keys_events_BLOCK_TIMESTAMP.41f9b1a5da": [], "test.thorchain_models.negative_one_core__fact_set_node_keys_events_DIM_BLOCK_ID.639cd7330f": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_node_keys_events_FACT_SET_NODE_KEYS_EVENTS_ID.5ac2675faa": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_node_keys_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.fd9fdc9f41": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.9dd9587001": [], "test.thorchain_models.unique_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.94c0227c24": [], "test.thorchain_models.not_null_core__fact_block_pool_depths_BLOCK_TIMESTAMP.3ea533bce0": [], "test.thorchain_models.negative_one_core__fact_block_pool_depths_DIM_BLOCK_ID.f4fc2ff338": [], "test.thorchain_models.not_null_core__fact_block_pool_depths_RUNE_E8.3234bc76fa": [], "test.thorchain_models.not_null_core__fact_block_pool_depths_ASSET_E8.0dc043e0cd": [], "test.thorchain_models.not_null_core__fact_block_pool_depths_SYNTH_E8.ff0f94fbc2": [], "test.thorchain_models.not_null_core__fact_block_pool_depths_POOL_NAME.5d37c16f5d": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_block_pool_depths_FACT_POOL_DEPTHS_ID.dfe5457eaf": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_block_pool_depths_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.14b49fcf71": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_prices_FACT_PRICES_ID.435e0f2c3d": [], "test.thorchain_models.unique_core__fact_prices_FACT_PRICES_ID.003cb27459": [], "test.thorchain_models.not_null_core__fact_prices_BLOCK_TIMESTAMP.441625422b": [], "test.thorchain_models.negative_one_core__fact_prices_DIM_BLOCK_ID.d29550f238": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_prices_FACT_PRICES_ID.fc15617ea8": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_prices_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.38e7c4700c": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.94cd2b4126": [], "test.thorchain_models.unique_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.2a2aa5cfae": [], "test.thorchain_models.not_null_core__fact_set_ip_address_events_BLOCK_TIMESTAMP.5ba0c58a75": [], "test.thorchain_models.negative_one_core__fact_set_ip_address_events_DIM_BLOCK_ID.2cce9fb3dd": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_set_ip_address_events_FACT_SET_IP_ADDRESS_EVENTS_ID.cb9aaa02f0": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_set_ip_address_events_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.cc626285f1": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.8f8165383d": [], "test.thorchain_models.unique_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.4771f271d5": [], "test.thorchain_models.not_null_core__fact_pool_block_fees_DAY.b3a2546784": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_pool_block_fees_FACT_POOL_BLOCK_FEES_ID.a85fc1c290": [], "test.thorchain_models.dbt_expectations_expect_column_to_exist_core__fact_slash_points_FACT_SLASH_POINTS_ID.33a34df512": [], "test.thorchain_models.unique_core__fact_slash_points_FACT_SLASH_POINTS_ID.f7b5ab10d6": [], "test.thorchain_models.not_null_core__fact_slash_points_BLOCK_TIMESTAMP.a7b4964341": [], "test.thorchain_models.negative_one_core__fact_slash_points_DIM_BLOCK_ID.e5523fb231": [], "test.thorchain_models.dbt_constraints_primary_key_core__fact_slash_points_FACT_SLASH_POINTS_ID.c20584f187": [], "test.thorchain_models.dbt_constraints_foreign_key_core__fact_slash_points_DIM_BLOCK_ID__DIM_BLOCK_ID__ref_core__dim_block_.eb3f0e7ae8": [], "source.thorchain_models.shared.prices_v2": [], "source.thorchain_models.thorchain_midgard.midgard_active_vault_events": ["model.thorchain_models.bronze__active_vault_events"], "source.thorchain_models.thorchain_midgard.midgard_add_events": ["model.thorchain_models.bronze__add_events"], "source.thorchain_models.thorchain_midgard.midgard_asgard_fund_yggdrasil_events": ["model.thorchain_models.bronze__asgard_fund_yggdrasil_events"], "source.thorchain_models.thorchain_midgard.midgard_block_log": ["model.thorchain_models.bronze__block_log"], "source.thorchain_models.thorchain_midgard.midgard_block_pool_depths": ["model.thorchain_models.bronze__block_pool_depths"], "source.thorchain_models.thorchain_midgard.midgard_bond_events": ["model.thorchain_models.bronze__bond_events"], "source.thorchain_models.thorchain_midgard.bond_events_pk_count": [], "source.thorchain_models.thorchain_midgard.midgard_constants": ["model.thorchain_models.bronze__constants"], "source.thorchain_models.thorchain_midgard.midgard_errata_events": ["model.thorchain_models.bronze__errata_events"], "source.thorchain_models.thorchain_midgard.midgard_fee_events": ["model.thorchain_models.bronze__fee_events"], "source.thorchain_models.thorchain_midgard.fee_events_pk_count": [], "source.thorchain_models.thorchain_midgard.midgard_gas_events": ["model.thorchain_models.bronze__gas_events"], "source.thorchain_models.thorchain_midgard.midgard_inactive_vault_events": ["model.thorchain_models.bronze__inactive_vault_events"], "source.thorchain_models.thorchain_midgard.midgard_message_events": [], "source.thorchain_models.thorchain_midgard.midgard_new_node_events": ["model.thorchain_models.bronze__new_node_events"], "source.thorchain_models.thorchain_midgard.midgard_outbound_events": ["model.thorchain_models.bronze__outbound_events"], "source.thorchain_models.thorchain_midgard.midgard_pending_liquidity_events": ["model.thorchain_models.bronze__pending_liquidity_events"], "source.thorchain_models.thorchain_midgard.midgard_pool_balance_change_events": ["model.thorchain_models.bronze__pool_balance_change_events"], "source.thorchain_models.thorchain_midgard.midgard_pool_events": ["model.thorchain_models.bronze__pool_events"], "source.thorchain_models.thorchain_midgard.midgard_refund_events": ["model.thorchain_models.bronze__refund_events"], "source.thorchain_models.thorchain_midgard.midgard_reserve_events": ["model.thorchain_models.bronze__reserve_events"], "source.thorchain_models.thorchain_midgard.midgard_rewards_event_entries": ["model.thorchain_models.bronze__rewards_event_entries"], "source.thorchain_models.thorchain_midgard.midgard_rewards_events": ["model.thorchain_models.bronze__rewards_events"], "source.thorchain_models.thorchain_midgard.midgard_set_ip_address_events": ["model.thorchain_models.bronze__set_ip_address_events"], "source.thorchain_models.thorchain_midgard.midgard_set_mimir_events": ["model.thorchain_models.bronze__set_mimir_events"], "source.thorchain_models.thorchain_midgard.midgard_set_node_keys_events": ["model.thorchain_models.bronze__set_node_keys_events"], "source.thorchain_models.thorchain_midgard.midgard_set_version_events": ["model.thorchain_models.bronze__set_version_events"], "source.thorchain_models.thorchain_midgard.midgard_slash_events": ["model.thorchain_models.bronze__slash_amounts"], "source.thorchain_models.thorchain_midgard.midgard_slash_points_events": ["model.thorchain_models.bronze__slash_points"], "source.thorchain_models.thorchain_midgard.midgard_stake_events": ["model.thorchain_models.bronze__stake_events"], "source.thorchain_models.thorchain_midgard.midgard_swap_events": ["model.thorchain_models.bronze__swap_events"], "source.thorchain_models.thorchain_midgard.midgard_switch_events": ["model.thorchain_models.bronze__switch_events"], "source.thorchain_models.thorchain_midgard.switch_events_pk_count": [], "source.thorchain_models.thorchain_midgard.midgard_thorname_change_events": ["model.thorchain_models.bronze__thorname_change_events"], "source.thorchain_models.thorchain_midgard.midgard_transfer_events": ["model.thorchain_models.bronze__transfer_events"], "source.thorchain_models.thorchain_midgard.midgard_unstake_events": ["model.thorchain_models.bronze__unstake_events"], "source.thorchain_models.thorchain_midgard.midgard_update_node_account_status_events": ["model.thorchain_models.bronze__update_node_account_status_events"], "source.thorchain_models.thorchain_midgard.midgard_validator_request_leave_events": ["model.thorchain_models.bronze__validator_request_leave_events"], "source.thorchain_models.crosschain.address_labels": []}}